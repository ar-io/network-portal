{"version":3,"file":"index-CQE1seX_.js","sources":["../../src/components/icons/banner_right_chevron.svg?react","../../src/pages/Gateways/Banner.tsx","../../src/pages/Gateways/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgBannerRightChevron = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 28, height: 28, viewBox: \"0 0 28 28\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Frame\" }, /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector\", d: \"M7 19.8332L12.8333 13.9998L7 8.1665\", stroke: \"url(#paint0_linear_1969_8320)\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_2\", d: \"M15.1665 19.8332L20.9998 13.9998L15.1665 8.1665\", stroke: \"url(#paint1_linear_1969_8320)\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint0_linear_1969_8320\", x1: 7.4615, y1: 17.377, x2: 12.8935, y2: 17.3108, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint1_linear_1969_8320\", x1: 15.628, y1: 17.377, x2: 21.06, y2: 17.3108, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" }))));\nexport default SvgBannerRightChevron;\n","import {\n  BannerRightChevron,\n  GatewayHoverIcon,\n  GatewayIcon,\n  PinkArrowIcon,\n  StartGatewayCubes,\n} from '@src/components/icons';\nimport ConnectModal from '@src/components/modals/ConnectModal';\nimport StartGatewayModal from '@src/components/modals/StartGatewayModal';\nimport { GatewayStatus, useGatewayInfo } from '@src/hooks/useGatewayInfo';\nimport { useGlobalState } from '@src/store';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst InfoSection = ({ label, value }: { label: string; value: string }) => {\n  return (\n    <div className=\"inline-flex h-[2.375rem] flex-col items-start justify-start gap-1 border-r px-12 text-left dark:border-transparent-100-8\">\n      <div className=\"pt-1 text-xs leading-none text-low\">{label}</div>\n      <div className=\"text-nowrap text-xs text-mid\">{value}</div>\n    </div>\n  );\n};\n\nconst Banner = () => {\n  const navigate = useNavigate();\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n\n  const [loginOpen, setLoginOpen] = useState(false);\n  const [startGatewayOpen, setStartGatewayOpen] = useState(false);\n\n  const { gatewayInfo, gatewayStatus } = useGatewayInfo();\n\n  return (\n    <div>\n      {!walletAddress || gatewayStatus == GatewayStatus.NOT_FOUND ? (\n        <div>\n          <button\n            className=\"group relative h-[7.5rem] w-full overflow-hidden rounded-xl bg-grey-800\"\n            onClick={() => {\n              if (!walletAddress) {\n                setLoginOpen(true);\n              } else {\n                setStartGatewayOpen(true);\n              }\n            }}\n          >\n            <div\n              className=\"invisible size-full rounded-xl\n       bg-gradient-to-r from-gradient-primary-start to-gradient-primary-end p-px group-hover:visible\"\n            >\n              <div className=\"size-full overflow-hidden rounded-xl bg-grey-800\">\n                <StartGatewayCubes className=\"relative -top-px left-[calc(4rem-1px)] z-0\" />\n              </div>\n            </div>\n            <StartGatewayCubes className=\"visible absolute left-16 top-0 z-0 group-hover:invisible\" />\n            <div className=\"absolute top-0 z-10 flex size-full flex-col items-center justify-center bg-transparent py-6 align-middle\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-gradient\">Start your own gateway</div>{' '}\n                <PinkArrowIcon className=\"size-3\" />\n              </div>\n\n              <div className=\"px-6 pt-2 text-sm text-low\">\n                By running a gateway, you become a contributor to the ecosystem\n                and can earn rewards.\n              </div>\n            </div>\n          </button>\n        </div>\n      ) : gatewayStatus == GatewayStatus.FOUND ? (\n        <div>\n          <button\n            className=\"group relative h-fit w-full overflow-hidden rounded-xl bg-grey-800 lg:h-[7.5rem]\"\n            onClick={() => {\n              if (walletAddress) {\n                navigate(`/gateways/${walletAddress.toString()}`);\n              }\n            }}\n          >\n            <div\n              className=\"invisible size-full rounded-xl bg-gradient-to-r\n        from-gradient-primary-start to-gradient-primary-end p-px group-hover:visible\"\n            >\n              <div className=\"relative size-full overflow-hidden rounded-xl bg-grey-800\">\n                <StartGatewayCubes className=\"absolute right-[calc(-.625rem-1px)] top-[calc(-.3125rem-1px)] z-0\" />\n              </div>\n            </div>\n            <StartGatewayCubes className=\"visible absolute right-[-.625rem] top-[-.3125rem] z-0  group-hover:invisible\" />\n            <BannerRightChevron className=\"invisible absolute right-4 top-4 group-hover:visible\" />\n            <div className=\"top-0 z-10 flex size-full flex-col bg-transparent py-6 align-middle lg:absolute\">\n              <div className=\"flex items-center gap-3 pl-6\">\n                <GatewayIcon className=\"block h-3 w-4 group-hover:hidden\" />\n                <GatewayHoverIcon className=\"hidden h-3 w-4 group-hover:block\" />\n                <div className=\"group-hover:text-gradient text-sm text-high\">\n                  My Gateway\n                </div>\n              </div>\n              <div className=\"mt-3 flex flex-col pl-1.5 lg:flex-row\">\n                {gatewayInfo.map(([label, value], index) => (\n                  <InfoSection key={index} label={label} value={`${value}`} />\n                ))}\n              </div>\n            </div>\n          </button>\n        </div>\n      ) : (\n        <div className=\"relative h-[7.5rem] w-full justify-center overflow-hidden rounded-xl bg-grey-800 \">\n          <div className=\"h-full content-center text-center text-sm text-low\">\n            Loading gateway information...\n          </div>\n        </div>\n      )}\n      {loginOpen && <ConnectModal onClose={() => setLoginOpen(false)} />}\n      {startGatewayOpen && (\n        <StartGatewayModal onClose={() => setStartGatewayOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default Banner;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport AddressCell from '@src/components/AddressCell';\nimport CopyButton from '@src/components/CopyButton';\nimport Header from '@src/components/Header';\nimport Streak from '@src/components/Streak';\nimport TableView from '@src/components/TableView';\nimport Tooltip from '@src/components/Tooltip';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport useGateways from '../../hooks/useGateways';\nimport { useGlobalState } from '../../store/globalState';\nimport Banner from './Banner';\n// import ColumnSelector from '../../components/ColumnSelector';\nimport ColumnSelector from '@src/components/ColumnSelector';\nimport { formatDate, formatWithCommas } from '@src/utils';\n\ninterface TableData {\n  label: string;\n  domain: string;\n  owner: string;\n  start: Date;\n  totalDelegatedStake: number; // IO\n  operatorStake: number; // IO\n  totalStake: number; // IO\n  status: string;\n  endTimeStamp: number;\n  performance: number;\n  passedEpochCount: number;\n  totalEpochCount: number;\n  streak: number;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst Gateways = () => {\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const { isLoading, data: gateways } = useGateways();\n  const [tableData, setTableData] = useState<Array<TableData>>([]);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const tableData: Array<TableData> = Object.entries(gateways ?? {}).reduce(\n      (acc: Array<TableData>, [owner, gateway]) => {\n        const passedEpochCount = gateway.stats.passedEpochCount;\n        const totalEpochCount = gateway.stats.totalEpochCount;\n        return [\n          ...acc,\n          {\n            label: gateway.settings.label,\n            domain: gateway.settings.fqdn,\n            owner: owner,\n            start: new Date(gateway.startTimestamp),\n            totalDelegatedStake: new mARIOToken(gateway.totalDelegatedStake)\n              .toARIO()\n              .valueOf(),\n            operatorStake: new mARIOToken(gateway.operatorStake)\n              .toARIO()\n              .valueOf(),\n            totalStake: new mARIOToken(\n              gateway.totalDelegatedStake + gateway.operatorStake,\n            )\n              .toARIO()\n              .valueOf(),\n            status: gateway.status,\n            endTimeStamp: gateway.endTimestamp,\n            performance:\n              totalEpochCount > 0 ? passedEpochCount / totalEpochCount : -1,\n            passedEpochCount,\n            totalEpochCount,\n            streak:\n              gateway.status == 'leaving'\n                ? Number.NEGATIVE_INFINITY\n                : gateway.stats.failedConsecutiveEpochs > 0\n                  ? -gateway.stats.failedConsecutiveEpochs\n                  : gateway.stats.passedConsecutiveEpochs,\n          },\n        ];\n      },\n      [],\n    );\n    setTableData(tableData);\n  }, [gateways]);\n\n  // Define columns for the table\n  const columns = useMemo<ColumnDef<TableData, any>[]>(\n    () => [\n      columnHelper.accessor('label', {\n        id: 'label',\n        header: 'Label',\n        sortDescFirst: false,\n      }),\n      columnHelper.accessor('domain', {\n        id: 'domain',\n        header: 'Domain',\n        sortDescFirst: false,\n        cell: ({ row }) => (\n          <div className=\"flex items-center gap-2\">\n            <a\n              href={`https://${row.getValue('domain')}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n              className=\"text-gradient\"\n            >\n              {row.getValue('domain')}\n            </a>\n            <CopyButton textToCopy={row.getValue('domain')} />\n          </div>\n        ),\n      }),\n      columnHelper.accessor('owner', {\n        id: 'owner',\n        header: 'Address',\n        sortDescFirst: false,\n        cell: ({ row }) => <AddressCell address={row.getValue('owner')} />,\n      }),\n      columnHelper.accessor('start', {\n        id: 'start',\n        header: 'Join Date',\n        sortDescFirst: true,\n        cell: ({ row }) => formatDate(row.original.start),\n      }),\n      columnHelper.accessor('totalStake', {\n        id: 'totalStake',\n        header: `Total Stake (${ticker})`,\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <Tooltip\n            message={\n              <div>\n                <div>\n                  Operator Stake: {formatWithCommas(row.original.operatorStake)}{' '}\n                  {ticker}\n                </div>\n                <div className=\"mt-1\">\n                  Delegated Stake:{' '}\n                  {formatWithCommas(row.original.totalDelegatedStake)} {ticker}\n                </div>\n              </div>\n            }\n          >\n            {formatWithCommas(row.getValue('totalStake'))}\n          </Tooltip>\n        ),\n      }),\n      columnHelper.accessor('status', {\n        id: 'status',\n        header: 'Status',\n        sortDescFirst: false,\n        cell: ({ row }) =>\n          row.original.status == 'leaving' ? (\n            <Tooltip\n              message={\n                <div>\n                  <div>\n                    Final Withdrawal:{' '}\n                    {formatDate(new Date(row.original.endTimeStamp))}\n                  </div>\n                </div>\n              }\n            >\n              <div className=\"text-red-500\">leaving</div>\n            </Tooltip>\n          ) : (\n            row.original.status\n          ),\n      }),\n      columnHelper.accessor('performance', {\n        id: 'performance',\n        header: 'Performance',\n        sortDescFirst: true,\n        cell: ({ row }) =>\n          row.original.performance < 0 ? (\n            'N/A'\n          ) : (\n            <Tooltip\n              message={\n                <div>\n                  <div>Passed Epochs: {row.original.passedEpochCount}</div>\n                  <div>Total Epochs: {row.original.totalEpochCount}</div>\n                </div>\n              }\n            >\n              {`${(row.original.performance * 100).toFixed(2)}%`}\n            </Tooltip>\n          ),\n      }),\n      columnHelper.accessor('streak', {\n        id: 'streak',\n        header: 'Streak',\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <div className=\"pr-6\">\n            <Streak streak={row.original.streak} />\n          </div>\n        ),\n      }),\n    ],\n    [ticker],\n  ); // Only recalculate when ticker changes\n\n  return (\n    <div className=\"flex h-full max-w-full flex-col\">\n      <div className=\"mb-6 flex shrink-0 flex-col gap-6\">\n        <Header />\n        <Banner />\n      </div>\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full overflow-y-auto\">\n          <div className=\"pt-0\">\n            <div className=\"mb-8\">\n              <div className=\"flex w-full items-center rounded-t-xl border border-grey-600 bg-containerL3 py-2 pl-6 pr-[0.8125rem]\">\n                <div className=\"grow text-sm text-mid\">Gateways</div>\n                <ColumnSelector tableId=\"gateways\" columns={columns} />\n              </div>\n              <TableView\n                columns={columns}\n                data={tableData}\n                defaultSortingState={{ id: 'totalStake', desc: true }}\n                isLoading={isLoading}\n                noDataFoundText=\"Unable to fetch gateways.\"\n                onRowClick={(row) => {\n                  navigate(`/gateways/${row.owner}`);\n                }}\n                tableId=\"gateways\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gateways;\n"],"names":["SvgBannerRightChevron","props","reactExports","InfoSection","label","value","jsxRuntimeExports","Banner","navigate","useNavigate","walletAddress","useGlobalState","state","loginOpen","setLoginOpen","startGatewayOpen","setStartGatewayOpen","gatewayInfo","gatewayStatus","useGatewayInfo","GatewayStatus","SvgStartGatewayCubes","SvgPinkArrow","SvgGateway","SvgGatewayHover","index","ConnectModal","StartGatewayModal","columnHelper","createColumnHelper","Gateways","ticker","isLoading","gateways","useGateways","tableData","setTableData","tableData2","acc","owner","gateway","passedEpochCount","totalEpochCount","RP","columns","row","e","CopyButton","AddressCell","formatDate","Tooltip","formatWithCommas","Streak","Header","ColumnSelector","TableView"],"mappings":"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"}