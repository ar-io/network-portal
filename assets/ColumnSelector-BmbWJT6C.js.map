{"version":3,"file":"ColumnSelector-BmbWJT6C.js","sources":["../../node_modules/lucide-react/dist/esm/icons/filter.js","../../src/components/ColumnSelector.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Filter = createLucideIcon(\"Filter\", [\n  [\"polygon\", { points: \"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\", key: \"1yg77f\" }]\n]);\n\nexport { Filter as default };\n//# sourceMappingURL=filter.js.map\n","import * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { useColumnPreferences } from '@src/store/columnPreferences';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { FilterIcon } from 'lucide-react';\nimport { useCallback, useMemo } from 'react';\n\nexport interface ColumnSelectorProps<T> {\n  tableId: string;\n  columns: ColumnDef<T, any>[];\n  onColumnVisibilityChange?: (\n    columnVisibility: Record<string, boolean>,\n  ) => void;\n}\n\nconst ColumnSelector = <T,>({\n  tableId,\n  columns,\n  onColumnVisibilityChange,\n}: ColumnSelectorProps<T>) => {\n  const { getTableColumnVisibility, setColumnVisibility } =\n    useColumnPreferences();\n\n  // Get current visibility state\n  const currentVisibility = getTableColumnVisibility(tableId);\n\n  // Extract column metadata for display\n  const columnMetadata = useMemo(() => {\n    return columns\n      .filter((col) => col.id && col.id !== 'action' && col.id !== 'actions') // Exclude action columns\n      .map((col) => {\n        // Use meta.displayName if available\n        if (col.meta?.displayName) {\n          return {\n            id: col.id!,\n            label: col.meta.displayName,\n            visible: currentVisibility[col.id!] ?? true,\n          };\n        }\n\n        const header = col.header;\n        let label = col.id || 'Unknown';\n\n        // Extract label from header if it's a string or function\n        if (typeof header === 'string') {\n          label = header;\n        } else if (typeof header === 'function') {\n          // For function headers, use the column id as fallback\n          label = col.id || 'Unknown';\n        }\n\n        return {\n          id: col.id!,\n          label,\n          visible: currentVisibility[col.id!] ?? true,\n        };\n      });\n  }, [columns, currentVisibility]);\n\n  const handleColumnToggle = useCallback(\n    (columnId: string, visible: boolean) => {\n      setColumnVisibility(tableId, columnId, visible);\n\n      // Notify parent component of visibility change\n      if (onColumnVisibilityChange) {\n        const updatedVisibility = {\n          ...currentVisibility,\n          [columnId]: visible,\n        };\n        onColumnVisibilityChange(updatedVisibility);\n      }\n    },\n    [tableId, currentVisibility, setColumnVisibility, onColumnVisibilityChange],\n  );\n\n  const visibleCount = columnMetadata.filter((col) => col.visible).length;\n  const totalCount = columnMetadata.length;\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <button\n          className=\"flex items-center justify-center rounded-md bg-gradient-to-b from-btn-primary-outer-gradient-start to-btn-primary-outer-gradient-end p-px transition-opacity hover:opacity-80\"\n          title={`Column Selector (${visibleCount}/${totalCount} visible)`}\n        >\n          <div className=\"inline-flex size-full items-center justify-center rounded-md bg-btn-primary-base bg-gradient-to-b from-btn-primary-gradient-start to-btn-primary-gradient-end p-2 shadow-inner\">\n            <FilterIcon className=\"size-4\" />\n          </div>\n        </button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Content\n        className=\"z-50 min-w-[200px] max-w-[250px] rounded border border-grey-500 bg-containerL0 text-sm shadow-lg\"\n        align=\"end\"\n        sideOffset={4}\n      >\n        <div className=\"border-b border-grey-500 px-3 py-2 text-xs font-medium text-mid\">\n          Columns ({visibleCount}/{totalCount})\n        </div>\n\n        <div className=\"max-h-[300px] overflow-y-auto scrollbar\">\n          {columnMetadata.map((column) => (\n            <DropdownMenu.Item\n              key={column.id}\n              className=\"flex cursor-pointer select-none items-center gap-3 px-3 py-2 outline-none data-[highlighted]:bg-containerL3\"\n              onSelect={(e) => e.preventDefault()} // Prevent dropdown from closing\n            >\n              <input\n                type=\"checkbox\"\n                id={`column-${column.id}`}\n                checked={column.visible}\n                onChange={(e) =>\n                  handleColumnToggle(column.id, e.target.checked)\n                }\n                className=\"size-4 rounded border border-grey-500 bg-containerL0 text-high focus:ring-2 focus:ring-grey-400 focus:ring-offset-0\"\n              />\n              <label\n                htmlFor={`column-${column.id}`}\n                className=\"flex-1 cursor-pointer text-sm text-high\"\n              >\n                {column.label}\n              </label>\n            </DropdownMenu.Item>\n          ))}\n        </div>\n\n        {columnMetadata.length === 0 && (\n          <div className=\"px-3 py-4 text-center text-low\">\n            No columns available\n          </div>\n        )}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n\nexport default ColumnSelector;\n"],"names":["Filter","createLucideIcon","ColumnSelector","tableId","columns","onColumnVisibilityChange","getTableColumnVisibility","setColumnVisibility","useColumnPreferences","currentVisibility","columnMetadata","reactExports","col","_a","header","label","handleColumnToggle","columnId","visible","updatedVisibility","visibleCount","totalCount","jsxRuntimeExports","Root2","Trigger","Content2","column","Item2","e"],"mappings":"ibAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAAA,EAAAC,EAAA,SAAA,CACA,CAAA,UAAA,CAAA,OAAA,8CAAA,IAAA,QAAA,CAAA,CACA,CAAA,ECGAC,EAAA,CAAA,CAAA,QAAAC,EACA,QAAAC,EACA,yBAAAC,CAEA,IAAA,CACA,KAAA,CAAA,yBAAAC,EAAA,oBAAAC,CAAA,EAAAC,EAAA,EAIAC,EAAAH,EAAAH,CAAA,EAGAO,EAAAC,EAAA,QAAA,IACAP,EAAA,OAAAQ,GAAAA,EAAA,IAAAA,EAAA,KAAA,UAAAA,EAAA,KAAA,SAAA,EAAA,IAAAA,GAAA,OAIA,IAAAC,EAAAD,EAAA,OAAA,MAAAC,EAAA,YACA,MAAA,CAAA,GAAAD,EAAA,GACA,MAAAA,EAAA,KAAA,YACA,QAAAH,EAAAG,EAAA,EAAA,GAAA,EACA,EAIA,MAAAE,EAAAF,EAAA,OACA,IAAAG,EAAAH,EAAA,IAAA,UAGA,OAAA,OAAAE,GAAA,SACAC,EAAAD,EAAA,OAAAA,GAAA,aAGAC,EAAAH,EAAA,IAAA,WAGA,CAAA,GAAAA,EAAA,GACA,MAAAG,EACA,QAAAN,EAAAG,EAAA,EAAA,GAAA,EACA,CACA,CAAA,EACA,CAAAR,EAAAK,CAAA,CAAA,EAGAO,EAAAL,EAAA,YAAA,CAAAM,EAAAC,IAAA,CAKA,GAHAX,EAAAJ,EAAAc,EAAAC,CAAA,EAGAb,EAAA,CACA,MAAAc,EAAA,CAAA,GAAAV,EACA,CAAAQ,CAAA,EAAAC,CACA,EAEAb,EAAAc,CAAA,CAAA,CACA,EACA,CAAAhB,EAAAM,EAAAF,EAAAF,CAAA,CACA,EAGAe,EAAAV,EAAA,OAAAE,GAAAA,EAAA,OAAA,EAAA,OACAS,EAAAX,EAAA,OAEA,OAAAY,EAAA,KAAAC,EAAA,CAAA,MAAA,GAAA,SAAA,CAEAD,EAAA,IAAAE,EAAA,CAAA,QAAA,GAAA,SAAAF,EAAA,IACA,SAAA,CAAA,UAAA,gLACA,MAAA,oBAAAF,CAAA,IAAAC,CAAA,YACA,SAAAC,EAAA,IAAA,MAAA,CAAA,UAAA,iLAAA,SAAAA,EAAA,IAAAtB,EAAA,CAAA,UAAA,QAAA,CAAA,CAAA,CAAA,CAIA,CAAA,CAAA,CAAA,EAEAsB,EAAA,KAEAG,EAAA,CAAA,UAAA,mGACA,MAAA,MACA,WAAA,EACA,SAAA,CAEAH,EAAA,KAAA,MAAA,CAAA,UAAA,kEAAA,SAAA,CAAA,YAAAF,EACA,IAAAC,EAAA,GAAA,CAAA,CAAA,EACAC,EAAA,IAAA,MAAA,CAAA,UAAA,0CAAA,SAAAZ,EAAA,IAAAgB,GAAAJ,EAAA,KAIAK,EAAA,CAAA,UAAA,8GAEA,SAAAC,GAAAA,EAAA,eAAA,EACA,SAAA,CAEAN,EAAA,IAAA,QAAA,CAAA,KAAA,WACA,GAAA,UAAAI,EAAA,EAAA,GACA,QAAAA,EAAA,QACA,SAAAE,GAAAZ,EAAAU,EAAA,GAAAE,EAAA,OAAA,OAAA,EAEA,UAAA,qHAEA,CAAA,EACAN,EAAA,IACA,QAAA,CAAA,QAAA,UAAAI,EAAA,EAAA,GACA,UAAA,0CACA,SAAAA,EAAA,KAEA,CAAA,CACA,CAAA,EAAAA,EAAA,EAlBA,CAAA,CAAA,CAAA,EAqBAhB,EAAA,SAAA,GAAAY,EAAA,IAAA,MAAA,CAAA,UAAA,iCAAA,SAAA,sBAAA,CAAA,CAKA,CAAA,CAAA,CAEA,CAAA,CAAA,CAGA","x_google_ignoreList":[0]}