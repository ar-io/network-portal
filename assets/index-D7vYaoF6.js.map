{"version":3,"file":"index-D7vYaoF6.js","sources":["../../src/components/icons/staking_lines_bg.svg?react","../../src/hooks/useRewardsEarned.ts","../../src/pages/Staking/DelegateStakeTable.tsx","../../src/components/modals/StakeWithdrawalModal.tsx","../../src/components/modals/WithdrawAllModal.tsx","../../src/pages/Staking/MyStakesTable.tsx","../../src/pages/Staking/ConnectedLandingPage.tsx","../../src/pages/Staking/Banner.tsx","../../src/pages/Staking/NotConnectedLandingPage.tsx","../../src/pages/Staking/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgStakingLinesBg = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 1440, height: 941, viewBox: \"40 0 1440 941\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { filter: \"url(#filter0_ddddd_2683_6709)\" }, /* @__PURE__ */ React.createElement(\"g\", { clipPath: \"url(#clip0_2683_6709)\" }, /* @__PURE__ */ React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M790 735L790 -89H789L789 735H790ZM774 735L774 106H773L773 735H774ZM742 735L742 182H741L741 735H742ZM726 -13L726 735H725L725 -13H726ZM710 735L710 290H709L709 735H710Z\", fill: \"url(#paint1_linear_2683_6709)\", fillOpacity: 0.25 }), /* @__PURE__ */ React.createElement(\"line\", { x1: 789.5, y1: 735, x2: 789.5, y2: -37, stroke: \"url(#paint2_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"path\", { opacity: 0.8, d: \"M757.499 735L755.564 95.9288\", stroke: \"url(#paint3_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"line\", { opacity: 0.1, x1: 725.5, y1: 735, x2: 725.5, y2: 56, stroke: \"url(#paint4_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"line\", { opacity: 0.2, x1: 805.5, y1: 735, x2: 805.5, y2: 141, stroke: \"url(#paint5_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"line\", { opacity: 0.5, x1: 741.5, y1: 735, x2: 741.5, y2: 182, stroke: \"url(#paint6_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"line\", { opacity: 0.4, x1: 773.5, y1: 735, x2: 773.5, y2: 106, stroke: \"url(#paint7_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"line\", { opacity: 0.8, x1: 709.5, y1: 735, x2: 715.938, y2: 162, stroke: \"url(#paint8_linear_2683_6709)\" }), /* @__PURE__ */ React.createElement(\"ellipse\", { cx: 753, cy: 147, rx: 135.721, ry: 47.833, fill: \"url(#paint9_radial_2683_6709)\" })), /* @__PURE__ */ React.createElement(\"rect\", { x: 90.5, y: 83.5, width: 1325, height: 133, rx: 11.5, stroke: \"url(#paint10_linear_2683_6709)\" })), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"filter\", { id: \"filter0_ddddd_2683_6709\", x: -393, y: 0, width: 2292, height: 2426, filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\" }, /* @__PURE__ */ React.createElement(\"feFlood\", { floodOpacity: 0, result: \"BackgroundImageFix\" }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { in: \"SourceAlpha\", type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\", result: \"hardAlpha\" }), /* @__PURE__ */ React.createElement(\"feOffset\", { dy: 69 }), /* @__PURE__ */ React.createElement(\"feGaussianBlur\", { stdDeviation: 76 }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.29 0\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in2: \"BackgroundImageFix\", result: \"effect1_dropShadow_2683_6709\" }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { in: \"SourceAlpha\", type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\", result: \"hardAlpha\" }), /* @__PURE__ */ React.createElement(\"feOffset\", { dy: 276 }), /* @__PURE__ */ React.createElement(\"feGaussianBlur\", { stdDeviation: 138 }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.26 0\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in2: \"effect1_dropShadow_2683_6709\", result: \"effect2_dropShadow_2683_6709\" }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { in: \"SourceAlpha\", type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\", result: \"hardAlpha\" }), /* @__PURE__ */ React.createElement(\"feOffset\", { dy: 621 }), /* @__PURE__ */ React.createElement(\"feGaussianBlur\", { stdDeviation: 186.5 }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in2: \"effect2_dropShadow_2683_6709\", result: \"effect3_dropShadow_2683_6709\" }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { in: \"SourceAlpha\", type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\", result: \"hardAlpha\" }), /* @__PURE__ */ React.createElement(\"feOffset\", { dy: 1105 }), /* @__PURE__ */ React.createElement(\"feGaussianBlur\", { stdDeviation: 221 }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.04 0\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in2: \"effect3_dropShadow_2683_6709\", result: \"effect4_dropShadow_2683_6709\" }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { in: \"SourceAlpha\", type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\", result: \"hardAlpha\" }), /* @__PURE__ */ React.createElement(\"feOffset\", { dy: 1726 }), /* @__PURE__ */ React.createElement(\"feGaussianBlur\", { stdDeviation: 241.5 }), /* @__PURE__ */ React.createElement(\"feColorMatrix\", { type: \"matrix\", values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.01 0\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in2: \"effect4_dropShadow_2683_6709\", result: \"effect5_dropShadow_2683_6709\" }), /* @__PURE__ */ React.createElement(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"effect5_dropShadow_2683_6709\", result: \"shape\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint0_linear_2683_6709\", x1: 539, y1: 83, x2: 998.042, y2: 318.345, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#1D1D1F\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#0E0E0F\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint1_linear_2683_6709\", x1: 715.408, y1: 561.527, x2: 790.846, y2: 561.346, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint2_linear_2683_6709\", x1: 790.789, y1: 673.924, x2: 752.713, y2: 671.902, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint3_linear_2683_6709\", x1: 757.092, y1: 684.441, x2: 684.303, y2: 675.402, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint4_linear_2683_6709\", x1: 726.789, y1: 681.282, x2: 688.744, y2: 678.984, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint5_linear_2683_6709\", x1: 806.789, y1: 688.006, x2: 768.786, y2: 685.383, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint6_linear_2683_6709\", x1: 742.789, y1: 691.25, x2: 704.814, y2: 688.435, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint7_linear_2683_6709\", x1: 774.789, y1: 685.237, x2: 736.767, y2: 682.759, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint8_linear_2683_6709\", x1: 715.083, y1: 689.668, x2: 512.283, y2: 596.245, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.52, stopColor: \"#EBAEC6\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" })), /* @__PURE__ */ React.createElement(\"radialGradient\", { id: \"paint9_radial_2683_6709\", cx: 0, cy: 0, r: 1, gradientUnits: \"userSpaceOnUse\", gradientTransform: \"translate(753 147) rotate(90) scale(72.7222 206.342)\" }, /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.25, stopColor: \"#19191C\", stopOpacity: 0.9 }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 0.707422, stopColor: \"#19191C\", stopOpacity: 0.25 })), /* @__PURE__ */ React.createElement(\"clipPath\", { id: \"clip0_2683_6709\" }, /* @__PURE__ */ React.createElement(\"rect\", { x: 90, y: 83, width: 1326, height: 134, rx: 12, fill: \"white\" }))));\nexport default SvgStakingLinesBg;\n","import { isDistributedEpochData, mARIOToken } from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/store';\nimport { useEffect, useState } from 'react';\nimport useEpochs from './useEpochs';\n\nexport type RewardsEarned = {\n  previousEpoch: number;\n  totalForPastAvailableEpochs: number;\n};\n\nconst useRewardsEarned = (walletAddress?: string) => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n  const [rewardsEarned, setRewardsEarned] = useState<RewardsEarned>();\n  const { data: epochs } = useEpochs();\n\n  useEffect(() => {\n    if (arIOReadSDK && epochs && walletAddress) {\n      const update = async () => {\n        const sorted = epochs.sort(\n          (a, b) => (a?.epochIndex || 0) - (b?.epochIndex || 0),\n        );\n        const previousEpoch = sorted[sorted.length - 2];\n        const previousDistribution = previousEpoch?.distributions;\n\n        // rewards are not available on current epoch\n        const previousEpochDistributed =\n          previousDistribution && isDistributedEpochData(previousDistribution)\n            ? previousDistribution.rewards.distributed ?? {}\n            : undefined;\n\n        const previousEpochRewards =\n          previousEpochDistributed?.[walletAddress] ?? 0;\n\n        const totalForPastAvailableEpochs = epochs.reduce((acc, epoch) => {\n          const distribution = epoch?.distributions;\n          const distributed =\n            distribution && isDistributedEpochData(distribution)\n              ? distribution.rewards.distributed ?? {}\n              : {};\n          return acc + (distributed[walletAddress] || 0);\n        }, 0);\n\n        setRewardsEarned({\n          previousEpoch: new mARIOToken(previousEpochRewards)\n            .toARIO()\n            .valueOf(),\n          totalForPastAvailableEpochs: new mARIOToken(\n            totalForPastAvailableEpochs,\n          )\n            .toARIO()\n            .valueOf(),\n        });\n      };\n      update();\n    }\n  }, [epochs, walletAddress, arIOReadSDK]);\n  return rewardsEarned;\n};\n\nexport default useRewardsEarned;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport AddressCell from '@src/components/AddressCell';\nimport Button, { ButtonType } from '@src/components/Button';\nimport ColumnSelector from '@src/components/ColumnSelector';\nimport CopyButton from '@src/components/CopyButton';\nimport Streak from '@src/components/Streak';\nimport TableView from '@src/components/TableView';\nimport Tooltip from '@src/components/Tooltip';\nimport { InfoIcon } from '@src/components/icons';\nimport ConnectModal from '@src/components/modals/ConnectModal';\nimport StakingModal from '@src/components/modals/StakingModal';\nimport { EAY_TOOLTIP_FORMULA, EAY_TOOLTIP_TEXT } from '@src/constants';\nimport useGateways from '@src/hooks/useGateways';\nimport useProtocolBalance from '@src/hooks/useProtocolBalance';\nimport { useGlobalState } from '@src/store';\nimport { formatWithCommas } from '@src/utils';\nimport { calculateGatewayRewards } from '@src/utils/rewards';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { MathJax } from 'better-react-mathjax';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ninterface TableData {\n  label: string;\n  domain: string;\n  owner: string;\n  streak: number;\n  rewardShareRatio: number;\n  performance: number;\n  passedEpochCount: number;\n  totalEpochCount: number;\n  totalDelegatedStake: number;\n  totalStake: number;\n  operatorStake: number;\n  eay: number;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst DelegateStake = () => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const { isLoading, data: gateways } = useGateways();\n  const [stakeableGateways, setStakeableGateways] = useState<Array<TableData>>(\n    [],\n  );\n\n  const [stakingModalWalletAddress, setStakingModalWalletAddress] =\n    useState<string>();\n\n  const [isConnectModalOpen, setIsConnectModalOpen] = useState<boolean>(false);\n\n  const { data: protocolBalance } = useProtocolBalance();\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const stakeableGateways: Array<TableData> =\n      !gateways || !protocolBalance\n        ? []\n        : Object.entries(gateways)\n            .filter((g) => g[1].status === 'joined')\n            .reduce((acc, [owner, gateway]) => {\n              if (gateway.settings.allowDelegatedStaking) {\n                const passedEpochCount = gateway.stats.passedEpochCount;\n                const totalEpochCount = (gateway.stats as any).totalEpochCount;\n\n                return [\n                  ...acc,\n                  {\n                    label: gateway.settings.label,\n                    domain: gateway.settings.fqdn,\n                    owner,\n                    streak:\n                      gateway.stats.failedConsecutiveEpochs > 0\n                        ? -gateway.stats.failedConsecutiveEpochs\n                        : gateway.stats.passedConsecutiveEpochs,\n\n                    rewardShareRatio: gateway.settings.allowDelegatedStaking\n                      ? gateway.settings.delegateRewardShareRatio\n                      : -1,\n                    performance:\n                      totalEpochCount > 0\n                        ? gateway.stats.passedEpochCount / totalEpochCount\n                        : -1,\n                    passedEpochCount,\n                    totalEpochCount,\n                    totalDelegatedStake: new mARIOToken(\n                      gateway.totalDelegatedStake,\n                    )\n                      .toARIO()\n                      .valueOf(),\n                    operatorStake: new mARIOToken(gateway.operatorStake)\n                      .toARIO()\n                      .valueOf(),\n                    totalStake: new mARIOToken(\n                      gateway.totalDelegatedStake + gateway.operatorStake,\n                    )\n                      .toARIO()\n                      .valueOf(),\n\n                    eay: calculateGatewayRewards(\n                      new mARIOToken(protocolBalance).toARIO(),\n                      Object.values(gateways).filter(\n                        (g) => g.status == 'joined',\n                      ).length,\n                      gateway,\n                    ).EAY,\n                  },\n                ];\n              }\n              return acc;\n            }, [] as Array<TableData>);\n    setStakeableGateways(stakeableGateways);\n  }, [gateways, protocolBalance, walletAddress]);\n\n  // Define columns for the table\n  const columns = useMemo<ColumnDef<TableData, any>[]>(\n    () => [\n      columnHelper.accessor('label', {\n        id: 'label',\n        header: 'Label',\n        sortDescFirst: false,\n      }),\n      columnHelper.accessor('domain', {\n        id: 'domain',\n        header: 'Domain',\n        sortDescFirst: false,\n        cell: ({ row }) => (\n          <div className=\"flex items-center gap-2\">\n            <a\n              href={`https://${row.getValue('domain')}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n              className=\"text-gradient\"\n            >\n              {row.getValue('domain')}\n            </a>\n            <CopyButton textToCopy={row.getValue('domain')} />\n          </div>\n        ),\n      }),\n      columnHelper.accessor('owner', {\n        id: 'owner',\n        header: 'Address',\n        sortDescFirst: false,\n        cell: ({ row }) => <AddressCell address={row.getValue('owner')} />,\n      }),\n      columnHelper.accessor('totalStake', {\n        id: 'totalStake',\n        header: `Total Stake (${ticker})`,\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <Tooltip\n            message={\n              <div>\n                <div>\n                  Operator Stake: {formatWithCommas(row.original.operatorStake)}{' '}\n                  {ticker}\n                </div>\n                <div className=\"mt-1\">\n                  Delegated Stake:{' '}\n                  {formatWithCommas(row.original.totalDelegatedStake)} {ticker}\n                </div>\n              </div>\n            }\n          >\n            {formatWithCommas(row.getValue('totalStake'))}\n          </Tooltip>\n        ),\n      }),\n      columnHelper.accessor('rewardShareRatio', {\n        id: 'rewardShareRatio',\n        header: 'Reward Share Ratio',\n        sortDescFirst: true,\n        cell: ({ row }) =>\n          row.original.rewardShareRatio >= 0\n            ? `${row.original.rewardShareRatio}%`\n            : 'N/A',\n      }),\n\n      columnHelper.accessor('eay', {\n        id: 'eay',\n        meta: {\n          displayName: 'Delegate EAY',\n        },\n        header: () => (\n          <div className=\"flex gap-1\">\n            Delegate EAY\n            <Tooltip\n              message={\n                <div>\n                  <p>{EAY_TOOLTIP_TEXT}</p>\n                  <MathJax className=\"mt-4\">{EAY_TOOLTIP_FORMULA}</MathJax>\n                </div>\n              }\n            >\n              <InfoIcon className=\"h-full\" />\n            </Tooltip>\n          </div>\n        ),\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <div>\n            {row.original.eay < 0\n              ? 'N/A'\n              : `${formatWithCommas(row.original.eay * 100)}%`}\n          </div>\n        ),\n      }),\n      columnHelper.accessor('performance', {\n        id: 'performance',\n        header: 'Performance',\n        sortDescFirst: true,\n        cell: ({ row }) =>\n          row.original.performance < 0 ? (\n            'N/A'\n          ) : (\n            <Tooltip\n              message={\n                <div>\n                  <div>Passed Epoch Count: {row.original.passedEpochCount}</div>\n                  <div className=\"mt-1\">\n                    Total Epoch Participation Count:{' '}\n                    {row.original.totalEpochCount}\n                  </div>\n                </div>\n              }\n            >\n              {`${(row.original.performance * 100).toFixed(2)}%`}\n            </Tooltip>\n          ),\n      }),\n\n      columnHelper.accessor('streak', {\n        id: 'streak',\n        header: 'Streak',\n        sortDescFirst: true,\n        cell: ({ row }) => <Streak streak={row.original.streak} />,\n      }),\n\n      columnHelper.display({\n        id: 'action',\n        header: '',\n        cell: ({ row }) => {\n          const ownGateway = row.original.owner === walletAddress?.toString();\n          const btn = (\n            <Button\n              buttonType={ButtonType.PRIMARY}\n              active={true}\n              title=\"Manage Stake\"\n              text=\"Stake\"\n              onClick={(e) => {\n                e.stopPropagation();\n                if (walletAddress) {\n                  if (!ownGateway) {\n                    setStakingModalWalletAddress(\n                      row.getValue('owner') as string,\n                    );\n                  }\n                } else {\n                  setIsConnectModalOpen(true);\n                }\n              }}\n            />\n          );\n          return (\n            <div className=\"pr-6\">\n              {ownGateway ? (\n                <Tooltip message=\"Delegate staking is not supported for gateways you operate. Please use operator staking on your gateway details page.\">\n                  <div className=\"pointer-events-none opacity-30\">{btn}</div>\n                </Tooltip>\n              ) : (\n                btn\n              )}\n            </div>\n          );\n        },\n      }),\n    ],\n    [\n      ticker,\n      walletAddress,\n      setStakingModalWalletAddress,\n      setIsConnectModalOpen,\n    ],\n  );\n\n  return (\n    <div>\n      <div className=\"flex w-full items-center rounded-t-xl border border-grey-600 bg-containerL3 py-2 pl-6 pr-3\">\n        <div className=\"grow text-sm text-mid\">Delegate Stake</div>\n        <ColumnSelector tableId=\"delegate-stake\" columns={columns} />\n      </div>\n      <TableView\n        columns={columns}\n        data={stakeableGateways}\n        isLoading={isLoading}\n        noDataFoundText=\"No stakeable gateways found.\"\n        defaultSortingState={{ id: 'totalStake', desc: true }}\n        onRowClick={(row) => {\n          navigate(`/gateways/${row.owner}`);\n        }}\n        tableId=\"delegate-stake\"\n      />\n      {stakingModalWalletAddress && (\n        <StakingModal\n          open={!!stakingModalWalletAddress}\n          onClose={() => setStakingModalWalletAddress(undefined)}\n          ownerWallet={stakingModalWalletAddress}\n        />\n      )}\n\n      {isConnectModalOpen && (\n        <ConnectModal onClose={() => setIsConnectModalOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default DelegateStake;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport { Label, Radio, RadioGroup } from '@headlessui/react';\nimport useBalances from '@src/hooks/useBalances';\nimport useDelegateStakes from '@src/hooks/useDelegateStakes';\nimport useGateway from '@src/hooks/useGateway';\nimport { useGlobalState } from '@src/store';\nimport { WithdrawalType } from '@src/types';\nimport { formatAddress, formatWithCommas } from '@src/utils';\nimport { Circle, CircleCheck } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport LabelValueRow from '../LabelValueRow';\nimport ErrorMessageIcon from '../forms/ErrorMessageIcon';\nimport { validateWithdrawAmount } from '../forms/validation';\nimport BaseModal from './BaseModal';\nimport ReviewWithdrawalModal from './ReviewWithdrawalModal';\n\nconst StakeWithdrawalModal = ({\n  onClose,\n  ownerWallet,\n}: {\n  open: boolean;\n  onClose: () => void;\n  ownerWallet: string;\n}) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const { data: balances } = useBalances(walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [currentStake, setCurrentStake] = useState<number>(0);\n  const [amountToWithdraw, setAmountToWithdraw] = useState<string>('');\n  const [withdrawalType, setWithdrawalType] =\n    useState<WithdrawalType>('standard');\n\n  const [showReviewWithdrawalModal, setShowReviewWithdrawalModal] =\n    useState(false);\n\n  const { data: gateway } = useGateway({\n    ownerWalletAddress: ownerWallet,\n  });\n\n  const { data: delegateStakes } = useDelegateStakes(walletAddress?.toString());\n\n  useEffect(() => {\n    if (!gateway || !delegateStakes) {\n      return;\n    }\n    const stake = delegateStakes.stakes.find(\n      (stake) => stake.gatewayAddress === gateway.gatewayAddress,\n    )?.balance;\n    setCurrentStake(new mARIOToken(stake ?? 0).toARIO().valueOf());\n  }, [delegateStakes, gateway]);\n\n  const allowDelegatedStaking =\n    gateway?.settings.allowDelegatedStaking ?? false;\n\n  const minDelegatedStake = gateway\n    ? new mARIOToken(gateway?.settings.minDelegatedStake).toARIO().valueOf()\n    : 10;\n  const minRequiredStakeToAdd = currentStake > 0 ? 1 : minDelegatedStake;\n\n  const withdrawalFee =\n    withdrawalType === 'expedited' ? 0.5 * parseFloat(amountToWithdraw) : 0;\n  const returningAmount = isNaN(parseFloat(amountToWithdraw))\n    ? '-'\n    : +(\n        isNaN(withdrawalFee)\n          ? parseFloat(amountToWithdraw)\n          : parseFloat(amountToWithdraw) - withdrawalFee\n      ).toFixed(4);\n\n  const validators = {\n    withdrawAmount: validateWithdrawAmount(\n      'Withdraw Amount',\n      ticker,\n      currentStake,\n      minDelegatedStake,\n    ),\n  };\n\n  const isFormValid = () => {\n    if (!gateway) {\n      return false;\n    }\n    return validators.withdrawAmount(amountToWithdraw) == undefined;\n  };\n\n  const parsedWithdrawing = parseFloat(\n    amountToWithdraw.length === 0 ? '0' : amountToWithdraw,\n  );\n  const remainingWithdrawalBalance = currentStake - parsedWithdrawing;\n\n  const setMaxAmount = () => {\n    setAmountToWithdraw(currentStake + '');\n  };\n\n  const disableInput = !gateway || currentStake <= 0;\n\n  const errorMessages = {\n    withdrawAmount: validators.withdrawAmount(amountToWithdraw),\n    cannotStake:\n      (balances?.ario || 0) < minRequiredStakeToAdd\n        ? `Insufficient balance, at least ${minRequiredStakeToAdd} IO required.`\n        : !allowDelegatedStaking\n          ? 'Gateway does not allow delegated staking.'\n          : undefined,\n  };\n\n  return (\n    <BaseModal onClose={onClose} useDefaultPadding={false}>\n      <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n        <div className=\"border-b border-b-stroke-low\">\n          <div className=\"rounded-tr-xl border-b border-red-400 bg-grey-700 py-3 text-center\">\n            <span className={'text-gradient'}>Withdraw</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col p-8 pb-2\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(ownerWallet)}\n            />\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n          </div>\n\n          <div className=\"mt-8 flex items-center\">\n            <div className=\"text-left text-sm text-mid\">Amount:</div>\n            <div className=\"grow\"></div>\n            <div className=\"text-left text-xs text-low\">\n              {`Available to Withdraw: ${remainingWithdrawalBalance >= 0 ? formatWithCommas(remainingWithdrawalBalance) : '-'} ${ticker}`}\n            </div>\n          </div>\n          <div className=\"mt-3 flex h-[3.25rem] items-center overflow-hidden rounded-md border border-grey-800\">\n            <input\n              className={\n                'size-full grow  bg-grey-1000 px-6 py-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n              }\n              disabled={disableInput}\n              readOnly={disableInput}\n              type=\"text\"\n              placeholder={`Enter amount of ${ticker} to withdraw`}\n              value={amountToWithdraw}\n              onChange={(e) => {\n                const textValue = e.target.value;\n\n                if (textValue && isNaN(+e.target.value)) {\n                  return;\n                }\n\n                setAmountToWithdraw(textValue);\n              }}\n            />\n            {amountToWithdraw?.length > 0 && errorMessages.withdrawAmount && (\n              <ErrorMessageIcon\n                errorMessage={errorMessages.withdrawAmount}\n                tooltipPadding={'3'}\n              />\n            )}\n            <Button\n              className=\"mr-3 h-7\"\n              onClick={disableInput ? undefined : setMaxAmount}\n              buttonType={ButtonType.SECONDARY}\n              active={true}\n              title=\"Max\"\n              text=\"Max\"\n            />\n          </div>\n          <div className=\"mt-4 flex flex-col gap-2\">\n            <RadioGroup\n              className=\"my-2 flex flex-col gap-4 text-sm\"\n              value={withdrawalType}\n              onChange={(v) => setWithdrawalType(v)}\n            >\n              <Radio\n                value=\"standard\"\n                className=\"group flex w-full cursor-pointer rounded \n                  from-gradient-primary-start to-gradient-primary-end data-[checked]:bg-gradient-to-r\"\n              >\n                <div className=\"m-px flex size-full flex-col gap-1 rounded  bg-containerL3 px-4 py-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Circle className=\"visible size-4 group-data-[checked]:hidden\" />\n                    <CircleCheck className=\"hidden size-4 group-data-[checked]:block\" />\n                    <Label>Standard Withdrawal</Label>\n                  </div>\n                  <p className=\"pl-6 text-left text-xs text-mid\">\n                    90 day withdrawal period with no fees.\n                  </p>\n                </div>\n              </Radio>\n\n              <Radio\n                value=\"expedited\"\n                className=\"group flex w-full cursor-pointer rounded \n                  from-gradient-primary-start to-gradient-primary-end data-[checked]:bg-gradient-to-r\"\n              >\n                <div className=\"m-px flex size-full flex-col gap-1 rounded  bg-containerL3 px-4 py-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Circle className=\"visible size-4 group-data-[checked]:hidden\" />\n                    <CircleCheck className=\"hidden size-4 group-data-[checked]:block\" />\n                    <Label>Expedited Withdrawal</Label>\n                  </div>\n                  <p className=\"pl-6 text-left text-xs text-mid\">\n                    Instant withdrawal with 50% fee.\n                  </p>\n                </div>\n              </Radio>\n            </RadioGroup>\n          </div>\n        </div>\n        <div className=\"flex size-full flex-col gap-2 bg-containerL0 px-8 pb-8 pt-4\">\n          {withdrawalType == 'expedited' && (\n            <>\n              <LabelValueRow\n                className=\"first:text-mid last:text-mid\"\n                label=\"Fee:\"\n                value={`${isNaN(withdrawalFee) ? '-' : +withdrawalFee.toFixed(4)} ${ticker}`}\n              />\n              <LabelValueRow\n                className=\"first:text-mid last:text-mid\"\n                label=\"Returning Amount:\"\n                value={`${returningAmount} ${ticker}`}\n              />\n            </>\n          )}\n\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${\n                isFormValid()\n                  ? formatWithCommas(\n                      currentStake - parseFloat(amountToWithdraw),\n                    )\n                  : '-'\n              } ${ticker}`}\n            />\n          </div>\n          <div\n            className={\n              isFormValid() ? undefined : 'pointer-events-none opacity-30'\n            }\n          >\n            <Button\n              className=\"mt-4 h-[3.25rem] w-full\"\n              onClick={() => {\n                setShowReviewWithdrawalModal(true);\n              }}\n              buttonType={ButtonType.PRIMARY}\n              title=\"Review\"\n              text=\"Review\"\n            />\n          </div>\n        </div>\n        {showReviewWithdrawalModal && gateway && walletAddress && (\n          <ReviewWithdrawalModal\n            amountToWithdraw={parseFloat(amountToWithdraw)}\n            withdrawalType={withdrawalType}\n            gateway={gateway}\n            onClose={() => setShowReviewWithdrawalModal(false)}\n            onSuccess={() => onClose()}\n            ticker={ticker}\n            walletAddress={walletAddress}\n            withdrawalFee={withdrawalFee}\n            returningAmount={returningAmount}\n          />\n        )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default StakeWithdrawalModal;\n","import { AoGateway, mARIOToken } from '@ar.io/sdk/web';\nimport { WRITE_OPTIONS, log } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\nimport WithdrawWarning from './WithdrawWarning';\n\nconst WithdrawAllModal = ({\n  onClose,\n  activeStakes,\n}: {\n  onClose: () => void;\n  activeStakes: { owner: string; delegatedStake: number; gateway: AoGateway }[];\n}) => {\n  const queryClient = useQueryClient();\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const sorted = activeStakes.sort(\n    (a, b) => b.delegatedStake - a.delegatedStake,\n  );\n\n  const withDelegatedStake = sorted.filter((stake) => stake.delegatedStake > 0);\n\n  const totalWithdrawalMIO = activeStakes.reduce(\n    (acc, stake) => acc + stake.delegatedStake,\n    0,\n  );\n\n  const processWithdrawAll = async () => {\n    if (walletAddress && arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        for (const stake of withDelegatedStake) {\n          if (stake.delegatedStake > 0) {\n            const { id: txID } = await arIOWriteableSDK.decreaseDelegateStake(\n              {\n                target: stake.owner,\n                decreaseQty: stake.delegatedStake, // read and write value both in mIO\n              },\n              WRITE_OPTIONS,\n            );\n\n            log.info(`Decrease Delegate Stake txID: ${txID}`);\n          }\n        }\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal onClose={onClose} useDefaultPadding={false}>\n        <div className=\"w-[calc(100vw-2rem)] text-left lg:w-[28.4375rem]\">\n          <div className=\"px-8  pb-4 pt-6\">\n            <div className=\"text-lg text-high\">Withdraw All</div>\n            <div className=\"flex pt-2 text-xs text-low\">\n              Withdraw all delegated stakes.\n            </div>\n          </div>\n\n          <div className=\"border-y border-grey-800 p-8\">\n            <table className=\"mb-8 w-full table-auto\">\n              {withDelegatedStake.map((stake, index) => (\n                <tr key={index} className=\"text-sm\">\n                  <td className=\"py-2 text-low \">\n                    {stake.gateway.settings.label}\n                  </td>\n                  <td className=\"py-2\">\n                    <a\n                      className=\"text-gradient\"\n                      href={`https://${stake.gateway.settings.fqdn}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      {stake.gateway.settings.fqdn}\n                    </a>\n                  </td>\n                  <td className=\"py-2 text-right text-mid \">\n                    {new mARIOToken(stake.delegatedStake).toARIO().valueOf()}{' '}\n                    {ticker}\n                  </td>\n                </tr>\n              ))}\n            </table>\n\n            <WithdrawWarning />\n          </div>\n\n          <div className=\"bg-containerL0 px-8 pb-8 pt-6\">\n            <div className=\"mt-1 flex text-sm text-mid\">\n              <div className=\"grow\">Total Withdrawal:</div>\n              <div>\n                {new mARIOToken(totalWithdrawalMIO).toARIO().valueOf()} {ticker}\n              </div>\n            </div>\n\n            <div className=\"mt-6 flex grow justify-center\">\n              <Button\n                onClick={processWithdrawAll}\n                buttonType={ButtonType.PRIMARY}\n                title=\"Withdraw\"\n                text={<div className=\"py-2\">Withdraw</div>}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n          }}\n          title=\"Congratulations\"\n          bodyText=\"You have successfully withdrawn all stakes.\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default WithdrawAllModal;\n","import { AoGatewayWithAddress, AoVaultData, mARIOToken } from '@ar.io/sdk/web';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport AddressCell from '@src/components/AddressCell';\nimport Button, { ButtonType } from '@src/components/Button';\nimport ColumnSelector from '@src/components/ColumnSelector';\nimport CopyButton from '@src/components/CopyButton';\nimport Dropdown from '@src/components/Dropdown';\nimport Streak from '@src/components/Streak';\nimport TableView from '@src/components/TableView';\nimport Tooltip from '@src/components/Tooltip';\nimport { InfoIcon, ThreeDotsIcon } from '@src/components/icons';\nimport CancelWithdrawalModal from '@src/components/modals/CancelWithdrawalModal';\nimport InstantWithdrawalModal from '@src/components/modals/InstantWithdrawalModal';\nimport RedelegateModal, {\n  RedelegateModalProps,\n} from '@src/components/modals/RedelegateModal';\nimport StakeWithdrawalModal from '@src/components/modals/StakeWithdrawalModal';\nimport StakingModal from '@src/components/modals/StakingModal';\nimport WithdrawAllModal from '@src/components/modals/WithdrawAllModal';\nimport { EAY_TOOLTIP_FORMULA, EAY_TOOLTIP_TEXT } from '@src/constants';\nimport useDelegateStakes from '@src/hooks/useDelegateStakes';\nimport useGateways from '@src/hooks/useGateways';\nimport useProtocolBalance from '@src/hooks/useProtocolBalance';\nimport { useGlobalState } from '@src/store';\nimport { formatWithCommas } from '@src/utils';\nimport { calculateGatewayRewards } from '@src/utils/rewards';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { MathJax } from 'better-react-mathjax';\nimport dayjs from 'dayjs';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ninterface ActiveStakesTableData {\n  owner: string;\n  delegatedStake: number;\n  gateway: AoGatewayWithAddress;\n  pendingWithdrawals: number;\n  streak: number;\n  eay: number;\n}\n\ninterface PendingWithdrawalsTableData {\n  owner: string;\n  gateway: AoGatewayWithAddress;\n  withdrawal: AoVaultData;\n  withdrawalId: string;\n}\n\ntype TableMode = 'activeStakes' | 'pendingWithdrawals';\n\nconst columnHelper = createColumnHelper<ActiveStakesTableData>();\nconst columnHelperWithdrawals =\n  createColumnHelper<PendingWithdrawalsTableData>();\n\nconst MyStakesTable = () => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const { isFetching, data: gateways } = useGateways();\n  const [activeStakes, setActiveStakes] =\n    useState<Array<ActiveStakesTableData>>();\n  const [pendingWithdrawals, setPendingWithdrawals] =\n    useState<Array<PendingWithdrawalsTableData>>();\n\n  const [tableMode, setTableMode] = useState<TableMode>('activeStakes');\n\n  const [showWithdrawAllModal, setShowWithdrawAllModal] = useState(false);\n  const [stakingModalWalletAddress, setStakingModalWalletAddress] =\n    useState<string>();\n  const [withdrawalModalWalletAddress, setWithdrawalModalWalletAddress] =\n    useState<string>();\n  const [showRedelegateModal, setShowRedelegateModal] =\n    useState<RedelegateModalProps>();\n\n  const [confirmCancelWithdrawal, setConfirmCancelWithdrawal] = useState<{\n    gatewayAddress: string;\n    vaultId: string;\n  }>();\n\n  const [confirmInstantWithdrawal, setConfirmInstantWithdrawal] = useState<{\n    gatewayAddress: string;\n    gateway: AoGatewayWithAddress;\n    vault: AoVaultData;\n    vaultId: string;\n  }>();\n\n  const navigate = useNavigate();\n\n  const { data: delegateStakes } = useDelegateStakes(walletAddress?.toString());\n\n  const { data: protocolBalance } = useProtocolBalance();\n\n  useEffect(() => {\n    const activeStakes: Array<ActiveStakesTableData> | undefined = isFetching\n      ? undefined\n      : !delegateStakes || !gateways || !protocolBalance\n        ? []\n        : delegateStakes.stakes\n            .filter((stake) => stake.balance > 0)\n            .map((stake) => {\n              const gateway = gateways[stake.gatewayAddress];\n              return {\n                owner: stake.gatewayAddress,\n                delegatedStake: stake.balance,\n                gateway: { ...gateway, gatewayAddress: stake.gatewayAddress },\n                pendingWithdrawals: delegateStakes.withdrawals.filter(\n                  (w) => w.gatewayAddress == stake.gatewayAddress,\n                ).length,\n                streak:\n                  gateway.status == 'leaving'\n                    ? Number.NEGATIVE_INFINITY\n                    : gateway.stats.failedConsecutiveEpochs > 0\n                      ? -gateway.stats.failedConsecutiveEpochs\n                      : gateway.stats.passedConsecutiveEpochs,\n                eay: calculateGatewayRewards(\n                  new mARIOToken(protocolBalance).toARIO(),\n                  Object.values(gateways).filter((g) => g.status == 'joined')\n                    .length,\n                  gateway,\n                ).EAY,\n              };\n            });\n\n    const pendingWithdrawals: Array<PendingWithdrawalsTableData> | undefined =\n      isFetching\n        ? undefined\n        : !delegateStakes || !gateways\n          ? []\n          : delegateStakes.withdrawals.map((withdrawal) => {\n              const gateway = gateways[withdrawal.gatewayAddress];\n\n              return {\n                owner: withdrawal.gatewayAddress,\n                gateway: {\n                  ...gateway,\n                  gatewayAddress: withdrawal.gatewayAddress,\n                },\n                withdrawal,\n                withdrawalId: withdrawal.vaultId,\n              };\n            });\n\n    setActiveStakes(activeStakes);\n    setPendingWithdrawals(pendingWithdrawals);\n  }, [delegateStakes, gateways, isFetching, protocolBalance]);\n\n  // Define columns for the active stakes table\n  const activeStakesColumns: ColumnDef<ActiveStakesTableData, any>[] = useMemo(\n    () => [\n      columnHelper.accessor('gateway.settings.label', {\n        id: 'label',\n        header: 'Label',\n        sortDescFirst: false,\n      }),\n      columnHelper.accessor('gateway.settings.fqdn', {\n        id: 'domain',\n        header: 'Domain',\n        sortDescFirst: false,\n        cell: ({ row }) => (\n          <div className=\"flex items-center gap-2\">\n            <a\n              href={`https://${row.getValue('domain')}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n              className=\"text-gradient\"\n            >\n              {row.getValue('domain')}\n            </a>\n            <CopyButton textToCopy={row.getValue('domain')} />\n          </div>\n        ),\n      }),\n      columnHelper.accessor('owner', {\n        id: 'owner',\n        header: 'Address',\n        sortDescFirst: false,\n        cell: ({ row }) => <AddressCell address={row.getValue('owner')} />,\n      }),\n      columnHelper.accessor('delegatedStake', {\n        id: 'delegatedStake',\n        header: `Current Stake (${ticker})`,\n        sortDescFirst: true,\n        cell: ({ row }) => {\n          return `${new mARIOToken(row.original.delegatedStake).toARIO().valueOf()}`;\n        },\n      }),\n      columnHelper.accessor('eay', {\n        id: 'eay',\n        meta: {\n          displayName: 'Delegate EAY',\n        },\n        header: () => (\n          <div className=\"flex gap-1\">\n            Delegate EAY\n            <Tooltip\n              message={\n                <div>\n                  <p>{EAY_TOOLTIP_TEXT}</p>\n                  <MathJax className=\"mt-4\">{EAY_TOOLTIP_FORMULA}</MathJax>\n                </div>\n              }\n            >\n              <InfoIcon className=\"h-full\" />\n            </Tooltip>\n          </div>\n        ),\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <div>\n            {row.original.eay < 0\n              ? 'N/A'\n              : `${formatWithCommas(row.original.eay * 100)}%`}\n          </div>\n        ),\n      }),\n      columnHelper.accessor('streak', {\n        id: 'streak',\n        header: 'Streak',\n        sortDescFirst: true,\n        cell: ({ row }) => <Streak streak={row.original.streak} />,\n      }),\n      columnHelper.accessor('pendingWithdrawals', {\n        id: 'pendingWithdrawals',\n        header: 'Pending Withdrawals',\n        sortDescFirst: true,\n        cell: ({ row }) => (\n          <div\n            className={\n              row.original.pendingWithdrawals > 0 ? 'text-high' : 'text-low'\n            }\n          >\n            {`${row.original.pendingWithdrawals}`}\n          </div>\n        ),\n      }),\n      columnHelper.display({\n        id: 'action',\n        header: '',\n        cell: ({ row }) => {\n          return (\n            <div className=\"flex w-full justify-end pr-6\">\n              <DropdownMenu.Root modal={false}>\n                <DropdownMenu.Trigger\n                  asChild\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"cursor-pointer rounded-md bg-gradient-to-b from-btn-primary-outer-gradient-start to-btn-primary-outer-gradient-end  p-px\">\n                    <div className=\"inline-flex size-full items-center justify-start gap-[0.6875rem] rounded-md bg-btn-primary-base bg-gradient-to-b from-btn-primary-gradient-start to-btn-primary-gradient-end px-[0.3125rem] py-[.3125rem] shadow-inner\">\n                      <ThreeDotsIcon className=\"size-4\" />\n                    </div>\n                  </div>\n                </DropdownMenu.Trigger>\n                <DropdownMenu.Content className=\"z-50 rounded border border-grey-500 bg-containerL0 text-sm\">\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setStakingModalWalletAddress(row.original.owner);\n                    }}\n                  >\n                    Add Stake\n                  </DropdownMenu.Item>\n\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setWithdrawalModalWalletAddress(row.original.owner);\n                    }}\n                  >\n                    Withdraw Stake\n                  </DropdownMenu.Item>\n\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none  px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setShowRedelegateModal({\n                        sourceGateway: row.original.gateway,\n                        onClose: () => setShowRedelegateModal(undefined),\n                        maxRedelegationStake: new mARIOToken(\n                          row.original.delegatedStake,\n                        ).toARIO(),\n                      });\n                    }}\n                  >\n                    Redelegate\n                  </DropdownMenu.Item>\n                </DropdownMenu.Content>\n              </DropdownMenu.Root>\n            </div>\n          );\n        },\n      }),\n    ],\n    [\n      ticker,\n      setStakingModalWalletAddress,\n      setWithdrawalModalWalletAddress,\n      setShowRedelegateModal,\n    ],\n  );\n\n  const hasDelegatedStake =\n    activeStakes?.some((v) => v.delegatedStake > 0) ?? false;\n\n  // Define columns for the pending withdrawals table\n  const pendingWithdrawalsColumns: ColumnDef<\n    PendingWithdrawalsTableData,\n    any\n  >[] = useMemo(\n    () => [\n      columnHelperWithdrawals.accessor('gateway.settings.label', {\n        id: 'label',\n        header: 'Label',\n        sortDescFirst: false,\n      }),\n      columnHelperWithdrawals.accessor('gateway.settings.fqdn', {\n        id: 'domain',\n        header: 'Domain',\n        sortDescFirst: false,\n        cell: ({ row }) => (\n          <div className=\"text-gradient\">\n            <a\n              href={`https://${row.getValue('domain')}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {row.getValue('domain')}\n            </a>{' '}\n          </div>\n        ),\n      }),\n      columnHelperWithdrawals.accessor('owner', {\n        id: 'owner',\n        header: 'Address',\n        sortDescFirst: false,\n        cell: ({ row }) => <AddressCell address={row.getValue('owner')} />,\n      }),\n      columnHelperWithdrawals.accessor('withdrawal.balance', {\n        id: 'withdrawal',\n        header: `Stake Withdrawing (${ticker})`,\n        sortDescFirst: true,\n        cell: ({ row }) => {\n          return `${new mARIOToken(row.original.withdrawal.balance).toARIO().valueOf()}`;\n        },\n      }),\n      columnHelperWithdrawals.accessor((row) => row.withdrawal.endTimestamp, {\n        id: 'endDate',\n        header: `Date Returning`,\n        sortDescFirst: true,\n        cell: ({ row }) => {\n          return `${dayjs(new Date(row.original.withdrawal.endTimestamp)).format('YYYY-MM-DD')}`;\n        },\n      }),\n      columnHelperWithdrawals.display({\n        id: 'actions',\n        cell: ({ row }) => {\n          return (\n            <div className=\"flex w-full justify-end pr-6\">\n              <DropdownMenu.Root modal={false}>\n                <DropdownMenu.Trigger\n                  asChild\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"cursor-pointer rounded-md bg-gradient-to-b from-btn-primary-outer-gradient-start to-btn-primary-outer-gradient-end  p-px\">\n                    <div className=\"inline-flex size-full items-center justify-start gap-[0.6875rem] rounded-md bg-btn-primary-base bg-gradient-to-b from-btn-primary-gradient-start to-btn-primary-gradient-end px-[0.3125rem] py-[.3125rem] shadow-inner\">\n                      <ThreeDotsIcon className=\"size-4\" />\n                    </div>\n                  </div>\n                </DropdownMenu.Trigger>\n                <DropdownMenu.Content className=\"z-50 rounded border border-grey-500 bg-containerL0 text-sm\">\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setConfirmInstantWithdrawal({\n                        gateway: row.original.gateway,\n                        gatewayAddress: row.original.owner,\n                        vault: row.original.withdrawal,\n                        vaultId: row.original.withdrawalId,\n                      });\n                    }}\n                  >\n                    Expedite Withdrawal\n                  </DropdownMenu.Item>\n\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setConfirmCancelWithdrawal({\n                        gatewayAddress: row.original.owner,\n                        vaultId: row.original.withdrawalId,\n                      });\n                    }}\n                  >\n                    Cancel Withdrawal\n                  </DropdownMenu.Item>\n\n                  <DropdownMenu.Item\n                    className=\"cursor-pointer select-none  px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setShowRedelegateModal({\n                        sourceGateway: row.original.gateway,\n                        onClose: () => setShowRedelegateModal(undefined),\n                        maxRedelegationStake: new mARIOToken(\n                          row.original.withdrawal.balance,\n                        ).toARIO(),\n                        vaultId: row.original.withdrawalId,\n                      });\n                    }}\n                  >\n                    Redelegate\n                  </DropdownMenu.Item>\n                </DropdownMenu.Content>\n              </DropdownMenu.Root>\n            </div>\n          );\n        },\n      }),\n    ],\n    [\n      ticker,\n      setConfirmInstantWithdrawal,\n      setConfirmCancelWithdrawal,\n      setShowRedelegateModal,\n    ],\n  );\n\n  return (\n    <div>\n      <div\n        className={`flex w-full items-center gap-4 rounded-t-xl border border-grey-600 bg-containerL3 pl-6 pr-3 ${tableMode == 'activeStakes' ? 'py-2' : 'py-[0.9375rem]'} `}\n      >\n        <div className=\"grow text-sm text-mid\">\n          <Dropdown\n            options={[\n              { label: 'Active Stakes', value: 'activeStakes' },\n              { label: 'Pending Withdrawals', value: 'pendingWithdrawals' },\n            ]}\n            onChange={(e) => {\n              setTableMode(e.target.value as TableMode);\n            }}\n            value={tableMode}\n            tightPadding={true}\n          />\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {tableMode == 'activeStakes' && hasDelegatedStake && (\n            <Button\n              buttonType={ButtonType.SECONDARY}\n              className=\"*:text-gradient-red h-[1.875rem]\"\n              active={true}\n              title=\"Withdraw All\"\n              text=\"Withdraw All\"\n              onClick={() => setShowWithdrawAllModal(true)}\n            />\n          )}\n\n          <ColumnSelector\n            tableId={\n              tableMode === 'activeStakes'\n                ? 'my-stakes-active'\n                : 'my-stakes-withdrawals'\n            }\n            columns={\n              tableMode === 'activeStakes'\n                ? activeStakesColumns\n                : (pendingWithdrawalsColumns as any)\n            }\n          />\n        </div>\n      </div>\n      {tableMode === 'activeStakes' ? (\n        <TableView\n          key=\"activeStakesTable\"\n          columns={activeStakesColumns}\n          data={activeStakes || []}\n          isLoading={isFetching || activeStakes === undefined}\n          noDataFoundText=\"No active stakes found.\"\n          defaultSortingState={{\n            id: 'delegatedStake',\n            desc: true,\n          }}\n          onRowClick={(row) => {\n            navigate(`/gateways/${row.owner}`);\n          }}\n          tableId=\"my-stakes-active\"\n        />\n      ) : (\n        <TableView\n          key=\"pendingWithdrawalsTable\"\n          columns={pendingWithdrawalsColumns}\n          data={pendingWithdrawals || []}\n          isLoading={isFetching || pendingWithdrawals === undefined}\n          noDataFoundText=\"No pending withdrawals found.\"\n          defaultSortingState={{\n            id: 'label',\n            desc: true,\n          }}\n          onRowClick={(row) => {\n            navigate(`/gateways/${row.owner}`);\n          }}\n          tableId=\"my-stakes-withdrawals\"\n        />\n      )}\n      {showWithdrawAllModal && activeStakes !== undefined && (\n        <WithdrawAllModal\n          activeStakes={activeStakes}\n          onClose={() => setShowWithdrawAllModal(false)}\n        />\n      )}\n      {stakingModalWalletAddress && (\n        <StakingModal\n          open={!!stakingModalWalletAddress}\n          onClose={() => {\n            setStakingModalWalletAddress(undefined);\n          }}\n          ownerWallet={stakingModalWalletAddress}\n        />\n      )}\n      {withdrawalModalWalletAddress && (\n        <StakeWithdrawalModal\n          open={!!withdrawalModalWalletAddress}\n          onClose={() => {\n            setWithdrawalModalWalletAddress(undefined);\n          }}\n          ownerWallet={withdrawalModalWalletAddress}\n        />\n      )}\n      {confirmCancelWithdrawal && (\n        <CancelWithdrawalModal\n          gatewayAddress={confirmCancelWithdrawal.gatewayAddress}\n          vaultId={confirmCancelWithdrawal.vaultId}\n          onClose={() => setConfirmCancelWithdrawal(undefined)}\n        />\n      )}\n      {confirmInstantWithdrawal && (\n        <InstantWithdrawalModal\n          gateway={confirmInstantWithdrawal.gateway}\n          gatewayAddress={confirmInstantWithdrawal.gatewayAddress}\n          vaultId={confirmInstantWithdrawal.vaultId}\n          vault={confirmInstantWithdrawal.vault}\n          onClose={() => setConfirmInstantWithdrawal(undefined)}\n        />\n      )}\n      {showRedelegateModal && <RedelegateModal {...showRedelegateModal} />}\n    </div>\n  );\n};\n\nexport default MyStakesTable;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport Placeholder from '@src/components/Placeholder';\nimport useBalances from '@src/hooks/useBalances';\nimport useDelegateStakes from '@src/hooks/useDelegateStakes';\nimport useEpochSettings from '@src/hooks/useEpochSettings';\nimport useRewardsEarned from '@src/hooks/useRewardsEarned';\nimport { useGlobalState } from '@src/store';\nimport { formatDate, formatWithCommas } from '@src/utils';\nimport { useEffect, useState } from 'react';\nimport DelegateStake from './DelegateStakeTable';\nimport MyStakesTable from './MyStakesTable';\n\nconst TopPanel = ({\n  title,\n  value,\n  ticker,\n  leftTitle,\n  leftValue,\n  rightTitle,\n  rightValue,\n  epochZeroStartTimestamp,\n  hasEpochZeroStarted = true,\n}: {\n  title: string;\n  value?: string;\n  ticker: string;\n  leftTitle?: string;\n  leftValue?: string;\n  rightTitle?: string;\n  rightValue?: string;\n  epochZeroStartTimestamp?: number;\n  hasEpochZeroStarted?: boolean;\n}) => {\n  return (\n    <div\n      className={`rounded-xl border border-grey-600 px-6 pb-5 pt-10 text-center`}\n    >\n      <div className=\"text-sm text-mid\">{title}</div>\n\n      {epochZeroStartTimestamp && !hasEpochZeroStarted ? (\n        <div className=\"mb-6 h-[2.6rem]\">\n          <div className=\"flex size-full items-center justify-center self-center text-center text-sm italic text-low\">\n            Staking rewards begin on{' '}\n            {formatDate(new Date(epochZeroStartTimestamp))}\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"mx-auto mb-1 mt-3 flex w-fit gap-2\">\n            <div className=\"text-[2.6rem] leading-none text-high\">\n              {value ?? (\n                <div className=\"h-[2.6rem]\">\n                  <Placeholder className=\"m-auto\" />\n                </div>\n              )}\n            </div>\n\n            <div className=\"text-sm text-high\">{ticker}</div>\n          </div>\n          <div className=\"flex justify-between align-bottom font-bold text-high\">\n            <div className=\"flex flex-col place-items-start text-left text-xs\">\n              <div className=\"grow\" />\n              {leftTitle &&\n                (leftValue !== undefined ? (\n                  <>\n                    <div className=\"text-mid\">{leftValue}</div>\n                    <div className=\"text-low\">{leftTitle}</div>\n                  </>\n                ) : (\n                  <Placeholder />\n                ))}\n            </div>\n            <div className=\"flex flex-col place-items-end text-right text-xs\">\n              <div className=\"grow\" />\n              {rightTitle &&\n                (rightValue !== undefined ? (\n                  <>\n                    <div className=\"text-mid\">{rightValue}</div>\n                    <div className=\"text-low\">{rightTitle}</div>\n                  </>\n                ) : (\n                  <Placeholder />\n                ))}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst ConnectedLandingPage = () => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n  const [amountStaking, setAmountStaking] = useState<number>();\n\n  const { data: balances } = useBalances(walletAddress);\n  const rewardsEarned = useRewardsEarned(walletAddress?.toString());\n  const { data: epochSettings } = useEpochSettings();\n\n  const { data: delegatedStakes } = useDelegateStakes(\n    walletAddress?.toString(),\n  );\n\n  useEffect(() => {\n    if (delegatedStakes) {\n      const staked = delegatedStakes.stakes.reduce((acc, stake) => {\n        return acc + stake.balance;\n      }, 0);\n\n      const withdrawing = delegatedStakes.withdrawals.reduce(\n        (acc, withdrawal) => {\n          return acc + withdrawal.balance;\n        },\n        0,\n      );\n      setAmountStaking(new mARIOToken(staked + withdrawing).toARIO().valueOf());\n    }\n  }, [delegatedStakes]);\n\n  const topPanels = [\n    {\n      title: 'Your Balance',\n      balance: balances ? formatWithCommas(balances.ario) : undefined,\n    },\n    {\n      title: 'Amount Staking + Pending Withdrawals',\n      balance:\n        amountStaking !== undefined\n          ? formatWithCommas(amountStaking)\n          : undefined,\n    },\n    {\n      title: 'Total Rewards Earned (Last 14 Epochs)',\n      balance:\n        rewardsEarned?.totalForPastAvailableEpochs !== undefined\n          ? formatWithCommas(rewardsEarned.totalForPastAvailableEpochs)\n          : undefined,\n      leftTitle: 'LAST EPOCH',\n      leftValue:\n        rewardsEarned?.previousEpoch !== undefined\n          ? `${formatWithCommas(rewardsEarned.previousEpoch)} ${ticker}`\n          : undefined,\n      epochZeroStartTimestamp: epochSettings?.epochZeroStartTimestamp,\n      hasEpochZeroStarted: epochSettings\n        ? epochSettings.hasEpochZeroStarted\n        : true,\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-6 pb-6\">\n      <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\n        {topPanels.map((panel, index) => (\n          <TopPanel\n            key={index}\n            title={panel.title}\n            value={panel.balance}\n            ticker={ticker}\n            leftTitle={panel.leftTitle}\n            leftValue={panel.leftValue}\n            epochZeroStartTimestamp={panel.epochZeroStartTimestamp}\n            hasEpochZeroStarted={panel.hasEpochZeroStarted}\n          />\n        ))}\n      </div>\n      <MyStakesTable />\n      <DelegateStake />\n    </div>\n  );\n};\nexport default ConnectedLandingPage;\n","import {\n  ObserversConnectIcon,\n  StakingLinesBGIcon,\n} from '@src/components/icons';\nimport ConnectModal from '@src/components/modals/ConnectModal';\nimport { useState } from 'react';\n\nconst Banner = () => {\n  const [loginOpen, setLoginOpen] = useState(false);\n\n  return (\n    <div>\n      <button\n        className=\"group relative flex h-[7.5rem] w-full justify-center overflow-hidden rounded-xl bg-grey-800\"\n        onClick={() => {\n          setLoginOpen(true);\n        }}\n      >\n        <StakingLinesBGIcon className=\"absolute top-[-5.625rem] h-[58.1875rem] w-[90rem]  opacity-80\" />\n        <div\n          className=\"invisible size-full rounded-xl\n       bg-gradient-to-r from-gradient-primary-start to-gradient-primary-end p-px group-hover:visible\"\n        >\n          <div className=\"size-full overflow-hidden rounded-xl bg-grey-800\"></div>\n        </div>\n        <div className=\"absolute top-0 z-10 flex size-full flex-col items-center justify-center bg-transparent py-6 align-middle\">\n          <div className=\"flex items-center gap-2\">\n            <ObserversConnectIcon className=\"size-4\" />\n            <div className=\"text-gradient\">\n              Connect your wallet to start staking\n            </div>{' '}\n          </div>\n\n          <div className=\"pt-2 text-sm text-low\">\n            By delegating stake to a gateway, you can participate in the\n            network&apos;s reward system.\n          </div>\n        </div>\n      </button>\n      {loginOpen && <ConnectModal onClose={() => setLoginOpen(false)} />}\n    </div>\n  );\n};\n\nexport default Banner;\n","import Banner from './Banner';\nimport DelegateStake from './DelegateStakeTable';\n\nconst NotConnectedLandingPage = () => {\n  return (\n    <div className=\"flex max-w-full flex-col gap-6 overflow-y-auto py-6 scrollbar\">\n      <Banner />\n      <DelegateStake />\n    </div>\n  );\n};\n\nexport default NotConnectedLandingPage;\n","import Header from '@src/components/Header';\nimport { useGlobalState } from '@src/store';\nimport ConnectedLandingPage from './ConnectedLandingPage';\nimport NotConnectedLandingPage from './NotConnectedLandingPage';\n\nconst Staking = () => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n\n  return (\n    <div className=\"flex h-full max-w-full flex-col\">\n      <div className=\"mb-6 shrink-0\">\n        <Header />\n      </div>\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full overflow-y-auto\">\n          <div className=\"pt-0\">\n            {walletAddress ? (\n              <ConnectedLandingPage />\n            ) : (\n              <NotConnectedLandingPage />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Staking;\n"],"names":["SvgStakingLinesBg","props","reactExports","useRewardsEarned","walletAddress","arIOReadSDK","useGlobalState","state","rewardsEarned","setRewardsEarned","epochs","useEpochs","sorted","a","b","previousEpoch","previousDistribution","previousEpochDistributed","EUe","previousEpochRewards","totalForPastAvailableEpochs","acc","epoch","distribution","distributed","RP","columnHelper$1","createColumnHelper","DelegateStake","ticker","isLoading","gateways","useGateways","stakeableGateways","setStakeableGateways","stakingModalWalletAddress","setStakingModalWalletAddress","isConnectModalOpen","setIsConnectModalOpen","protocolBalance","useProtocolBalance","navigate","useNavigate","stakeableGateways2","g","owner","gateway","passedEpochCount","totalEpochCount","calculateGatewayRewards","columns","row","jsxRuntimeExports","e","CopyButton","AddressCell","Tooltip","formatWithCommas","EAY_TOOLTIP_TEXT","MathJax","EAY_TOOLTIP_FORMULA","SvgInfoIcon","Streak","ownGateway","btn","Button","ButtonType","ColumnSelector","TableView","StakingModal","ConnectModal","StakeWithdrawalModal","onClose","ownerWallet","balances","useBalances","currentStake","setCurrentStake","amountToWithdraw","setAmountToWithdraw","withdrawalType","setWithdrawalType","showReviewWithdrawalModal","setShowReviewWithdrawalModal","useGateway","delegateStakes","useDelegateStakes","stake","_a","stake2","allowDelegatedStaking","minDelegatedStake","minRequiredStakeToAdd","withdrawalFee","returningAmount","validators","validateWithdrawAmount","isFormValid","parsedWithdrawing","remainingWithdrawalBalance","setMaxAmount","disableInput","errorMessages","BaseModal","LabelValueRow","formatAddress","textValue","ErrorMessageIcon","Rt","v","Ve","Circle","CircleCheck","Q","ReviewWithdrawalModal","WithdrawAllModal","activeStakes","queryClient","useQueryClient","showBlockingMessageModal","setShowBlockingMessageModal","showSuccessModal","setShowSuccessModal","arIOWriteableSDK","withDelegatedStake","totalWithdrawalMIO","processWithdrawAll","txID","WRITE_OPTIONS","log","showErrorToast","index","WithdrawWarning","BlockingMessageModal","SuccessModal","columnHelper","columnHelperWithdrawals","MyStakesTable","isFetching","setActiveStakes","pendingWithdrawals","setPendingWithdrawals","tableMode","setTableMode","showWithdrawAllModal","setShowWithdrawAllModal","withdrawalModalWalletAddress","setWithdrawalModalWalletAddress","showRedelegateModal","setShowRedelegateModal","confirmCancelWithdrawal","setConfirmCancelWithdrawal","confirmInstantWithdrawal","setConfirmInstantWithdrawal","activeStakes2","w","pendingWithdrawals2","withdrawal","activeStakesColumns","Root2","Trigger","SvgThreeDotsIcon","Content2","Item2","hasDelegatedStake","pendingWithdrawalsColumns","dayjs","Dropdown","CancelWithdrawalModal","InstantWithdrawalModal","RedelegateModal","TopPanel","title","value","leftTitle","leftValue","rightTitle","rightValue","epochZeroStartTimestamp","hasEpochZeroStarted","formatDate","Placeholder","ConnectedLandingPage","amountStaking","setAmountStaking","epochSettings","useEpochSettings","delegatedStakes","staked","withdrawing","topPanels","panel","Banner","loginOpen","setLoginOpen","SvgObserversConnectIcon","NotConnectedLandingPage","Staking","Header"],"mappings":"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"}