{"version":3,"file":"index-DpH7ZIpC.js","sources":["../../src/components/icons/edit_icon.svg?react","../../src/components/icons/stats_arrow.svg?react","../../node_modules/lucide-react/dist/esm/icons/circle-check-big.js","../../node_modules/lucide-react/dist/esm/icons/circle-plus.js","../../node_modules/lucide-react/dist/esm/icons/circle-x.js","../../node_modules/lucide-react/dist/esm/icons/minus.js","../../node_modules/lucide-react/dist/esm/icons/triangle-alert.js","../../src/hooks/useObserverBalances.ts","../../src/hooks/useGatewayDelegates.ts","../../src/pages/Gateway/CollapsiblePanel.tsx","../../src/pages/Gateway/ActiveDelegates.tsx","../../src/pages/Gateway/GatewayHeader.tsx","../../src/components/modals/OperatorStakingModal.tsx","../../src/components/modals/OperatorWithdrawalModal.tsx","../../src/pages/Gateway/OperatorStake.tsx","../../src/hooks/useGatewayVaults.ts","../../src/pages/Gateway/PendingWIthdrawals.tsx","../../src/components/modals/LeaveNetworkModal.tsx","../../src/pages/Gateway/PropertyDisplayPanel.tsx","../../src/hooks/useObserverToGatewayMap.ts","../../src/pages/Gateway/SnitchRow.tsx","../../src/hooks/useGatewayArioInfo.ts","../../src/pages/Gateway/StatsBox.tsx","../../src/pages/Gateway/SoftwareDetails.tsx","../../src/hooks/useHealthCheck.ts","../../src/pages/Gateway/StatsPanel.tsx","../../src/pages/Gateway/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgEditIcon = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 12, height: 12, viewBox: \"0 0 12 12\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Frame\" }, /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector\", d: \"M6 10H10.5\", stroke: \"#A3A3AD\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_2\", d: \"M8.25 1.75011C8.44891 1.5512 8.7187 1.43945 9 1.43945C9.13929 1.43945 9.27721 1.46689 9.4059 1.52019C9.53458 1.57349 9.65151 1.65162 9.75 1.75011C9.84849 1.8486 9.92662 1.96553 9.97992 2.09422C10.0332 2.2229 10.0607 2.36083 10.0607 2.50011C10.0607 2.6394 10.0332 2.77733 9.97992 2.90601C9.92662 3.0347 9.84849 3.15162 9.75 3.25011L3.5 9.50011L1.5 10.0001L2 8.00011L8.25 1.75011Z\", stroke: \"#A3A3AD\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_3\", d: \"M7.5 2.5L9 4\", stroke: \"#A3A3AD\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })));\nexport default SvgEditIcon;\n","import * as React from \"react\";\nconst SvgStatsArrow = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 16, height: 16, viewBox: \"0 0 16 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Frame\" }, /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector\", d: \"M10 6.66797L13.3333 10.0013L10 13.3346\", stroke: \"#7F7F87\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_2\", d: \"M2.66797 2.66797V7.33464C2.66797 8.04188 2.94892 8.72016 3.44902 9.22025C3.94911 9.72035 4.62739 10.0013 5.33464 10.0013H13.3346\", stroke: \"#7F7F87\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })));\nexport default SvgStatsArrow;\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleCheckBig = createLucideIcon(\"CircleCheckBig\", [\n  [\"path\", { d: \"M21.801 10A10 10 0 1 1 17 3.335\", key: \"yps3ct\" }],\n  [\"path\", { d: \"m9 11 3 3L22 4\", key: \"1pflzl\" }]\n]);\n\nexport { CircleCheckBig as default };\n//# sourceMappingURL=circle-check-big.js.map\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CirclePlus = createLucideIcon(\"CirclePlus\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M8 12h8\", key: \"1wcyev\" }],\n  [\"path\", { d: \"M12 8v8\", key: \"napkw2\" }]\n]);\n\nexport { CirclePlus as default };\n//# sourceMappingURL=circle-plus.js.map\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleX = createLucideIcon(\"CircleX\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m15 9-6 6\", key: \"1uzhvr\" }],\n  [\"path\", { d: \"m9 9 6 6\", key: \"z0biqf\" }]\n]);\n\nexport { CircleX as default };\n//# sourceMappingURL=circle-x.js.map\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Minus = createLucideIcon(\"Minus\", [[\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }]]);\n\nexport { Minus as default };\n//# sourceMappingURL=minus.js.map\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst TriangleAlert = createLucideIcon(\"TriangleAlert\", [\n  [\n    \"path\",\n    {\n      d: \"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\",\n      key: \"wmoenq\"\n    }\n  ],\n  [\"path\", { d: \"M12 9v4\", key: \"juzpu7\" }],\n  [\"path\", { d: \"M12 17h.01\", key: \"p32p05\" }]\n]);\n\nexport { TriangleAlert as default };\n//# sourceMappingURL=triangle-alert.js.map\n","import { AR } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nexport type ObserverBalances = { ar: number; turboCredits: number };\n\nconst TURBO_API_URL = 'https://turbo.ardrive.io';\n\nconst useObserverBalances = (observerAddress?: string) => {\n  const arweave = useGlobalState((state) => state.arweave);\n  const blockHeight = useGlobalState((state) => state.blockHeight);\n\n  const res = useQuery<ObserverBalances>({\n    queryKey: ['observerBalances', observerAddress, blockHeight],\n    queryFn: async () => {\n      if (!observerAddress || !arweave) {\n        throw new Error(\n          'Observer address or arweave client is not initialized',\n        );\n      }\n\n      // Get AR balance\n      const winstonBalance = await arweave.wallets.getBalance(observerAddress);\n      const arBalance = +AR.winstonToAr(winstonBalance);\n\n      // Get Turbo credits balance\n      try {\n        const response = await fetch(\n          `${TURBO_API_URL}/v1/account/balance?address=${observerAddress}`,\n          {\n            method: 'GET',\n          },\n        );\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch Turbo balance: ${response.statusText}`,\n          );\n        }\n\n        const data = await response.json();\n        // Convert winston to AR for consistency\n        const turboCredits = +AR.winstonToAr(data.balance || '0');\n\n        return { ar: arBalance, turboCredits };\n      } catch (error) {\n        console.error('Error fetching Turbo balance:', error);\n        // Return 0 for turboCredits if there's an error\n        return { ar: arBalance, turboCredits: 0 };\n      }\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled:\n      !!observerAddress &&\n      !!arweave &&\n      typeof window !== 'undefined' &&\n      'arweaveWallet' in window,\n  });\n\n  return res;\n};\n\nexport default useObserverBalances;\n","import { AoGatewayDelegateWithAddress } from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst useGatewayDelegateStakes = (address?: string) => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const res = useQuery({\n    queryKey: ['gatewayDelegates', address, arIOReadSDK],\n    queryFn: async () => {\n      if (!address) {\n        throw new Error('Address is not set');\n      }\n\n      let cursor: string | undefined;\n\n      let results: Array<AoGatewayDelegateWithAddress> = [];\n\n      do {\n        const pageResult = await arIOReadSDK.getGatewayDelegates({\n          address,\n          cursor,\n          limit: 100,\n        });\n\n        results = results.concat(pageResult.items);\n\n        cursor = pageResult.nextCursor;\n      } while (cursor !== undefined);\n\n      return results.filter((delegate) => delegate.delegatedStake > 0);\n    },\n    staleTime: Infinity,\n    enabled: !!address && !!arIOReadSDK,\n  });\n\n  return res;\n};\n\nexport default useGatewayDelegateStakes;\n","import { CirclePlus, Minus } from 'lucide-react';\nimport { useState } from 'react';\n\ntype CollapsiblePanelProps = {\n  title: React.ReactNode;\n  titleRight?: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst CollapsiblePanel = ({\n  title,\n  children,\n  titleRight,\n}: CollapsiblePanelProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div\n        className={`flex items-center gap-2 border-b border-grey-500 bg-containerL3 px-6 py-4 ${isOpen ? 'rounded-t-xl' : 'rounded-xl'}`}\n      >\n        <div className=\"grow\">\n          {children ? (\n            <button className=\"flex gap-2\" onClick={() => setIsOpen(!isOpen)}>\n              {isOpen ? (\n                <Minus className=\"size-5\" />\n              ) : (\n                <CirclePlus className=\"size-5\" />\n              )}\n              <div>{title}</div>\n            </button>\n          ) : (\n            <div className=\"items-center whitespace-nowrap text-high\">\n              {title}\n            </div>\n          )}\n        </div>\n        {titleRight}\n      </div>\n\n      {isOpen && children}\n    </div>\n  );\n};\n\nexport default CollapsiblePanel;\n","import { AoGatewayWithAddress, mARIOToken } from '@ar.io/sdk/web';\nimport AddressCell from '@src/components/AddressCell';\nimport Placeholder from '@src/components/Placeholder';\nimport TableView from '@src/components/TableView';\nimport useGatewayDelegateStakes from '@src/hooks/useGatewayDelegates';\nimport { useGlobalState } from '@src/store';\nimport { formatPercentage, formatWithCommas } from '@src/utils';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { useEffect, useState } from 'react';\nimport CollapsiblePanel from './CollapsiblePanel';\n\ninterface TableData {\n  walletAddress: string;\n  primaryName?: string;\n  totalStake: number;\n  percentageOfTotalStake: number;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst ActiveDelegates = ({\n  gateway,\n}: {\n  gateway?: AoGatewayWithAddress | null;\n}) => {\n  const ticker = useGlobalState((state) => state.ticker);\n  const { isLoading, data: gatewayDelegateStakes } = useGatewayDelegateStakes(\n    gateway?.gatewayAddress,\n  );\n\n  const [tableData, setTableData] = useState<Array<TableData>>([]);\n\n  useEffect(() => {\n    if (gateway && gatewayDelegateStakes) {\n      const totalDelegatedStake = gateway.totalDelegatedStake;\n      const data = gatewayDelegateStakes.map((stake) => {\n        const totalStake = new mARIOToken(stake.delegatedStake)\n          .toARIO()\n          .valueOf();\n        const percentageOfTotalStake =\n          totalDelegatedStake > 0\n            ? stake.delegatedStake / totalDelegatedStake\n            : 0;\n        return {\n          walletAddress: stake.address,\n          totalStake,\n          percentageOfTotalStake,\n        };\n      });\n      setTableData(data);\n    }\n  }, [gatewayDelegateStakes, gateway]);\n\n  // Define columns for the table\n  const columns: ColumnDef<TableData, any>[] = [\n    columnHelper.accessor('walletAddress', {\n      id: 'walletAddress',\n      header: 'Wallet Address',\n      sortDescFirst: false,\n      cell: ({ row }) => <AddressCell address={row.original.walletAddress} />,\n    }),\n    columnHelper.accessor('totalStake', {\n      id: 'totalStake',\n      header: 'Total Stake',\n      sortDescFirst: false,\n      cell: ({ row }) =>\n        `${formatWithCommas(row.original.totalStake)} ${ticker}`,\n    }),\n    columnHelper.accessor('percentageOfTotalStake', {\n      id: 'percentageOfTotalStake',\n      header: 'Percentage of Total Delegated Stake',\n      sortDescFirst: false,\n      cell: ({ row }) => formatPercentage(row.original.percentageOfTotalStake),\n    }),\n  ];\n\n  return (\n    <CollapsiblePanel\n      title={\n        <div className=\"flex items-center gap-2\">\n          Active Delegates{' '}\n          {gatewayDelegateStakes && `(${gatewayDelegateStakes.length})`}\n          {!gatewayDelegateStakes && <Placeholder />}\n        </div>\n      }\n      titleRight={\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-high\">Total Delegated Stake:</div>\n          <div className=\"text-gradient\">\n            {gateway ? (\n              <div>\n                {formatWithCommas(\n                  new mARIOToken(gateway.totalDelegatedStake)\n                    .toARIO()\n                    .valueOf(),\n                )}{' '}\n                {ticker}\n              </div>\n            ) : (\n              <Placeholder />\n            )}\n          </div>\n        </div>\n      }\n    >\n      {gatewayDelegateStakes && gatewayDelegateStakes.length > 0 && (\n        <TableView\n          columns={columns}\n          data={tableData}\n          defaultSortingState={{ id: 'totalStake', desc: true }}\n          isLoading={isLoading}\n          noDataFoundText=\"Unable to fetch delegates.\"\n          shortTable={true}\n        />\n      )}\n    </CollapsiblePanel>\n  );\n};\n\nexport default ActiveDelegates;\n","import { AoGateway } from '@ar.io/sdk/web';\nimport Placeholder from '@src/components/Placeholder';\nimport Profile from '@src/components/Profile';\nimport { BinocularsIcon, GatewayIcon } from '@src/components/icons';\nimport { useGlobalState } from '@src/store';\nimport { ChevronRightIcon, NotebookText } from 'lucide-react';\nimport { useMemo } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nconst GatewayHeader = ({ gateway }: { gateway?: AoGateway | null }) => {\n  const params = useParams();\n\n  const ownerId = params?.ownerId;\n\n  const currentEpoch = useGlobalState((state) => state.currentEpoch);\n\n  const isObserverThisEpoch = useMemo(() => {\n    if (!gateway) return false;\n\n    return currentEpoch?.prescribedObservers.find(\n      (observer) => observer.observerAddress === gateway.observerAddress,\n    );\n  }, [gateway, currentEpoch]);\n\n  return (\n    <header className=\"flex-col text-clip rounded-xl leading-[1.4] lg:mt-6 lg:border dark:border-transparent-100-8 dark:bg-grey-1000 dark:text-grey-300\">\n      <div className=\"flex items-center gap-3 py-5 pl-8 text-sm lg:pl-6 lg:pr-4\">\n        <div className=\"text-mid\">\n          <Link to={'/gateways'}>Gateways</Link>\n        </div>\n        <ChevronRightIcon className=\"size-4 text-mid\" strokeWidth={1.5} />\n        {gateway ? (\n          <div className=\"text-low\">{gateway.settings.label}</div>\n        ) : (\n          <Placeholder />\n        )}\n        <div className=\"grow\" />\n        <div className=\"items-center\">\n          <Profile />\n        </div>\n      </div>\n      <div className=\"flex flex-col items-center gap-3 rounded-xl bg-grey-900 py-5 pl-6 lg:flex-row lg:rounded-t-none\">\n        {gateway ? (\n          <>\n            <div className=\"flex grow flex-row items-center gap-2\">\n              <GatewayIcon className=\"h-3 w-4\" />\n              <div className=\"text-high\">{gateway.settings.label}</div>\n              {isObserverThisEpoch && (\n                <div className=\"rounded-3xl border px-2 text-sm text-gradient-primary-end\">\n                  Observer\n                </div>\n              )}\n            </div>\n            <div className=\"flex\">\n              <div className=\"pr-6 text-sm text-mid\">\n                <Link\n                  className=\"flex gap-2 \"\n                  to={`/gateways/${ownerId}/reports`}\n                >\n                  <NotebookText className=\"size-4 text-mid\" strokeWidth={1.5} />\n                  Reports\n                </Link>\n              </div>\n              <div className=\"border-l border-grey-400 px-6 text-sm text-mid\">\n                <Link\n                  className=\"flex gap-2 \"\n                  to={`/gateways/${ownerId}/observe`}\n                >\n                  <BinocularsIcon className=\"size-4\" />\n                  Observe\n                </Link>\n              </div>\n            </div>\n          </>\n        ) : (\n          <Placeholder />\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default GatewayHeader;\n","import { AoGatewayWithAddress, ARIOToken, mARIOToken } from '@ar.io/sdk/web';\nimport { EAY_TOOLTIP_FORMULA, EAY_TOOLTIP_TEXT } from '@src/constants';\nimport useBalances from '@src/hooks/useBalances';\nimport useGateways from '@src/hooks/useGateways';\nimport useProtocolBalance from '@src/hooks/useProtocolBalance';\nimport { useGlobalState } from '@src/store';\nimport { formatAddress, formatPercentage, formatWithCommas } from '@src/utils';\nimport { calculateOperatorRewards } from '@src/utils/rewards';\nimport { MathJax } from 'better-react-mathjax';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport LabelValueRow from '../LabelValueRow';\nimport Tooltip from '../Tooltip';\nimport ErrorMessageIcon from '../forms/ErrorMessageIcon';\nimport { validateARIOAmount } from '../forms/validation';\nimport { InfoIcon } from '../icons';\nimport BaseModal from './BaseModal';\nimport ReviewStakeModal from './ReviewStakeModal';\n\nconst OperatorStakingModal = ({\n  onClose,\n  gateway,\n}: {\n  open: boolean;\n  onClose: () => void;\n  gateway: AoGatewayWithAddress;\n}) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const { data: balances } = useBalances(walletAddress);\n  const { data: protocolBalance } = useProtocolBalance();\n  const { data: gateways } = useGateways();\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [currentStake, setCurrentStake] = useState<number>(0);\n  const [amountToStake, setAmountToStake] = useState<string>('');\n\n  const [showReviewStakeModal, setShowReviewStakeModal] = useState(false);\n\n  const [EAY, setEAY] = useState('-');\n\n  useEffect(() => {\n    if (!gateway) {\n      return;\n    }\n    setCurrentStake(new mARIOToken(gateway.operatorStake).toARIO().valueOf());\n  }, [gateway]);\n\n  const newTotalStake = currentStake + parseFloat(amountToStake);\n\n  const minDelegatedStake = gateway\n    ? new mARIOToken(gateway?.settings.minDelegatedStake).toARIO().valueOf()\n    : 10;\n  const minRequiredStakeToAdd = currentStake > 0 ? 1 : minDelegatedStake;\n\n  const validators = useMemo(\n    () => ({\n      stakeAmount: validateARIOAmount(\n        'Stake Amount',\n        ticker,\n        1,\n        balances?.ario,\n      ),\n    }),\n    [ticker, balances?.ario],\n  );\n\n  const isFormValid = useCallback(() => {\n    return validators.stakeAmount(amountToStake) == undefined;\n  }, [amountToStake, validators]);\n\n  useEffect(() => {\n    if (protocolBalance && gateways && gateway && isFormValid()) {\n      const newTotalStake = currentStake + parseFloat(amountToStake);\n      const { EAY } = calculateOperatorRewards(\n        new mARIOToken(protocolBalance).toARIO(),\n        Object.values(gateways).filter((g) => g.status == 'joined').length,\n        gateway,\n        new ARIOToken(newTotalStake),\n      );\n      setEAY(formatPercentage(EAY));\n    } else {\n      setEAY('-');\n    }\n  }, [\n    amountToStake,\n    gateway,\n    protocolBalance,\n    gateways,\n    currentStake,\n    isFormValid,\n  ]);\n\n  const parsedStake = parseFloat(\n    amountToStake.length === 0 ? '0' : amountToStake,\n  );\n  const remainingBalance =\n    balances && parsedStake <= balances.ario ? balances.ario - parsedStake : -1;\n\n  const setMaxAmount = () => {\n    setAmountToStake((balances?.ario || 0) + '');\n  };\n\n  const disableInput =\n    !gateway || (balances?.ario || 0) < minRequiredStakeToAdd;\n\n  const errorMessages = {\n    stakeAmount: validators.stakeAmount(amountToStake),\n    cannotStake:\n      (balances?.ario || 0) < minRequiredStakeToAdd\n        ? `Insufficient balance, at least ${minRequiredStakeToAdd} IO required.`\n        : undefined,\n  };\n\n  return (\n    <BaseModal onClose={onClose} useDefaultPadding={false}>\n      <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n        <div className=\"border-b border-b-stroke-low\">\n          <div className=\"rounded-tr-xl border-b border-red-400 bg-grey-700 py-3 text-center\">\n            <span className={'text-gradient'}>Stake</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col p-8 pb-2\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(gateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n          </div>\n\n          <div className=\"mt-8 flex items-center\">\n            <div className=\"text-left text-sm text-mid\">Amount:</div>\n            <div className=\"grow\"></div>\n            <div className=\"text-left text-xs text-low\">\n              {balances &&\n                `Available: ${remainingBalance >= 0 ? formatWithCommas(+remainingBalance) : '-'} ${ticker}`}\n            </div>\n          </div>\n          <div className=\"mt-3 flex h-[3.25rem] items-center overflow-hidden rounded-md border border-grey-800\">\n            <input\n              className={\n                'size-full grow  bg-grey-1000 px-6 py-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n              }\n              disabled={disableInput}\n              readOnly={disableInput}\n              type=\"text\"\n              placeholder={`Enter amount of ${ticker} to stake`}\n              value={amountToStake}\n              onChange={(e) => {\n                const textValue = e.target.value;\n\n                if (textValue && isNaN(+e.target.value)) {\n                  return;\n                }\n\n                setAmountToStake(textValue);\n              }}\n            />\n            {gateway &&\n              (amountToStake?.length > 0 ||\n                (balances?.ario || 0) < minRequiredStakeToAdd) &&\n              (errorMessages.cannotStake || errorMessages.stakeAmount) && (\n                <ErrorMessageIcon\n                  errorMessage={\n                    errorMessages.cannotStake ?? errorMessages.stakeAmount!\n                  }\n                  tooltipPadding={'3'}\n                />\n              )}\n            <Button\n              className=\"mr-3 h-7\"\n              onClick={disableInput ? undefined : setMaxAmount}\n              buttonType={ButtonType.SECONDARY}\n              active={true}\n              title=\"Max\"\n              text=\"Max\"\n            />\n          </div>\n          <div className=\"mt-4 flex flex-col gap-2\"></div>\n        </div>\n        <div className=\"flex size-full flex-col gap-2 bg-containerL0 px-8 pb-8 pt-4\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Existing Stake:\"\n              value={`${currentStake} ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${\n                isFormValid() ? formatWithCommas(newTotalStake) : '-'\n              } ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"Operator EAY:\"\n              value={EAY}\n              rightIcon={\n                <Tooltip\n                  message={\n                    <div>\n                      <p>{EAY_TOOLTIP_TEXT}</p>\n                      <MathJax className=\"mt-4\">{EAY_TOOLTIP_FORMULA}</MathJax>\n                    </div>\n                  }\n                >\n                  <InfoIcon className=\"size-[1.125rem]\" />\n                </Tooltip>\n              }\n            />\n          </div>\n          <div\n            className={\n              isFormValid() ? undefined : 'pointer-events-none opacity-30'\n            }\n          >\n            <Button\n              className=\"mt-4 h-[3.25rem] w-full\"\n              onClick={() => {\n                setShowReviewStakeModal(true);\n              }}\n              buttonType={ButtonType.PRIMARY}\n              title=\"Review\"\n              text=\"Review\"\n            />\n          </div>\n        </div>\n        {showReviewStakeModal && gateway && walletAddress && (\n          <ReviewStakeModal\n            amountToStake={parseFloat(amountToStake)}\n            gateway={gateway}\n            onClose={() => setShowReviewStakeModal(false)}\n            onSuccess={() => onClose()}\n            ticker={ticker}\n            walletAddress={walletAddress}\n          />\n        )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default OperatorStakingModal;\n","import { AoGatewayWithAddress, mARIOToken } from '@ar.io/sdk/web';\nimport { Label, Radio, RadioGroup } from '@headlessui/react';\nimport useBalances from '@src/hooks/useBalances';\nimport { useGlobalState } from '@src/store';\nimport { WithdrawalType } from '@src/types';\nimport { formatAddress, formatWithCommas } from '@src/utils';\nimport { Circle, CircleCheck } from 'lucide-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport LabelValueRow from '../LabelValueRow';\nimport ErrorMessageIcon from '../forms/ErrorMessageIcon';\nimport { validateOperatorWithdrawAmount } from '../forms/validation';\nimport BaseModal from './BaseModal';\nimport ReviewWithdrawalModal from './ReviewWithdrawalModal';\n\nconst OperatorStakingModal = ({\n  onClose,\n  gateway,\n}: {\n  open: boolean;\n  onClose: () => void;\n  gateway: AoGatewayWithAddress;\n}) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const { data: balances } = useBalances(walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [currentStake, setCurrentStake] = useState<number>(0);\n  const [amountToWithdraw, setAmountToWithdraw] = useState<string>('');\n  const [withdrawalType, setWithdrawalType] =\n    useState<WithdrawalType>('standard');\n\n  const [showReviewWithdrawalModal, setShowReviewWithdrawalModal] =\n    useState(false);\n\n  useEffect(() => {\n    if (!gateway) {\n      return;\n    }\n    setCurrentStake(new mARIOToken(gateway.operatorStake).toARIO().valueOf());\n  }, [gateway]);\n\n  const newTotalStake = currentStake - parseFloat(amountToWithdraw);\n\n  const minDelegatedStake = gateway\n    ? new mARIOToken(gateway?.settings.minDelegatedStake).toARIO().valueOf()\n    : 10;\n  const minRequiredStakeToAdd = currentStake > 0 ? 1 : minDelegatedStake;\n\n  const withdrawalFee =\n    withdrawalType === 'expedited' ? 0.5 * parseFloat(amountToWithdraw) : 0;\n  const returningAmount = isNaN(parseFloat(amountToWithdraw))\n    ? '-'\n    : +(\n        isNaN(withdrawalFee)\n          ? parseFloat(amountToWithdraw)\n          : parseFloat(amountToWithdraw) - withdrawalFee\n      ).toFixed(4);\n\n  const validators = useMemo(\n    () => ({\n      withdrawAmount: validateOperatorWithdrawAmount(\n        'Withdraw Amount',\n        ticker,\n        currentStake,\n      ),\n    }),\n    [ticker, currentStake],\n  );\n\n  const isFormValid = useCallback(() => {\n    return validators.withdrawAmount(amountToWithdraw) == undefined;\n  }, [amountToWithdraw, validators]);\n\n  const parsedWithdrawing = parseFloat(\n    amountToWithdraw.length === 0 ? '0' : amountToWithdraw,\n  );\n  const remainingWithdrawalBalance = currentStake - 10000 - parsedWithdrawing;\n\n  const setMaxAmount = () => {\n    setAmountToWithdraw(currentStake + '');\n  };\n\n  const disableInput = !gateway || currentStake <= 0;\n\n  const errorMessages = {\n    withdrawAmount: validators.withdrawAmount(amountToWithdraw),\n    cannotStake:\n      (balances?.ario || 0) < minRequiredStakeToAdd\n        ? `Insufficient balance, at least ${minRequiredStakeToAdd} IO required.`\n        : undefined,\n  };\n\n  return (\n    <BaseModal onClose={onClose} useDefaultPadding={false}>\n      <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n        <div className=\"border-b border-b-stroke-low\">\n          <div className=\"rounded-tr-xl border-b border-red-400 bg-grey-700 py-3 text-center\">\n            <span className={'text-gradient'}>Withdraw</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col p-8 pb-2\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(gateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n          </div>\n\n          <div className=\"mt-8 flex items-center\">\n            <div className=\"text-left text-sm text-mid\">Amount:</div>\n            <div className=\"grow\"></div>\n            <div className=\"text-left text-xs text-low\">\n              {`Available to Withdraw: ${remainingWithdrawalBalance >= 0 ? formatWithCommas(remainingWithdrawalBalance) : '-'} ${ticker}`}\n            </div>\n          </div>\n          <div className=\"mt-3 flex h-[3.25rem] items-center overflow-hidden rounded-md border border-grey-800\">\n            <input\n              className={\n                'size-full grow  bg-grey-1000 px-6 py-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n              }\n              disabled={disableInput}\n              readOnly={disableInput}\n              type=\"text\"\n              placeholder={`Enter amount of ${ticker} to withdraw'}`}\n              value={amountToWithdraw}\n              onChange={(e) => {\n                const textValue = e.target.value;\n\n                if (textValue && isNaN(+e.target.value)) {\n                  return;\n                }\n\n                setAmountToWithdraw(textValue);\n              }}\n            />\n\n            {amountToWithdraw?.length > 0 && errorMessages.withdrawAmount && (\n              <ErrorMessageIcon\n                errorMessage={errorMessages.withdrawAmount}\n                tooltipPadding={'3'}\n              />\n            )}\n            <Button\n              className=\"mr-3 h-7\"\n              onClick={disableInput ? undefined : setMaxAmount}\n              buttonType={ButtonType.SECONDARY}\n              active={true}\n              title=\"Max\"\n              text=\"Max\"\n            />\n          </div>\n          <div className=\"mt-4 flex flex-col gap-2\">\n            <RadioGroup\n              className=\"my-2 flex flex-col gap-4 text-sm\"\n              value={withdrawalType}\n              onChange={(v) => setWithdrawalType(v)}\n            >\n              <Radio\n                value=\"standard\"\n                className=\"group flex w-full cursor-pointer rounded \n                  from-gradient-primary-start to-gradient-primary-end data-[checked]:bg-gradient-to-r\"\n              >\n                <div className=\"m-px flex size-full flex-col gap-1 rounded  bg-containerL3 px-4 py-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Circle className=\"visible size-4 group-data-[checked]:hidden\" />\n                    <CircleCheck className=\"hidden size-4 group-data-[checked]:block\" />\n                    <Label>Standard Withdrawal</Label>\n                  </div>\n                  <p className=\"pl-6 text-left text-xs text-mid\">\n                    90 day withdrawal period with no fees.\n                  </p>\n                </div>\n              </Radio>\n\n              <Radio\n                value=\"expedited\"\n                className=\"group flex w-full cursor-pointer rounded \n                  from-gradient-primary-start to-gradient-primary-end data-[checked]:bg-gradient-to-r\"\n              >\n                <div className=\"m-px flex size-full flex-col gap-1 rounded  bg-containerL3 px-4 py-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Circle className=\"visible size-4 group-data-[checked]:hidden\" />\n                    <CircleCheck className=\"hidden size-4 group-data-[checked]:block\" />\n                    <Label>Expedited Withdrawal</Label>\n                  </div>\n                  <p className=\"pl-6 text-left text-xs text-mid\">\n                    Instant withdrawal with 50% fee.\n                  </p>\n                </div>\n              </Radio>\n            </RadioGroup>\n          </div>\n        </div>\n        <div className=\"flex size-full flex-col gap-2 bg-containerL0 px-8 pb-8 pt-4\">\n          {withdrawalType == 'expedited' && (\n            <>\n              <LabelValueRow\n                className=\"first:text-mid last:text-mid\"\n                label=\"Fee:\"\n                value={`${isNaN(withdrawalFee) ? '-' : +withdrawalFee.toFixed(4)} ${ticker}`}\n              />\n              <LabelValueRow\n                className=\"first:text-mid last:text-mid\"\n                label=\"Returning Amount:\"\n                value={`${returningAmount} ${ticker}`}\n              />\n            </>\n          )}\n\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${\n                isFormValid() ? formatWithCommas(newTotalStake) : '-'\n              } ${ticker}`}\n            />\n          </div>\n          <div\n            className={\n              isFormValid() ? undefined : 'pointer-events-none opacity-30'\n            }\n          >\n            <Button\n              className=\"mt-4 h-[3.25rem] w-full\"\n              onClick={() => {\n                setShowReviewWithdrawalModal(true);\n              }}\n              buttonType={ButtonType.PRIMARY}\n              title=\"Review\"\n              text=\"Review\"\n            />\n          </div>\n        </div>\n        {showReviewWithdrawalModal && gateway && walletAddress && (\n          <ReviewWithdrawalModal\n            amountToWithdraw={parseFloat(amountToWithdraw)}\n            withdrawalType={withdrawalType}\n            gateway={gateway}\n            onClose={() => setShowReviewWithdrawalModal(false)}\n            onSuccess={() => onClose()}\n            ticker={ticker}\n            walletAddress={walletAddress}\n            withdrawalFee={withdrawalFee}\n            returningAmount={returningAmount}\n          />\n        )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default OperatorStakingModal;\n","import { AoGatewayWithAddress, ARIOToken, mARIOToken } from '@ar.io/sdk/web';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { ThreeDotsIcon } from '@src/components/icons';\nimport OperatorStakingModal from '@src/components/modals/OperatorStakingModal';\nimport OperatorWithdrawalModal from '@src/components/modals/OperatorWithdrawalModal';\nimport RedelegateModal, {\n  RedelegateModalProps,\n} from '@src/components/modals/RedelegateModal';\nimport Placeholder from '@src/components/Placeholder';\nimport Tooltip from '@src/components/Tooltip';\nimport { EAY_TOOLTIP_TEXT, OPERATOR_EAY_TOOLTIP_FORMULA } from '@src/constants';\nimport useGatewayRegistrySettings from '@src/hooks/useGatewayRegistrySettings';\nimport useGateways from '@src/hooks/useGateways';\nimport useProtocolBalance from '@src/hooks/useProtocolBalance';\nimport { useGlobalState } from '@src/store';\nimport { formatPercentage, formatWithCommas } from '@src/utils';\nimport { calculateOperatorRewards } from '@src/utils/rewards';\nimport { MathJax } from 'better-react-mathjax';\nimport { InfoIcon } from 'lucide-react';\nimport { useEffect, useMemo, useState } from 'react';\n\ntype OperatorStakeProps = {\n  gateway?: AoGatewayWithAddress | null;\n  walletAddress?: string;\n};\n\nconst OperatorStake = ({ gateway, walletAddress }: OperatorStakeProps) => {\n  const ticker = useGlobalState((state) => state.ticker);\n  const { data: protocolBalance } = useProtocolBalance();\n  const { data: gateways } = useGateways();\n  const [isStakingModalOpen, setIsStakingModalOpen] = useState<boolean>(false);\n  const [isWithdrawalModalOpen, setIsWithdrawalModalOpen] =\n    useState<boolean>(false);\n  const [eay, setEAY] = useState<number>();\n\n  const [showRedelegateModal, setShowRedelegateModal] =\n    useState<RedelegateModalProps>();\n\n  const { data: gatewayRegistrySettings } = useGatewayRegistrySettings();\n\n  const minOperatorStake = useMemo(() => {\n    return gatewayRegistrySettings\n      ? new mARIOToken(gatewayRegistrySettings.operators.minStake)\n          .toARIO()\n          .valueOf()\n      : 10000;\n  }, [gatewayRegistrySettings]);\n\n  useEffect(() => {\n    if (gateways && gateway && protocolBalance) {\n      const rewards = calculateOperatorRewards(\n        new mARIOToken(protocolBalance).toARIO(),\n        Object.values(gateways).filter((g) => g.status == 'joined').length,\n        gateway,\n        new mARIOToken(gateway.operatorStake).toARIO(),\n      );\n      setEAY(rewards.EAY);\n    }\n  }, [gateway, gateways, protocolBalance]);\n\n  return (\n    <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div className=\"flex items-center pl-6 pr-4 pt-4\">\n        <div className=\"grow items-center whitespace-nowrap text-mid\">\n          Operator Stake\n        </div>\n\n        {gateway?.gatewayAddress === walletAddress &&\n          gateway?.status != 'leaving' && (\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger\n                asChild\n                onPointerDown={(e) => e.stopPropagation()}\n              >\n                <div className=\"cursor-pointer rounded-md bg-gradient-to-b from-btn-primary-outer-gradient-start to-btn-primary-outer-gradient-end p-px\">\n                  <div className=\"inline-flex size-full items-center justify-start gap-[0.6875rem] rounded-md bg-btn-primary-base bg-gradient-to-b from-btn-primary-gradient-start to-btn-primary-gradient-end px-[0.3125rem] py-[.3125rem] shadow-inner\">\n                    <ThreeDotsIcon className=\"size-4\" />\n                  </div>\n                </div>\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content className=\"z-50 rounded border border-grey-500 bg-containerL0 text-sm\">\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setIsStakingModalOpen(true);\n                  }}\n                >\n                  Add Stake\n                </DropdownMenu.Item>\n\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setIsWithdrawalModalOpen(true);\n                  }}\n                >\n                  Withdraw Stake\n                </DropdownMenu.Item>\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (gateway) {\n                      setShowRedelegateModal({\n                        sourceGateway: gateway,\n                        onClose: () => setShowRedelegateModal(undefined),\n                        maxRedelegationStake: new mARIOToken(\n                          gateway.operatorStake -\n                            new ARIOToken(minOperatorStake).toMARIO().valueOf(),\n                        ).toARIO(),\n                      });\n                    }\n                  }}\n                >\n                  Redelegate\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          )}\n      </div>\n      <div className=\"flex items-center gap-2 p-6\">\n        {gateway ? (\n          <>\n            <div className=\"grow whitespace-nowrap text-mid\">\n              {formatWithCommas(\n                new mARIOToken(gateway?.operatorStake).toARIO().valueOf(),\n              )}{' '}\n              {ticker}{' '}\n              {gateway?.status === 'leaving' && '(Gateway Leaving Network)'}\n            </div>\n            {gateway.status === 'joined' && (\n              <div className=\"flex items-center gap-1 text-sm text-mid\">\n                {eay !== undefined ? formatPercentage(eay) : <Placeholder />}{' '}\n                EAY\n                {''}\n                <Tooltip\n                  message={\n                    <div>\n                      <p>{EAY_TOOLTIP_TEXT}</p>\n                      <MathJax className=\"mt-4\">\n                        {OPERATOR_EAY_TOOLTIP_FORMULA}\n                      </MathJax>\n                    </div>\n                  }\n                >\n                  <InfoIcon className=\"size-4\" />\n                </Tooltip>\n              </div>\n            )}\n          </>\n        ) : (\n          <Placeholder />\n        )}\n      </div>\n\n      {isStakingModalOpen && gateway && (\n        <OperatorStakingModal\n          open={isStakingModalOpen}\n          onClose={() => setIsStakingModalOpen(false)}\n          gateway={gateway}\n        />\n      )}\n      {isWithdrawalModalOpen && gateway && (\n        <OperatorWithdrawalModal\n          open={isWithdrawalModalOpen}\n          onClose={() => setIsWithdrawalModalOpen(false)}\n          gateway={gateway}\n        />\n      )}\n      {showRedelegateModal && <RedelegateModal {...showRedelegateModal} />}\n    </div>\n  );\n};\n\nexport default OperatorStake;\n","import { AoGatewayVault } from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst useGatewayVaults = (address?: string) => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const res = useQuery({\n    queryKey: ['gatewayVaults', address, arIOReadSDK],\n    queryFn: async () => {\n      if (!address) {\n        throw new Error('Address is not set');\n      }\n\n      let cursor: string | undefined;\n\n      let results: Array<AoGatewayVault> = [];\n\n      do {\n        const pageResult = await arIOReadSDK.getGatewayVaults({\n          address,\n          cursor,\n          limit: 100,\n        });\n\n        results = results.concat(pageResult.items);\n\n        cursor = pageResult.nextCursor;\n      } while (cursor !== undefined);\n\n      return results;\n    },\n    staleTime: Infinity,\n    enabled: !!address && !!arIOReadSDK,\n  });\n\n  return res;\n};\n\nexport default useGatewayVaults;\n","import {\n  AoGateway,\n  AoGatewayVault,\n  AoGatewayWithAddress,\n  AoVaultData,\n  mARIOToken,\n} from '@ar.io/sdk/web';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { ThreeDotsIcon } from '@src/components/icons';\nimport CancelWithdrawalModal from '@src/components/modals/CancelWithdrawalModal';\nimport InstantWithdrawalModal from '@src/components/modals/InstantWithdrawalModal';\nimport RedelegateModal, {\n  RedelegateModalProps,\n} from '@src/components/modals/RedelegateModal';\nimport TableView from '@src/components/TableView';\nimport useGatewayVaults from '@src/hooks/useGatewayVaults';\nimport { useGlobalState } from '@src/store';\nimport { formatDateTime, formatWithCommas } from '@src/utils';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { useState } from 'react';\nimport CollapsiblePanel from './CollapsiblePanel';\n\ntype PendingWithdrawalProps = {\n  gateway?: AoGatewayWithAddress | null;\n  walletAddress?: string;\n};\n\nconst columnHelper = createColumnHelper<AoGatewayVault>();\n\nconst PendingWithdrawals = ({\n  gateway,\n  walletAddress,\n}: PendingWithdrawalProps) => {\n  const ticker = useGlobalState((state) => state.ticker);\n  const { isLoading, data: gatewayVaults } = useGatewayVaults(\n    gateway?.gatewayAddress,\n  );\n\n  const [confirmCancelWithdrawal, setConfirmCancelWithdrawal] = useState<{\n    gatewayAddress: string;\n    vaultId: string;\n  }>();\n\n  const [confirmInstantWithdrawal, setConfirmInstantWithdrawal] = useState<{\n    gatewayAddress: string;\n    gateway: AoGateway;\n    vault: AoVaultData;\n    vaultId: string;\n  }>();\n\n  const [showRedelegateModal, setShowRedelegateModal] =\n    useState<RedelegateModalProps>();\n\n  // Define columns for the table\n  const columns: ColumnDef<AoGatewayVault, any>[] = [\n    columnHelper.accessor('balance', {\n      id: 'balance',\n      header: 'Stake Withdrawing',\n      sortDescFirst: true,\n      cell: ({ row }) =>\n        `${formatWithCommas(\n          new mARIOToken(row.original.balance).toARIO().valueOf(),\n        )} ${ticker}`,\n    }),\n    columnHelper.accessor('endTimestamp', {\n      id: 'endTimestamp',\n      header: 'Date of Return',\n      sortDescFirst: true,\n      cell: ({ row }) => formatDateTime(new Date(row.original.endTimestamp)),\n    }),\n    columnHelper.display({\n      id: 'actions',\n      cell: ({ row }) => {\n        return (\n          <div className=\"flex w-full justify-end pr-6\">\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger\n                asChild\n                onPointerDown={(e) => e.stopPropagation()}\n              >\n                <div className=\"cursor-pointer rounded-md bg-gradient-to-b from-btn-primary-outer-gradient-start to-btn-primary-outer-gradient-end  p-px\">\n                  <div className=\"inline-flex size-full items-center justify-start gap-[0.6875rem] rounded-md bg-btn-primary-base bg-gradient-to-b from-btn-primary-gradient-start to-btn-primary-gradient-end px-[0.3125rem] py-[.3125rem] shadow-inner\">\n                    <ThreeDotsIcon className=\"size-4\" />\n                  </div>\n                </div>\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content className=\"z-50 rounded border border-grey-500 bg-containerL0 text-sm\">\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (gateway) {\n                      setConfirmInstantWithdrawal({\n                        gateway: gateway,\n                        gatewayAddress: gateway.gatewayAddress,\n                        vault: row.original,\n                        vaultId: row.original.vaultId,\n                      });\n                    }\n                  }}\n                >\n                  Expedite Withdrawal\n                </DropdownMenu.Item>\n\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (gateway) {\n                      setConfirmCancelWithdrawal({\n                        gatewayAddress: gateway.gatewayAddress,\n                        vaultId: row.original.vaultId,\n                      });\n                    }\n                  }}\n                >\n                  Cancel Withdrawal\n                </DropdownMenu.Item>\n\n                <DropdownMenu.Item\n                  className=\"cursor-pointer select-none  px-4 py-2 outline-none  data-[highlighted]:bg-containerL3\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (gateway) {\n                      setShowRedelegateModal({\n                        sourceGateway: gateway,\n                        onClose: () => setShowRedelegateModal(undefined),\n                        maxRedelegationStake: new mARIOToken(\n                          row.original.balance,\n                        ).toARIO(),\n                        vaultId: row.original.vaultId,\n                      });\n                    }\n                  }}\n                >\n                  Redelegate\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          </div>\n        );\n      },\n    }),\n  ];\n\n  return walletAddress == gateway?.gatewayAddress && gatewayVaults?.length ? (\n    <CollapsiblePanel\n      title=\"Pending Withdrawals\"\n      titleRight={\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-high\">Total Pending:</div>\n          <div className=\"text-gradient-red\">\n            <div>\n              {formatWithCommas(\n                new mARIOToken(gatewayVaults.reduce((a, b) => a + b.balance, 0))\n                  .toARIO()\n                  .valueOf(),\n              )}{' '}\n              {ticker}\n            </div>\n          </div>\n        </div>\n      }\n    >\n      {gatewayVaults && gatewayVaults.length > 0 && (\n        <TableView\n          columns={columns}\n          data={gatewayVaults || []}\n          defaultSortingState={{ id: 'endTimestamp', desc: false }}\n          isLoading={isLoading}\n          noDataFoundText=\"Unable to fetch pending withdrawals.\"\n          shortTable={true}\n        />\n      )}\n\n      {confirmCancelWithdrawal && (\n        <CancelWithdrawalModal\n          gatewayAddress={confirmCancelWithdrawal.gatewayAddress}\n          vaultId={confirmCancelWithdrawal.vaultId}\n          onClose={() => setConfirmCancelWithdrawal(undefined)}\n        />\n      )}\n      {confirmInstantWithdrawal && (\n        <InstantWithdrawalModal\n          gateway={confirmInstantWithdrawal.gateway}\n          gatewayAddress={confirmInstantWithdrawal.gatewayAddress}\n          vaultId={confirmInstantWithdrawal.vaultId}\n          vault={confirmInstantWithdrawal.vault}\n          onClose={() => setConfirmInstantWithdrawal(undefined)}\n        />\n      )}\n      {showRedelegateModal && <RedelegateModal {...showRedelegateModal} />}\n    </CollapsiblePanel>\n  ) : (\n    <></>\n  );\n};\n\nexport default PendingWithdrawals;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport { WRITE_OPTIONS } from '@src/constants';\nimport useGatewayRegistrySettings from '@src/hooks/useGatewayRegistrySettings';\nimport { useGlobalState } from '@src/store';\nimport { formatWithCommas } from '@src/utils';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useMemo, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport { LinkArrowIcon } from '../icons';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\n\nconst LeaveNetworkModal = ({ onClose }: { onClose: () => void }) => {\n  const queryClient = useQueryClient();\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [txid, setTxid] = useState<string>();\n\n  const [leaveNetworkText, setLeaveNetworkText] = useState('');\n\n  const termsAccepted = leaveNetworkText === 'LEAVE NETWORK';\n\n  const { data: gatewayRegistrySettings } = useGatewayRegistrySettings();\n\n  const minOperatorStake = useMemo(() => {\n    return gatewayRegistrySettings\n      ? new mARIOToken(gatewayRegistrySettings.operators.minStake)\n          .toARIO()\n          .valueOf()\n      : 10000;\n  }, [gatewayRegistrySettings]);\n\n  const processLeaveNetwork = async () => {\n    if (walletAddress && arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        const { id: txID } = await arIOWriteableSDK.leaveNetwork(WRITE_OPTIONS);\n        setTxid(txID);\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal onClose={onClose} useDefaultPadding={false}>\n        <div className=\"w-[calc(100vw-2rem)] text-left lg:w-[28.4375rem]\">\n          <div className=\"px-8  pb-4 pt-6\">\n            <div className=\"text-lg text-high\">Leave Network</div>\n            {/* <div className=\"flex pt-2 text-xs text-low\">\n              Withdraw all delegated stakes.\n            </div> */}\n          </div>\n\n          <div className=\"border-y border-grey-800 p-8 text-sm text-mid\">\n            <div>\n              This action will begin the process of removing your gateway from\n              the network. Once confirmed, the following actions will be\n              initiated in the next epoch:\n            </div>\n            <ul className=\"mt-6 list-disc space-y-2 pl-8\">\n              <li>\n                Your gateway&apos;s primary stake (\n                {formatWithCommas(minOperatorStake)} {ticker}) will be vaulted\n                and subject to a 90-day withdrawal period.\n              </li>\n              <li>\n                Any additional operator stake above the minimum (\n                {formatWithCommas(minOperatorStake)} {ticker}) will be vaulted\n                and subject to a 90-day withdrawal period.\n              </li>\n              <li>\n                Any existing delegated stakes will be vaulted and subject to\n                90-day withdrawal period.{' '}\n              </li>\n              <li>\n                Your gateway status will change to leaving and will no longer be\n                eligible for protocol rewards or observation duties.\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"bg-containerL0 px-8 pb-8 pt-6\">\n            <div className=\"mb-6 flex flex-col items-center gap-2 text-sm text-mid\">\n              <div>\n                Please type &quot;LEAVE NETWORK&quot; in the text box to\n                proceed.\n              </div>\n              <input\n                type=\"text\"\n                onChange={(e) => setLeaveNetworkText(e.target.value)}\n                className={\n                  'h-7 w-full rounded-md border border-grey-700 bg-grey-1000 p-4 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n                }\n                value={leaveNetworkText}\n              />\n            </div>\n\n            <div className=\"flex grow justify-center\">\n              <Button\n                onClick={processLeaveNetwork}\n                buttonType={ButtonType.PRIMARY}\n                title=\"Leave Network\"\n                text={<div className=\"py-2\">Leave Network</div>}\n                className={`w-full ${!termsAccepted && 'pointer-events-none opacity-30'}`}\n              />\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n          }}\n          title=\"Confirmed\"\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully left the network.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default LeaveNetworkModal;\n","import { AoGateway, mARIOToken } from '@ar.io/sdk/web';\nimport Button, { ButtonType } from '@src/components/Button';\nimport Placeholder from '@src/components/Placeholder';\nimport ConnectModal from '@src/components/modals/ConnectModal';\nimport LeaveNetworkModal from '@src/components/modals/LeaveNetworkModal';\nimport StakingModal from '@src/components/modals/StakingModal';\nimport { useGlobalState } from '@src/store';\nimport { getBlockExplorerUrlForAddress } from '@src/utils';\nimport { useState } from 'react';\n\ntype DisplayRowProps = {\n  label: string;\n  value?: string | number | boolean | React.ReactNode;\n  type?: string;\n  rightComponent?: React.ReactNode;\n};\n\nconst DisplayRow = ({\n  label,\n  value,\n  type,\n  rightComponent,\n}: DisplayRowProps) => {\n  return (\n    <>\n      <div className=\"border-t border-grey-900\">\n        <div className=\" bg-grey-1000 px-6 py-3 text-xs text-low\">{label}</div>\n      </div>\n      <div className=\"flex flex-col content-center justify-center border-t border-grey-900 p-2 text-sm text-low lg:p-0\">\n        {value === undefined ? (\n          <Placeholder />\n        ) : typeof value === 'boolean' ? (\n          <div className=\"flex items-center\">\n            <span className={`grow ${value ? 'text-green-600' : undefined}`}>\n              {value ? 'Enabled' : 'Disabled'}\n            </span>\n            {rightComponent}\n          </div>\n        ) : type == 'address' || type == 'tx' ? (\n          <a\n            className=\"text-high\"\n            href={\n              type == 'tx'\n                ? `https://viewblock.io/arweave/tx/${value}`\n                : getBlockExplorerUrlForAddress((value || '').toString())\n            }\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {value}\n          </a>\n        ) : type == 'link' ? (\n          <a\n            className=\"text-gradient\"\n            href={value + ''}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {value}\n          </a>\n        ) : (\n          <div className=\"flex items-center break-all\">\n            <div className=\"grow\">{value}</div>\n            {rightComponent}\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst PropertyDisplayPanel = ({\n  ownerId,\n  gateway,\n}: {\n  ownerId?: string;\n  gateway?: AoGateway | null;\n}) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const isOwnGateway = ownerId && ownerId === walletAddress?.toString();\n\n  const [stakingModalWalletAddress, setStakingModalWalletAddress] =\n    useState<string>();\n\n  const [isConnectModalOpen, setIsConnectModalOpen] = useState<boolean>(false);\n  const [isLeaveNetworkModalOpen, setLeaveNetworkModalOpen] =\n    useState<boolean>(false);\n\n  const gatewayAddress = gateway\n    ? `${gateway.settings.protocol}://${gateway.settings.fqdn}:${gateway.settings.port}`\n    : undefined;\n\n  const gatewayLeaving = gateway?.status == 'leaving';\n\n  const conditionalRows = gateway?.settings.allowDelegatedStaking\n    ? [\n        {\n          label: 'Reward Share Ratio:',\n          value: gatewayLeaving\n            ? 'N/A'\n            : `${gateway?.settings.delegateRewardShareRatio}%`,\n        },\n        {\n          label: `Minimum Delegated Stake (${ticker}):`,\n          value: gatewayLeaving\n            ? 'N/A'\n            : new mARIOToken(gateway?.settings.minDelegatedStake || 0)\n                .toARIO()\n                .valueOf(),\n        },\n      ]\n    : [];\n\n  const gatewayRows: DisplayRowProps[] = [\n    { label: 'Label:', value: gateway?.settings.label },\n    { label: 'Address:', value: gatewayAddress, type: 'link' },\n    { label: 'Owner Wallet:', value: ownerId, type: 'address' },\n    {\n      label: 'Observer Wallet:',\n      value: gateway?.observerAddress,\n      type: 'address',\n    },\n    {\n      label: 'Properties ID:',\n      value: gateway?.settings.properties,\n      type: 'tx',\n    },\n    {\n      label: 'Status:',\n      value:\n        gateway?.status == 'leaving' ? (\n          <div className=\"text-[#f00]\">leaving</div>\n        ) : (\n          gateway?.status\n        ),\n      rightComponent:\n        isOwnGateway && gateway?.status == 'joined' ? (\n          <Button\n            className=\"*:*:text-gradient-red mr-2\"\n            buttonType={ButtonType.PRIMARY}\n            active={true}\n            title=\"Leave Network\"\n            text=\"Leave\"\n            onClick={() => {\n              setLeaveNetworkModalOpen(true);\n            }}\n          />\n        ) : undefined,\n    },\n    { label: 'Note:', value: gateway?.settings.note },\n    {\n      label: 'Reward Auto Stake:',\n      value: gatewayLeaving ? 'N/A' : gateway?.settings.autoStake,\n    },\n    {\n      label: 'Delegated Staking:',\n      value: gatewayLeaving ? 'N/A' : gateway?.settings.allowDelegatedStaking,\n      rightComponent:\n        !isOwnGateway &&\n        gateway?.settings.allowDelegatedStaking &&\n        gateway?.status == 'joined' ? (\n          <Button\n            className=\"mr-2\"\n            buttonType={ButtonType.PRIMARY}\n            active={true}\n            title=\"Manage Stake\"\n            text=\"Stake\"\n            onClick={() => {\n              if (walletAddress) {\n                setStakingModalWalletAddress(ownerId);\n              } else {\n                setIsConnectModalOpen(true);\n              }\n            }}\n          />\n        ) : undefined,\n    },\n    ...conditionalRows,\n  ];\n\n  return (\n    <div className=\"grid grid-cols-[8rem_auto] lg:grid-cols-[14.375rem_auto]\">\n      {gatewayRows.map(({ label, value, rightComponent }, index) => (\n        <DisplayRow\n          key={index}\n          label={label}\n          value={value}\n          rightComponent={rightComponent}\n        />\n      ))}\n\n      {stakingModalWalletAddress && (\n        <StakingModal\n          open={!!stakingModalWalletAddress}\n          onClose={() => setStakingModalWalletAddress(undefined)}\n          ownerWallet={stakingModalWalletAddress}\n        />\n      )}\n\n      {isConnectModalOpen && (\n        <ConnectModal onClose={() => setIsConnectModalOpen(false)} />\n      )}\n      {isLeaveNetworkModalOpen && (\n        <LeaveNetworkModal onClose={() => setLeaveNetworkModalOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default PropertyDisplayPanel;\n","import { useEffect, useState } from 'react';\nimport useGateways from './useGateways';\n\nconst useObserverToGatewayMap = () => {\n  const { data: gateways } = useGateways();\n  const [observerToGatewayMap, setObserverToGatewayMap] =\n    useState<Record<string, string>>();\n\n  useEffect(() => {\n    if (gateways) {\n      const results: Record<string, string> = {};\n      Object.entries(gateways).forEach(([gatewayAddress, gateway]) => {\n        results[gateway.observerAddress] = gatewayAddress;\n      });\n      setObserverToGatewayMap(results);\n    }\n  }, [gateways]);\n\n  return observerToGatewayMap;\n};\nexport default useObserverToGatewayMap;\n","import { AoGatewayWithAddress } from '@ar.io/sdk/web';\nimport Button from '@src/components/Button';\nimport Dropdown from '@src/components/Dropdown';\nimport { StatsArrowIcon } from '@src/components/icons';\nimport Placeholder from '@src/components/Placeholder';\nimport useEpochs from '@src/hooks/useEpochs';\nimport useObserverToGatewayMap from '@src/hooks/useObserverToGatewayMap';\nimport { CheckCircleIcon, NotebookText, XCircleIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\ntype ReportedOnByEntry = {\n  observerId: string;\n  reportId?: string;\n};\n\nconst ReportedOnByCard = ({\n  gateway,\n}: {\n  gateway?: AoGatewayWithAddress | null;\n}) => {\n  const { data: epochs } = useEpochs();\n  const [selectedEpochIndex, setSelectedEpochIndex] = useState(0);\n  const [failureObservers, setFailureObservers] = useState<ReportedOnByEntry[]>(\n    [],\n  );\n  const [totalReportsForEpoch, setTotalReportsForEpoch] = useState<number>(0);\n  const observerToGatewayMap = useObserverToGatewayMap();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (epochs) {\n      const selectedEpoch = epochs[selectedEpochIndex];\n      setTotalReportsForEpoch(\n        selectedEpoch?.observations?.reports\n          ? Object.keys(selectedEpoch?.observations?.reports).length\n          : 0,\n      );\n\n      if (gateway) {\n        const observers =\n          selectedEpoch?.observations.failureSummaries[\n            gateway.gatewayAddress\n          ] || [];\n        const entries = observers.map<ReportedOnByEntry>((observerId) => {\n          return {\n            observerId,\n            reportId: selectedEpoch?.observations.reports[observerId],\n          };\n        });\n        setFailureObservers(entries);\n      } else {\n        setFailureObservers([]);\n      }\n    } else {\n      setFailureObservers([]);\n    }\n  }, [epochs, gateway, selectedEpochIndex]);\n\n  return (\n    <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div className=\"flex flex-col border-b border-grey-500 bg-containerL3 lg:flex-row\">\n        {epochs ? (\n          <>\n            <div className=\"flex\">\n              <div className=\"grow whitespace-nowrap px-6 py-4\">\n                {failureObservers.length == 0 ? (\n                  <div className=\"text-mid\">No Failures Reported</div>\n                ) : (\n                  <div className=\"text-mid\">\n                    Failed by{' '}\n                    <span className=\"text-red-500\">\n                      {failureObservers.length}/{totalReportsForEpoch}\n                    </span>{' '}\n                    observers\n                  </div>\n                )}\n              </div>\n              <div className=\"mr-4 flex items-center\">\n                {failureObservers.length <= totalReportsForEpoch / 2 ? (\n                  <div className=\"flex items-center text-green-500\">\n                    <CheckCircleIcon className=\"mr-1 size-4\" />\n                    <span>\n                      {selectedEpochIndex === 0 ? 'Passing' : 'Passed'}\n                    </span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center text-red-500\">\n                    <XCircleIcon className=\"mr-1 size-4\" />\n                    <span>\n                      {selectedEpochIndex === 0 ? 'Failing' : 'Failed'}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"grow place-items-end\">\n              <Dropdown\n                options={\n                  epochs?.map((epoch, index) => ({\n                    label:\n                      index == 0\n                        ? 'Current Epoch'\n                        : `Epoch ${epoch?.epochIndex}`,\n                    value: index.toString(),\n                  })) || []\n                }\n                onChange={(e) => {\n                  setSelectedEpochIndex(Number(e.target.value));\n                }}\n                value={selectedEpochIndex.toString()}\n              />\n            </div>\n          </>\n        ) : (\n          <Placeholder className=\"m-4 h-4\" />\n        )}\n      </div>\n      <div className=\"h-80 overflow-hidden overflow-y-auto scrollbar\">\n        {failureObservers?.map((entry) => (\n          <div\n            key={entry.observerId}\n            className=\"flex items-center gap-1 border-t border-grey-500 py-2.5 pl-6 pr-2 text-xs text-low\"\n          >\n            <StatsArrowIcon className=\"size-4\" />\n            <div className=\"flex w-full items-center\">\n              {observerToGatewayMap && epochs ? (\n                <>\n                  <Link\n                    className=\"grow\"\n                    to={`/gateways/${observerToGatewayMap[entry.observerId]}`}\n                  >\n                    {entry.observerId}\n                  </Link>\n\n                  {entry.reportId && (\n                    <Button\n                      className=\"h-fit last:p-2\"\n                      active={true}\n                      text={\n                        <NotebookText\n                          className=\"size-3 text-mid\"\n                          strokeWidth={1.5}\n                        />\n                      }\n                      onClick={() => {\n                        if (entry.reportId) {\n                          navigate(\n                            `/gateways/${observerToGatewayMap[entry.observerId]}/reports/${entry.reportId}`,\n                          );\n                        }\n                      }}\n                      title={'View Report'}\n                    ></Button>\n                  )}\n                </>\n              ) : (\n                <Placeholder className=\"h-4\" />\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst ReportedOnCard = ({\n  gateway,\n}: {\n  gateway?: AoGatewayWithAddress | null;\n}) => {\n  const { data: epochs } = useEpochs();\n  const [selectedEpochIndex, setSelectedEpochIndex] = useState(0);\n  const [snitchedOn, setSnitchedOn] = useState<string[]>([]);\n  const [reportId, setReportId] = useState<string>();\n  const [selectedForObservation, setSelectedForObservation] =\n    useState<boolean>();\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (epochs) {\n      const selectedEpoch = epochs[selectedEpochIndex];\n\n      if (gateway && selectedEpoch) {\n        const address = gateway.observerAddress;\n\n        setReportId(selectedEpoch.observations.reports[address]);\n\n        setSelectedForObservation(\n          selectedEpoch.prescribedObservers?.find(\n            (obs) => obs.observerAddress == address,\n          ) !== undefined,\n        );\n\n        const snitchedOn = Object.entries(\n          selectedEpoch.observations.failureSummaries,\n        ).reduce((acc, [gatewayAddress, reportedBy]) => {\n          if (reportedBy.includes(address)) {\n            acc.push(gatewayAddress);\n          }\n          return acc;\n        }, [] as string[]);\n        setSnitchedOn(snitchedOn);\n      } else {\n        setSelectedForObservation(undefined);\n        setSnitchedOn([]);\n      }\n    } else {\n      setSelectedForObservation(undefined);\n      setSnitchedOn([]);\n    }\n  }, [epochs, gateway, selectedEpochIndex]);\n\n  return (\n    <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div className=\"flex flex-col border-b border-grey-500 bg-containerL3 lg:flex-row\">\n        {epochs ? (\n          <>\n            <div className=\"flex items-center\">\n              <div className=\"grow items-center whitespace-nowrap py-4 pl-6\">\n                {selectedForObservation ? (\n                  <>\n                    <div className=\"text-mid\">\n                      Reported on{' '}\n                      <span className=\"text-red-500\">{snitchedOn.length}</span>{' '}\n                      gateways\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-low\">Not Selected for Observation</div>\n                )}\n              </div>\n              {reportId && (\n                <Button\n                  className=\"ml-3 mr-2 h-fit last:p-2\"\n                  active={true}\n                  text={\n                    <NotebookText\n                      className=\"size-3 text-mid\"\n                      strokeWidth={1.5}\n                    />\n                  }\n                  onClick={() => {\n                    if (reportId) {\n                      navigate(\n                        `/gateways/${gateway?.gatewayAddress}/reports/${reportId}`,\n                      );\n                    }\n                  }}\n                  title={'View Report'}\n                ></Button>\n              )}\n            </div>\n            <div className=\"grow place-items-end\">\n              <Dropdown\n                options={\n                  epochs?.map((epoch, index) => ({\n                    label:\n                      index == 0\n                        ? 'Current Epoch'\n                        : `Epoch ${epoch?.epochIndex}`,\n                    value: index.toString(),\n                  })) || []\n                }\n                onChange={(e) => setSelectedEpochIndex(Number(e.target.value))}\n                value={selectedEpochIndex.toString()}\n              />\n            </div>\n          </>\n        ) : (\n          <Placeholder className=\"m-4 h-4\" />\n        )}\n      </div>\n\n      <div className=\"h-80 overflow-hidden overflow-y-auto scrollbar\">\n        {snitchedOn?.map((observer) => (\n          <div\n            key={observer}\n            className=\"flex gap-1 border-t border-grey-500 px-6 py-4 text-xs text-low\"\n          >\n            <StatsArrowIcon className=\"size-4\" />\n            <div>\n              <Link to={`/gateways/${observer}`}>{observer}</Link>{' '}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst SnitchRow = ({ gateway }: { gateway?: AoGatewayWithAddress | null }) => {\n  return (\n    <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n      <ReportedOnByCard gateway={gateway} />\n      <ReportedOnCard gateway={gateway} />\n    </div>\n  );\n};\n\nexport default SnitchRow;\n","import { useQuery } from '@tanstack/react-query';\nimport ky from 'ky';\n\nexport interface ArioInfoResponse {\n  wallet: string;\n  processId: string;\n  // ans104UnbundleFilter:...\n  // ans104IndexFilter:...\n  supportedManifestVersions: string[];\n  release: string;\n}\n\nconst useGatewayArioInfo = ({ url }: { url?: string }) => {\n  const queryResults = useQuery({\n    queryKey: ['ario-info', url],\n    queryFn: async () => {\n      if (url === undefined) {\n        throw new Error('Error: no URL provided.');\n      }\n\n      const arioInfoEndpoint = `${url}/ar-io/info`;\n\n      const response = await ky.get(arioInfoEndpoint);\n      const responseJson = await response.json();\n\n      return responseJson as ArioInfoResponse;\n    },\n    enabled: !!url,\n  });\n\n  return queryResults;\n};\n\nexport default useGatewayArioInfo;\n","import { StatsArrowIcon } from '@src/components/icons';\nimport Placeholder from '@src/components/Placeholder';\nimport { ReactNode } from 'react';\n\nconst ValueRow = ({ value }: { value?: ReactNode }) => {\n  return (\n    <div className=\"flex gap-1\">\n      <StatsArrowIcon className=\"size-4\" />\n      {value !== undefined ? (\n        <div className=\"break-all text-sm text-mid\">{value}</div>\n      ) : (\n        <Placeholder />\n      )}\n    </div>\n  );\n};\n\nconst StatsBox = ({\n  title,\n  value,\n}: {\n  title: string | ReactNode;\n  value: Array<ReactNode> | string | number | undefined | ReactNode;\n}) => {\n  return (\n    <div className=\"flex flex-col gap-1 border-t border-transparent-100-16 px-6 py-4\">\n      <div className=\"text-xs text-low\">{title}</div>\n      {value instanceof Array ? (\n        value.map((v, i) => <ValueRow value={v} key={i} />)\n      ) : (\n        <ValueRow value={value} />\n      )}\n    </div>\n  );\n};\n\nexport default StatsBox;\n","import { AoGatewayWithAddress } from '@ar.io/sdk/web';\nimport useGatewayArioInfo from '@src/hooks/useGatewayArioInfo';\nimport { useEffect, useState } from 'react';\nimport StatsBox from './StatsBox';\n\nconst SoftwareDetails = ({ gateway }: { gateway?: AoGatewayWithAddress }) => {\n  const [bundlers, setBundlers] = useState<string[]>();\n\n  const gatewayAddress = gateway\n    ? `${gateway.settings.protocol}://${gateway.settings.fqdn}:${gateway.settings.port}`\n    : undefined;\n\n  const arioInfoRes = useGatewayArioInfo({\n    url: gatewayAddress,\n  });\n\n  useEffect(() => {\n    if (gateway?.services?.bundlers) {\n      const bundlers = gateway.services.bundlers.map(\n        (service) =>\n          `${service.protocol}://${service.fqdn}${service.port === 443 ? '' : `:${service.port}`}${service.path}`,\n      );\n\n      setBundlers(bundlers);\n    }\n  }, [gateway]);\n\n  return (\n    <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div className=\"bg-containerL3 px-6 py-4\">\n        <div className=\"text-high\">Software</div>\n      </div>\n      <StatsBox title=\"Release Version\" value={arioInfoRes.data?.release} />\n      {bundlers && (\n        <StatsBox\n          title=\"Bundlers\"\n          value={bundlers.map((b) => (\n            <a key={b} href={b} target=\"_blank\" rel=\"noreferrer\">\n              {b}\n            </a>\n          ))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SoftwareDetails;\n","import { useQuery } from '@tanstack/react-query';\nimport ky from 'ky';\n\n// {\"uptime\":464459.77230359,\"message\":\"Welcome to the Permaweb.\",\"date\":\"2024-05-08T08:53:50.015Z\"}\nexport interface HealthCheckResponse {\n  uptime: number;\n  message: string;\n  date: Date;\n}\n\nconst useHealthcheck = ({ url }: { url?: string }) => {\n  const queryResults = useQuery({\n    queryKey: ['healthcheck', url],\n    queryFn: async () => {\n      if (url === undefined) {\n        throw new Error('Error: no URL provided.');\n      }\n\n      const healthCheckEndpoint = `${url}/ar-io/healthcheck`;\n\n      const response = await ky.get(healthCheckEndpoint);\n      const responseJson = (await response.json()) as any;\n\n      return {\n        uptime: responseJson.uptime,\n        message: responseJson.message,\n        date: new Date(responseJson.date),\n      };\n    },\n    enabled: !!url,\n  });\n\n  return queryResults;\n};\n\nexport default useHealthcheck;\n","import { AoGatewayWithAddress } from '@ar.io/sdk/web';\nimport Streak from '@src/components/Streak';\nimport useHealthcheck from '@src/hooks/useHealthCheck';\nimport { formatDateTime } from '@src/utils';\nimport { useMemo } from 'react';\nimport StatsBox from './StatsBox';\n\nconst formatUptime = (uptime: number) => {\n  const days = Math.floor(uptime / 86400);\n  const hours = Math.floor((uptime % 86400) / 3600);\n  const minutes = Math.floor((uptime % 3600) / 60);\n  const seconds = Math.floor(uptime % 60);\n\n  return `${days}d, ${hours}h, ${minutes}m, ${seconds}s`;\n};\n\ntype StatsPanelProps = {\n  gateway?: AoGatewayWithAddress | null;\n};\n\nconst StatsPanel = ({ gateway }: StatsPanelProps) => {\n  const gatewayAddress = gateway\n    ? `${gateway.settings.protocol}://${gateway.settings.fqdn}:${gateway.settings.port}`\n    : undefined;\n  const healthCheckRes = useHealthcheck({\n    url: gatewayAddress,\n  });\n\n  const streak = useMemo(() => {\n    if (!gateway) return;\n\n    return gateway.stats.failedConsecutiveEpochs > 0\n      ? -gateway.stats.failedConsecutiveEpochs\n      : gateway.stats.passedConsecutiveEpochs;\n  }, [gateway]);\n\n  return (\n    <div className=\"size-fit w-full rounded-xl border border-transparent-100-16 text-sm\">\n      <div className=\"bg-containerL3 px-6 py-4\">\n        <div className=\"text-high\">Stats</div>\n      </div>\n      <StatsBox\n        title=\"Join Date\"\n        value={\n          gateway?.startTimestamp\n            ? formatDateTime(new Date(gateway?.startTimestamp))\n            : undefined\n        }\n      />\n\n      {gateway?.status === 'joined' ? (\n        <>\n          {streak && (\n            <StatsBox title=\"Streak\" value={<Streak streak={streak} />} />\n          )}\n          <StatsBox\n            title=\"Uptime\"\n            value={\n              healthCheckRes.isError\n                ? 'N/A'\n                : healthCheckRes.isLoading\n                  ? undefined\n                  : formatUptime(healthCheckRes.data?.uptime)\n            }\n          />\n        </>\n      ) : (\n        gateway && (\n          <StatsBox\n            title=\"Leave Date\"\n            value={\n              gateway?.endTimestamp\n                ? formatDateTime(new Date(gateway?.endTimestamp))\n                : undefined\n            }\n          />\n        )\n      )}\n      {/* <StatsBox title=\"Rewards Distributed\" value={gateway?} /> */}\n    </div>\n  );\n};\n\nexport default StatsPanel;\n","/* eslint-disable tailwindcss/classnames-order */\nimport {\n  ARIOToken,\n  AoUpdateGatewaySettingsParams,\n  mARIOToken,\n} from '@ar.io/sdk/web';\nimport Button, { ButtonType } from '@src/components/Button';\nimport Placeholder from '@src/components/Placeholder';\nimport FormRow, { RowType } from '@src/components/forms/FormRow';\nimport {\n  FormRowDef,\n  calculateNumFormChanges,\n  isFormValid,\n} from '@src/components/forms/formData';\nimport {\n  validateARIOAmount,\n  validateDomainName,\n  validateNumberRange,\n  validateString,\n  validateTransactionId,\n  validateWalletAddress,\n} from '@src/components/forms/validation';\nimport { EditIcon } from '@src/components/icons';\nimport BlockingMessageModal from '@src/components/modals/BlockingMessageModal';\nimport SuccessModal from '@src/components/modals/SuccessModal';\nimport { WRITE_OPTIONS, log } from '@src/constants';\nimport useEpochSettings from '@src/hooks/useEpochSettings';\nimport useGateway from '@src/hooks/useGateway';\nimport useObserverBalances from '@src/hooks/useObserverBalances';\nimport { useGlobalState } from '@src/store';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { TriangleAlertIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ActiveDelegates from './ActiveDelegates';\nimport GatewayHeader from './GatewayHeader';\nimport OperatorStake from './OperatorStake';\nimport PendingWithdrawals from './PendingWIthdrawals';\nimport PropertyDisplayPanel from './PropertyDisplayPanel';\nimport SnitchRow from './SnitchRow';\nimport SoftwareDetails from './SoftwareDetails';\nimport StatsPanel from './StatsPanel';\n\nconst Gateway = () => {\n  const queryClient = useQueryClient();\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const params = useParams();\n\n  const ownerId = params?.ownerId;\n  const isOwnGateway = ownerId === walletAddress?.toString();\n\n  const { data: gateway } = useGateway({\n    ownerWalletAddress: ownerId || undefined,\n  });\n\n  const { data: epochSettings } = useEpochSettings();\n\n  const [editing, setEditing] = useState(false);\n\n  const [initialState, setInitialState] = useState<\n    Record<string, string | boolean>\n  >({});\n  const [formState, setFormState] = useState<Record<string, string | boolean>>(\n    {},\n  );\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  // Check observer balances for low balance warnings\n  const { data: observerBalances } = useObserverBalances(\n    gateway?.observerAddress,\n  );\n\n  const hasLowBalance =\n    observerBalances &&\n    observerBalances.ar < 0.01 &&\n    observerBalances.turboCredits < 0.01;\n\n  const delegatedStakingEnabled = formState.allowDelegatedStaking == true;\n\n  const weightFields: Array<[string, number | undefined]> = [\n    ['Stake', gateway?.weights?.stakeWeight],\n    ['Tenure', gateway?.weights?.tenureWeight],\n    // there will be a period where old epoch notices have the old field, and new epoch notices have the new field, so check both\n    [\n      'Gateway Performance Ratio',\n      gateway?.weights?.gatewayPerformanceRatio ??\n        gateway?.weights?.gatewayRewardRatioWeight,\n    ],\n    [\n      'Observer Performance Ratio',\n      gateway?.weights?.observerPerformanceRatio ??\n        gateway?.weights?.observerRewardRatioWeight,\n    ],\n    ['Composite', gateway?.weights?.compositeWeight],\n    ['Normalized', gateway?.weights?.normalizedCompositeWeight],\n  ];\n\n  useEffect(() => {\n    setInitialState((currentState) => {\n      return {\n        ...currentState,\n        observerAddress: walletAddress?.toString() ?? '',\n      };\n    });\n    setFormState((currentState) => {\n      return {\n        ...currentState,\n        observerAddress: walletAddress?.toString() ?? '',\n      };\n    });\n  }, [walletAddress]);\n\n  // This updates the form when the user toggles the delegated staking switch to false to reset the\n  // form values and error messages back to the initial state.\n  useEffect(() => {\n    if (formState.allowDelegatedStaking == false) {\n      const updatedState: Record<string, string | boolean> = {};\n\n      if (\n        formState.delegateRewardShareRatio !==\n        initialState.delegateRewardShareRatio\n      ) {\n        updatedState.delegateRewardShareRatio =\n          initialState.delegateRewardShareRatio;\n      }\n      if (formState.minDelegatedStake !== initialState.minDelegatedStake) {\n        updatedState.minDelegatedStake = initialState.minDelegatedStake;\n      }\n\n      if (Object.keys(updatedState).length > 0) {\n        const updatedErrors = { ...formErrors };\n        Object.keys(updatedState).forEach((key) => {\n          delete updatedErrors[key];\n        });\n        setFormErrors(updatedErrors);\n\n        setFormState((currentState) => {\n          return {\n            ...currentState,\n            ...updatedState,\n          };\n        });\n      }\n    }\n  }, [initialState, formState, formErrors]);\n\n  const formRowDefs: FormRowDef[] = [\n    {\n      formPropertyName: 'label',\n      label: 'Label:',\n      rowType: RowType.TOP,\n      validateProperty: validateString('Label', 1, 64),\n    },\n    {\n      formPropertyName: 'fqdn',\n      label: 'Address:',\n      rowType: RowType.BOTTOM,\n      leftComponent: <div className=\"pl-6 text-xs text-low\">https://</div>,\n      rightComponent: <div className=\"pr-6 text-xs text-low\">:443</div>,\n      validateProperty: validateDomainName('Address'),\n    },\n    {\n      formPropertyName: 'ownerId',\n      label: 'Owner Wallet:',\n      rowType: RowType.SINGLE,\n      readOnly: true,\n    },\n    {\n      formPropertyName: 'observerAddress',\n      label: 'Observer Wallet:',\n      rowType: RowType.TOP,\n      validateProperty: validateWalletAddress('Observer Wallet'),\n    },\n    {\n      formPropertyName: 'properties',\n      label: 'Properties ID:',\n      rowType: RowType.MIDDLE,\n      validateProperty: validateTransactionId('Properties ID'),\n    },\n    {\n      formPropertyName: 'status',\n      label: 'Status:',\n      rowType: RowType.SINGLE,\n      readOnly: true,\n    },\n    {\n      formPropertyName: 'note',\n      label: 'Note:',\n      rowType: RowType.SINGLE,\n      validateProperty: validateString('Note', 1, 256),\n    },\n    {\n      formPropertyName: 'autoStake',\n      label: 'Reward Auto Stake:',\n      rowType: RowType.SINGLE,\n    },\n    {\n      formPropertyName: 'allowDelegatedStaking',\n      label: 'Delegated Staking:',\n      rowType: RowType.SINGLE,\n    },\n    {\n      formPropertyName: 'delegateRewardShareRatio',\n      label: 'Reward Share Ratio:',\n      rowType: RowType.TOP,\n      enabled: delegatedStakingEnabled,\n      placeholder: delegatedStakingEnabled\n        ? 'Enter value 0-95'\n        : 'Enable Delegated Staking to set this value.',\n      validateProperty: validateNumberRange('Reward Share Ratio', 0, 95),\n    },\n    {\n      formPropertyName: 'minDelegatedStake',\n      label: `Minimum Delegated Stake (${ticker}):`,\n      rowType: RowType.LAST,\n      enabled: delegatedStakingEnabled,\n      placeholder: delegatedStakingEnabled\n        ? `Minimum 10 ${ticker}`\n        : 'Enable Delegated Staking to set this value.',\n      validateProperty: validateARIOAmount(\n        'Minumum Delegated Stake',\n        ticker,\n        10,\n      ),\n    },\n  ];\n\n  const startEditing = () => {\n    if (!gateway) return;\n\n    const initialState = {\n      label: gateway.settings.label || '',\n      fqdn: gateway.settings.fqdn || '',\n      ownerId: ownerId || '',\n      observerAddress: gateway.observerAddress || '',\n      properties: gateway.settings.properties || '',\n      status: gateway.status || '',\n      note: gateway.settings.note || '',\n      autoStake: gateway.settings.autoStake || false,\n      allowDelegatedStaking: gateway?.settings.allowDelegatedStaking || false,\n      delegateRewardShareRatio:\n        (gateway.settings.delegateRewardShareRatio || 0) + '',\n      minDelegatedStake:\n        new mARIOToken(gateway.settings.minDelegatedStake || 0)\n          .toARIO()\n          .valueOf() + '',\n    };\n    setInitialState(initialState);\n    setFormState(initialState);\n    setEditing(true);\n  };\n\n  const numFormChanges = calculateNumFormChanges({ initialState, formState });\n\n  const submitForm = async () => {\n    if (\n      walletAddress &&\n      arIOWriteableSDK &&\n      isFormValid({ formRowDefs, formValues: formState })\n    ) {\n      // saveGatewayChanges();\n\n      const changed = Object.keys(formState).reduce(\n        (acc, key) => {\n          return formState[key] !== initialState[key]\n            ? { ...acc, [key]: formState[key] }\n            : acc;\n        },\n        {} as Record<string, string | number | boolean>,\n      );\n\n      const updateGatewaySettingsParams: AoUpdateGatewaySettingsParams = {\n        allowDelegatedStaking: changed.allowDelegatedStaking as boolean,\n        delegateRewardShareRatio:\n          formState.allowDelegatedStaking && changed.delegateRewardShareRatio\n            ? parseFloat(changed.delegateRewardShareRatio as string)\n            : undefined,\n        fqdn: changed.fqdn as string,\n        label: changed.label as string,\n        minDelegatedStake:\n          formState.allowDelegatedStaking && changed.minDelegatedStake\n            ? new ARIOToken(parseFloat(changed.minDelegatedStake as string))\n                .toMARIO()\n                .valueOf()\n            : undefined,\n        note: changed.note as string,\n        properties: changed.properties as string,\n        autoStake: changed.autoStake as boolean,\n        observerAddress: changed.observerAddress as string,\n      };\n\n      setShowBlockingMessageModal(true);\n\n      try {\n        if (\n          Object.values(updateGatewaySettingsParams).some(\n            (v) => v !== undefined,\n          )\n        ) {\n          const { id: txID } = await arIOWriteableSDK.updateGatewaySettings(\n            updateGatewaySettingsParams,\n            WRITE_OPTIONS,\n          );\n          log.info(`Update Gateway Settings txID: ${txID}`);\n        }\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex h-full flex-col gap-6\">\n      <div className=\"shrink-0\">\n        <GatewayHeader gateway={gateway} />\n      </div>\n\n      <div className=\"flex flex-1 flex-col gap-6 overflow-y-auto pb-6 scrollbar\">\n        {/* Low Balance Warning Banner */}\n        {isOwnGateway && hasLowBalance && (\n          <div className=\"rounded-lg border border-warning/30 bg-warning/10 p-4 text-warning\">\n            <div className=\"flex items-center gap-2 font-medium\">\n              <TriangleAlertIcon className=\"size-5\" />\n              Low Balance Warning\n            </div>\n            <div className=\"mt-1 text-sm\">\n              <ul>\n                <li>\n                  Observer AR and Turbo Credit balance is low. Please add more\n                  AR or Turbo Credits to the observer wallet.\n                </li>\n              </ul>\n            </div>\n          </div>\n        )}\n        <div className=\"flex flex-col gap-6\">\n          <OperatorStake\n            gateway={gateway}\n            walletAddress={walletAddress?.toString()}\n          />\n          <PendingWithdrawals\n            gateway={gateway}\n            walletAddress={walletAddress?.toString()}\n          />\n          <ActiveDelegates gateway={gateway} />\n\n          <div className=\"flex flex-col gap-6 lg:flex-row\">\n            <div className=\"flex min-w-72 flex-col gap-6\">\n              <StatsPanel gateway={gateway} />\n              {gateway?.weights && gateway?.status === 'joined' && (\n                <div className=\"w-full rounded-xl border border-transparent-100-16 text-sm\">\n                  <div className=\"bg-containerL3 px-6 py-4\">\n                    <div className=\"text-high\">Weights</div>\n                  </div>\n\n                  {weightFields.map(([title, value], index) => (\n                    <div\n                      key={`weights${index}`}\n                      className=\"flex items-center gap-4 border-t border-transparent-100-16 px-6 py-4\"\n                    >\n                      <div className=\"grow text-nowrap text-xs text-low\">\n                        {title}:\n                      </div>\n                      <div className=\"text-right text-sm\">\n                        {value !== undefined ? (\n                          value.toFixed(3)\n                        ) : (\n                          <Placeholder className=\"w-10\" />\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n              {gateway?.status === 'joined' && (\n                <SoftwareDetails gateway={gateway} />\n              )}\n            </div>\n            <div className=\"flex w-full grow flex-col gap-6\">\n              <div className=\"h-fit w-full overflow-hidden rounded-xl border border-transparent-100-16\">\n                <div className=\"flex items-center bg-containerL3 py-4 pl-6 pr-3\">\n                  <div className=\"text-sm text-high\">General Information</div>\n                  <div className=\"flex grow gap-6\" />\n                  {isOwnGateway &&\n                    (editing ? (\n                      <>\n                        <div className=\"flex\">\n                          <Button\n                            className=\"h-[1.875rem]\"\n                            title=\"Cancel\"\n                            text=\"Cancel\"\n                            buttonType={ButtonType.SECONDARY}\n                            onClick={() => setEditing(false)}\n                          />\n                        </div>\n                        {!isFormValid({\n                          formRowDefs,\n                          formValues: formState,\n                        }) ? (\n                          <div className=\"pl-6 text-sm text-red-600\">\n                            Invalid Entry\n                          </div>\n                        ) : numFormChanges > 0 ? (\n                          <Button\n                            className=\"last:text-gradient h-[1.875rem]\"\n                            title={`Save ${numFormChanges} changes`}\n                            text={`Save ${numFormChanges} changes`}\n                            buttonType={ButtonType.SECONDARY}\n                            onClick={submitForm}\n                          />\n                        ) : (\n                          <></>\n                        )}\n                      </>\n                    ) : (\n                      gateway?.status == 'joined' && (\n                        <Button\n                          className=\"h-[1.875rem]\"\n                          title=\"Edit\"\n                          text=\"Edit\"\n                          icon={<EditIcon className=\"size-3\" />}\n                          active={true}\n                          onClick={startEditing}\n                        />\n                      )\n                    ))}\n                </div>\n                {editing ? (\n                  <div className=\" grid grid-cols-[14.375rem_auto] overflow-hidden border-t border-grey-500\">\n                    {formRowDefs.map((rowDef, index) => {\n                      return (\n                        <FormRow\n                          key={index}\n                          initialState={initialState}\n                          formState={formState}\n                          setFormState={setFormState}\n                          errorMessages={formErrors}\n                          setErrorMessages={setFormErrors}\n                          {...rowDef}\n                        />\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <PropertyDisplayPanel ownerId={ownerId} gateway={gateway} />\n                )}\n              </div>\n\n              {epochSettings?.hasEpochZeroStarted && (\n                <SnitchRow gateway={gateway} />\n              )}\n            </div>\n          </div>\n          {showBlockingMessageModal && (\n            <BlockingMessageModal\n              onClose={() => setShowBlockingMessageModal(false)}\n              message=\"Sign the following data with your wallet to proceed.\"\n            ></BlockingMessageModal>\n          )}\n          {showSuccessModal && (\n            <SuccessModal\n              onClose={() => {\n                setShowSuccessModal(false);\n                setEditing(false);\n              }}\n              title=\"Congratulations\"\n              bodyText=\"You have successfully updated your gateway.\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gateway;\n"],"names":["SvgEditIcon","props","reactExports","SvgStatsArrow","CircleCheckBig","createLucideIcon","CirclePlus","CircleX","Minus","TriangleAlert","TURBO_API_URL","useObserverBalances","observerAddress","arweave","useGlobalState","state","blockHeight","useQuery","winstonBalance","arBalance","AR","response","data","turboCredits","error","useGatewayDelegateStakes","address","arIOReadSDK","cursor","results","pageResult","delegate","CollapsiblePanel","title","children","titleRight","isOpen","setIsOpen","jsxRuntimeExports","columnHelper$1","createColumnHelper","ActiveDelegates","gateway","ticker","isLoading","gatewayDelegateStakes","tableData","setTableData","totalDelegatedStake","stake","totalStake","RP","percentageOfTotalStake","columns","row","AddressCell","formatWithCommas","formatPercentage","Placeholder","TableView","GatewayHeader","params","useParams","ownerId","currentEpoch","isObserverThisEpoch","observer","Link","ChevronRight","Profile","SvgGateway","NotebookText","SvgBinoculars","OperatorStakingModal$1","onClose","walletAddress","balances","useBalances","protocolBalance","useProtocolBalance","gateways","useGateways","currentStake","setCurrentStake","amountToStake","setAmountToStake","showReviewStakeModal","setShowReviewStakeModal","EAY","setEAY","newTotalStake","minDelegatedStake","minRequiredStakeToAdd","validators","validateARIOAmount","isFormValid","newTotalStake2","EAY2","calculateOperatorRewards","g","AP","parsedStake","remainingBalance","setMaxAmount","disableInput","errorMessages","BaseModal","LabelValueRow","formatAddress","e","textValue","ErrorMessageIcon","Button","ButtonType","Tooltip","EAY_TOOLTIP_TEXT","MathJax","EAY_TOOLTIP_FORMULA","SvgInfoIcon","ReviewStakeModal","OperatorStakingModal","amountToWithdraw","setAmountToWithdraw","withdrawalType","setWithdrawalType","showReviewWithdrawalModal","setShowReviewWithdrawalModal","withdrawalFee","returningAmount","validateOperatorWithdrawAmount","parsedWithdrawing","remainingWithdrawalBalance","Rt","v","Ve","Circle","CircleCheck","Q","ReviewWithdrawalModal","OperatorStake","isStakingModalOpen","setIsStakingModalOpen","isWithdrawalModalOpen","setIsWithdrawalModalOpen","eay","showRedelegateModal","setShowRedelegateModal","gatewayRegistrySettings","useGatewayRegistrySettings","minOperatorStake","rewards","Root2","Trigger","SvgThreeDotsIcon","Content2","Item2","OPERATOR_EAY_TOOLTIP_FORMULA","Info","RedelegateModal","useGatewayVaults","columnHelper","PendingWithdrawals","gatewayVaults","confirmCancelWithdrawal","setConfirmCancelWithdrawal","confirmInstantWithdrawal","setConfirmInstantWithdrawal","formatDateTime","a","b","CancelWithdrawalModal","InstantWithdrawalModal","LeaveNetworkModal","queryClient","useQueryClient","arIOWriteableSDK","showBlockingMessageModal","setShowBlockingMessageModal","showSuccessModal","setShowSuccessModal","txid","setTxid","leaveNetworkText","setLeaveNetworkText","termsAccepted","processLeaveNetwork","txID","WRITE_OPTIONS","showErrorToast","BlockingMessageModal","SuccessModal","SvgLinkArrow","DisplayRow","label","value","type","rightComponent","getBlockExplorerUrlForAddress","PropertyDisplayPanel","isOwnGateway","stakingModalWalletAddress","setStakingModalWalletAddress","isConnectModalOpen","setIsConnectModalOpen","isLeaveNetworkModalOpen","setLeaveNetworkModalOpen","gatewayAddress","gatewayLeaving","conditionalRows","gatewayRows","index","StakingModal","ConnectModal","useObserverToGatewayMap","observerToGatewayMap","setObserverToGatewayMap","ReportedOnByCard","epochs","useEpochs","selectedEpochIndex","setSelectedEpochIndex","failureObservers","setFailureObservers","totalReportsForEpoch","setTotalReportsForEpoch","navigate","useNavigate","selectedEpoch","_a","_b","entries","observerId","Dropdown","epoch","entry","ReportedOnCard","snitchedOn","setSnitchedOn","reportId","setReportId","selectedForObservation","setSelectedForObservation","obs","snitchedOn2","acc","reportedBy","SnitchRow","useGatewayArioInfo","url","arioInfoEndpoint","ky","ValueRow","StatsBox","i","SoftwareDetails","bundlers","setBundlers","arioInfoRes","bundlers2","service","useHealthcheck","healthCheckEndpoint","responseJson","formatUptime","uptime","days","hours","minutes","seconds","StatsPanel","healthCheckRes","streak","Streak","Gateway","useGateway","epochSettings","useEpochSettings","editing","setEditing","initialState","setInitialState","formState","setFormState","formErrors","setFormErrors","observerBalances","hasLowBalance","delegatedStakingEnabled","weightFields","_c","_d","_e","_f","_g","_h","currentState","updatedState","updatedErrors","key","formRowDefs","RowType","validateString","validateDomainName","validateWalletAddress","validateTransactionId","validateNumberRange","startEditing","initialState2","numFormChanges","calculateNumFormChanges","submitForm","changed","updateGatewaySettingsParams","log","rowDef","FormRow"],"mappings":"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","x_google_ignoreList":[2,3,4,5,6]}