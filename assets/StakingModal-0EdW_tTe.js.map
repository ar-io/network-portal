{"version":3,"file":"StakingModal-0EdW_tTe.js","sources":["../../node_modules/better-react-mathjax/esm/MathJax/MathJax.js","../../src/components/icons/info_icon.svg?react","../../src/components/icons/warning_triangle.svg?react","../../node_modules/@headlessui/react/dist/hooks/use-by-comparator.js","../../node_modules/@headlessui/react/dist/components/radio-group/radio-group.js","../../node_modules/lucide-react/dist/esm/icons/circle-check.js","../../node_modules/lucide-react/dist/esm/icons/circle.js","../../src/utils/rewards.ts","../../src/components/modals/WithdrawWarning.tsx","../../src/components/modals/ReviewStakeModal.tsx","../../src/components/modals/ReviewWithdrawalModal.tsx","../../src/hooks/useRedelegationFee.ts","../../src/components/GatewaySelector.tsx","../../src/components/modals/ReviewRedelegateModal.tsx","../../src/components/modals/RedelegateModal.tsx","../../src/components/modals/CancelWithdrawalModal.tsx","../../src/utils/stake.ts","../../src/components/modals/InstantWithdrawalModal.tsx","../../src/hooks/useRewardsInfo.ts","../../src/components/modals/StakingModal.tsx"],"sourcesContent":["var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(t,e){var n={};for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&\"function\"==typeof Object.getOwnPropertySymbols)for(var r=0,i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]]);return n};import React,{useContext,useEffect,useLayoutEffect,useRef}from\"react\";import{MathJaxBaseContext}from\"../MathJaxContext\";var typesettingFailed=function(t){return\"Typesetting failed: \".concat(void 0!==t.message?t.message:t.toString())},MathJax=function(t){function r(){var t;\"every\"===h&&m&&\"post\"===v&&null!==f.current&&(f.current.style.visibility=null!=(t=null==(t=p.style)?void 0:t.visibility)?t:\"visible\"),_.current||(\"first\"===h&&null!==f.current&&(f.current.style.visibility=\"visible\"),n&&n(),_.current=!0),o&&o(),b.current=!1}var e=t.inline,i=void 0!==e&&e,e=t.hideUntilTypeset,n=t.onInitTypeset,o=t.onTypeset,s=t.text,u=t.dynamic,a=t.typesettingOptions,l=t.renderMode,c=t.children,p=__rest(t,[\"inline\",\"hideUntilTypeset\",\"onInitTypeset\",\"onTypeset\",\"text\",\"dynamic\",\"typesettingOptions\",\"renderMode\",\"children\"]),y=useRef(\"\"),f=useRef(null),d=useContext(MathJaxBaseContext),h=null!=e?e:null==d?void 0:d.hideUntilTypeset,v=null!=l?l:null==d?void 0:d.renderMode,g=null!=a?a:null==d?void 0:d.typesettingOptions,m=!1!==u&&(u||\"production\"!==process.env.NODE_ENV),_=useRef(!1),b=useRef(!1);return!b.current&&null!==f.current&&m&&\"every\"===h&&\"post\"===v&&(f.current.style.visibility=\"hidden\"),(\"undefined\"!=typeof window?useLayoutEffect:useEffect)(function(){if((m||!_.current)&&null!==f.current){if(!d)throw Error(\"MathJax was not loaded, did you use the MathJax component outside of a MathJaxContext?\");if(\"pre\"===v){if(!(\"string\"==typeof(t=s)&&0<t.length))throw Error(\"Render mode 'pre' requires text prop to be set and non-empty, which was currently \\\"\".concat(s,'\"'));if(!a||!a.fn)throw Error(\"Render mode 'pre' requires 'typesettingOptions' prop with 'fn' property to be set on MathJax element or in the MathJaxContext\");if(2===d.version)throw Error(\"Render mode 'pre' only available with MathJax 3, and version 2 is currently in use\")}\"post\"!==v&&s===y.current||b.current||(b.current=!0,3===d.version?d.promise.then(function(e){var n;\"pre\"===v?(n=function(t){y.current=s,e.startup.document.clear(),e.startup.document.updateDocument(),null!==f.current&&(f.current.innerHTML=t.outerHTML),r()},a.fn.endsWith(\"Promise\")?e.startup.promise.then(function(){return e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}))}).then(n).catch(function(t){throw r(),Error(typesettingFailed(t))}):e.startup.promise.then(function(){var t=e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}));n(t)}).catch(function(t){throw r(),Error(typesettingFailed(t))})):e.startup.promise.then(function(){return e.typesetClear([f.current]),e.typesetPromise([f.current])}).then(r).catch(function(t){throw r(),Error(typesettingFailed(t))})}).catch(function(t){throw r(),Error(typesettingFailed(t))}):d.promise.then(function(t){t.Hub.Queue([\"Typeset\",t.Hub,f.current]),t.Hub.Queue(r)}).catch(function(t){throw r(),Error(typesettingFailed(t))}))}var t}),React.createElement(\"span\",__assign({},p,{style:__assign(__assign({display:i?\"inline\":\"block\"},p.style),{visibility:h?\"hidden\":null==(t=p.style)?void 0:t.visibility}),ref:f}),c)};export default MathJax;","import * as React from \"react\";\nconst SvgInfoIcon = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 16, height: 16, viewBox: \"0 0 16 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Frame\", clipPath: \"url(#clip0_2391_9440)\" }, /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector\", d: \"M8.00016 14.6663C11.6821 14.6663 14.6668 11.6816 14.6668 7.99967C14.6668 4.31778 11.6821 1.33301 8.00016 1.33301C4.31826 1.33301 1.3335 4.31778 1.3335 7.99967C1.3335 11.6816 4.31826 14.6663 8.00016 14.6663Z\", stroke: \"#7F7F87\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_2\", d: \"M8 10.6667V8\", stroke: \"#7F7F87\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector_3\", d: \"M8 5.33301H8.00667\", stroke: \"#7F7F87\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"clipPath\", { id: \"clip0_2391_9440\" }, /* @__PURE__ */ React.createElement(\"rect\", { width: 16, height: 16, fill: \"white\" }))));\nexport default SvgInfoIcon;\n","import * as React from \"react\";\nconst SvgWarningTriangle = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M10.4781 2.39428C10.9366 2.1271 11.4578 1.98633 11.9885 1.98633C12.5191 1.98633 13.0403 2.1271 13.4989 2.39428C13.9568 2.66112 14.3359 3.04451 14.5975 3.50542C14.5978 3.50601 14.5981 3.50659 14.5985 3.50717L22.5945 17.5002C22.5948 17.5008 22.5951 17.5013 22.5955 17.5019C22.858 17.9573 22.9963 18.4738 22.9964 18.9995C22.9965 19.5258 22.8582 20.0429 22.5953 20.4989C22.3323 20.9549 21.954 21.3336 21.4984 21.5971C21.0428 21.8607 20.5258 21.9997 19.9995 22.0002H4.00257C3.47536 22.0041 2.95641 21.869 2.49801 21.6084C2.03819 21.3471 1.65564 20.9688 1.38913 20.5119C1.12263 20.0551 0.981647 19.5359 0.980476 19.0069C0.979307 18.4789 1.11755 17.9598 1.38123 17.5023C1.38164 17.5016 1.38205 17.5009 1.38246 17.5002L9.37846 3.50717C9.3788 3.50659 9.37913 3.50601 9.37946 3.50542C9.64108 3.04451 10.0201 2.66112 10.4781 2.39428ZM11.9885 3.98633C11.8116 3.98633 11.6378 4.03325 11.485 4.12231C11.3322 4.21137 11.2057 4.33938 11.1185 4.49328L11.1167 4.49636L3.11448 18.5003C3.02632 18.653 2.98008 18.8262 2.98047 19.0025C2.98086 19.1788 3.02786 19.3519 3.11669 19.5042C3.20552 19.6565 3.33304 19.7826 3.48631 19.8697C3.63959 19.9568 3.81317 20.0019 3.98947 20.0003L3.99846 20.0002L19.9974 20.0002C20.1729 20 20.3452 19.9537 20.4971 19.8659C20.649 19.778 20.775 19.6518 20.8627 19.4998C20.9503 19.3478 20.9965 19.1754 20.9964 19C20.9964 18.8245 20.9502 18.6522 20.8624 18.5002L20.8602 18.4964L12.8602 4.49636L12.8585 4.49328C12.7712 4.33938 12.6448 4.21137 12.4919 4.12231C12.3391 4.03325 12.1654 3.98633 11.9885 3.98633ZM11.9985 8.00022C12.5507 8.00022 12.9985 8.44794 12.9985 9.00022V13.0002C12.9985 13.5525 12.5507 14.0002 11.9985 14.0002C11.4462 14.0002 10.9985 13.5525 10.9985 13.0002V9.00022C10.9985 8.44794 11.4462 8.00022 11.9985 8.00022ZM10.9985 17.0002C10.9985 16.4479 11.4462 16.0002 11.9985 16.0002H12.0085C12.5608 16.0002 13.0085 16.4479 13.0085 17.0002C13.0085 17.5525 12.5608 18.0002 12.0085 18.0002H11.9985C11.4462 18.0002 10.9985 17.5525 10.9985 17.0002Z\", fill: \"url(#paint0_linear_3023_6650)\" }), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint0_linear_3023_6650\", x1: 0.980469, y1: 22.0003, x2: 23.87, y2: 20.9457, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#FFB4B4\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#FF6C6C\" }))));\nexport default SvgWarningTriangle;\n","import{useCallback as n}from\"react\";function l(e,r){return e!==null&&r!==null&&typeof e==\"object\"&&typeof r==\"object\"&&\"id\"in e&&\"id\"in r?e.id===r.id:e===r}function u(e=l){return n((r,t)=>{if(typeof e==\"string\"){let o=e;return(r==null?void 0:r[o])===(t==null?void 0:t[o])}return e(r,t)},[e])}export{u as useByComparator};\n","\"use client\";import{useFocusRing as Y}from\"@react-aria/focus\";import{useHover as Z}from\"@react-aria/interactions\";import G,{createContext as ee,useCallback as ye,useContext as te,useMemo as x,useReducer as be,useRef as B}from\"react\";import{useByComparator as ge}from'../../hooks/use-by-comparator.js';import{useControllable as Oe}from'../../hooks/use-controllable.js';import{useDefaultValue as Pe}from'../../hooks/use-default-value.js';import{useEvent as H}from'../../hooks/use-event.js';import{useId as V}from'../../hooks/use-id.js';import{useIsoMorphicEffect as oe}from'../../hooks/use-iso-morphic-effect.js';import{useLatestValue as re}from'../../hooks/use-latest-value.js';import{useSyncRefs as K}from'../../hooks/use-sync-refs.js';import{useDisabled as ne}from'../../internal/disabled.js';import{FormFields as ve}from'../../internal/form-fields.js';import{useProvidedId as De}from'../../internal/id.js';import{isDisabledReactIssue7711 as ie}from'../../utils/bugs.js';import{Focus as N,FocusResult as ae,focusIn as pe,sortByDomNode as Ae}from'../../utils/focus-management.js';import{attemptSubmit as _e}from'../../utils/form.js';import{match as Ee}from'../../utils/match.js';import{getOwnerDocument as Ge}from'../../utils/owner.js';import{forwardRefWithAs as $,mergeProps as le,useRender as j}from'../../utils/render.js';import{Description as xe,useDescribedBy as Ce,useDescriptions as se}from'../description/description.js';import{Keys as F}from'../keyboard.js';import{Label as he,useLabelledBy as Le,useLabels as de}from'../label/label.js';var ke=(e=>(e[e.RegisterOption=0]=\"RegisterOption\",e[e.UnregisterOption=1]=\"UnregisterOption\",e))(ke||{});let Fe={[0](o,t){let e=[...o.options,{id:t.id,element:t.element,propsRef:t.propsRef}];return{...o,options:Ae(e,a=>a.element.current)}},[1](o,t){let e=o.options.slice(),a=o.options.findIndex(g=>g.id===t.id);return a===-1?o:(e.splice(a,1),{...o,options:e})}},J=ee(null);J.displayName=\"RadioGroupDataContext\";function X(o){let t=te(J);if(t===null){let e=new Error(`<${o} /> is missing a parent <RadioGroup /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(e,X),e}return t}let z=ee(null);z.displayName=\"RadioGroupActionsContext\";function q(o){let t=te(z);if(t===null){let e=new Error(`<${o} /> is missing a parent <RadioGroup /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(e,q),e}return t}function Ie(o,t){return Ee(t.type,Fe,o,t)}let Ue=\"div\";function Me(o,t){let e=V(),a=ne(),{id:g=`headlessui-radiogroup-${e}`,value:R,form:O,name:n,onChange:f,by:c,disabled:p=a||!1,defaultValue:I,...m}=o,T=ge(c),[P,C]=be(Ie,{options:[]}),i=P.options,[U,h]=de(),[v,L]=se(),D=B(null),M=K(D,t),l=Pe(I),[s,A]=Oe(R,f,l),S=x(()=>i.find(r=>!r.propsRef.current.disabled),[i]),y=x(()=>i.some(r=>T(r.propsRef.current.value,s)),[i,s]),d=H(r=>{var u;if(p||T(r,s))return!1;let k=(u=i.find(w=>T(w.propsRef.current.value,r)))==null?void 0:u.propsRef.current;return k!=null&&k.disabled?!1:(A==null||A(r),!0)}),_=H(r=>{let k=D.current;if(!k)return;let u=Ge(k),w=i.filter(b=>b.propsRef.current.disabled===!1).map(b=>b.element.current);switch(r.key){case F.Enter:_e(r.currentTarget);break;case F.ArrowLeft:case F.ArrowUp:if(r.preventDefault(),r.stopPropagation(),pe(w,N.Previous|N.WrapAround)===ae.Success){let E=i.find(W=>W.element.current===(u==null?void 0:u.activeElement));E&&d(E.propsRef.current.value)}break;case F.ArrowRight:case F.ArrowDown:if(r.preventDefault(),r.stopPropagation(),pe(w,N.Next|N.WrapAround)===ae.Success){let E=i.find(W=>W.element.current===(u==null?void 0:u.activeElement));E&&d(E.propsRef.current.value)}break;case F.Space:{r.preventDefault(),r.stopPropagation();let b=i.find(E=>E.element.current===(u==null?void 0:u.activeElement));b&&d(b.propsRef.current.value)}break}}),Q=H(r=>(C({type:0,...r}),()=>C({type:1,id:r.id}))),ue=x(()=>({value:s,firstOption:S,containsCheckedOption:y,disabled:p,compare:T,...P}),[s,S,y,p,T,P]),ce=x(()=>({registerOption:Q,change:d}),[Q,d]),fe={ref:M,id:g,role:\"radiogroup\",\"aria-labelledby\":U,\"aria-describedby\":v,onKeyDown:_},Te=x(()=>({value:s}),[s]),Re=ye(()=>{if(l!==void 0)return d(l)},[d,l]),me=j();return G.createElement(L,{name:\"RadioGroup.Description\"},G.createElement(h,{name:\"RadioGroup.Label\"},G.createElement(z.Provider,{value:ce},G.createElement(J.Provider,{value:ue},n!=null&&G.createElement(ve,{disabled:p,data:{[n]:s||\"on\"},overrides:{type:\"radio\",checked:s!=null},form:O,onReset:Re}),me({ourProps:fe,theirProps:m,slot:Te,defaultTag:Ue,name:\"RadioGroup\"})))))}let Se=\"div\";function He(o,t){var y;let e=X(\"RadioGroup.Option\"),a=q(\"RadioGroup.Option\"),g=V(),{id:R=`headlessui-radiogroup-option-${g}`,value:O,disabled:n=e.disabled||!1,autoFocus:f=!1,...c}=o,p=B(null),I=K(p,t),[m,T]=de(),[P,C]=se(),i=re({value:O,disabled:n});oe(()=>a.registerOption({id:R,element:p,propsRef:i}),[R,a,p,i]);let U=H(d=>{var _;if(ie(d.currentTarget))return d.preventDefault();a.change(O)&&((_=p.current)==null||_.focus())}),h=((y=e.firstOption)==null?void 0:y.id)===R,{isFocusVisible:v,focusProps:L}=Y({autoFocus:f}),{isHovered:D,hoverProps:M}=Z({isDisabled:n}),l=e.compare(e.value,O),s=le({ref:I,id:R,role:\"radio\",\"aria-checked\":l?\"true\":\"false\",\"aria-labelledby\":m,\"aria-describedby\":P,\"aria-disabled\":n?!0:void 0,tabIndex:(()=>n?-1:l||!e.containsCheckedOption&&h?0:-1)(),onClick:n?void 0:U,autoFocus:f},L,M),A=x(()=>({checked:l,disabled:n,active:v,hover:D,focus:v,autofocus:f}),[l,n,D,v,f]),S=j();return G.createElement(C,{name:\"RadioGroup.Description\"},G.createElement(T,{name:\"RadioGroup.Label\"},S({ourProps:s,theirProps:c,slot:A,defaultTag:Se,name:\"RadioGroup.Option\"})))}let we=\"span\";function Ne(o,t){var y;let e=X(\"Radio\"),a=q(\"Radio\"),g=V(),R=De(),O=ne(),{id:n=R||`headlessui-radio-${g}`,value:f,disabled:c=e.disabled||O||!1,autoFocus:p=!1,...I}=o,m=B(null),T=K(m,t),P=Le(),C=Ce(),i=re({value:f,disabled:c});oe(()=>a.registerOption({id:n,element:m,propsRef:i}),[n,a,m,i]);let U=H(d=>{var _;if(ie(d.currentTarget))return d.preventDefault();a.change(f)&&((_=m.current)==null||_.focus())}),{isFocusVisible:h,focusProps:v}=Y({autoFocus:p}),{isHovered:L,hoverProps:D}=Z({isDisabled:c}),M=((y=e.firstOption)==null?void 0:y.id)===n,l=e.compare(e.value,f),s=le({ref:T,id:n,role:\"radio\",\"aria-checked\":l?\"true\":\"false\",\"aria-labelledby\":P,\"aria-describedby\":C,\"aria-disabled\":c?!0:void 0,tabIndex:(()=>c?-1:l||!e.containsCheckedOption&&M?0:-1)(),autoFocus:p,onClick:c?void 0:U},v,D),A=x(()=>({checked:l,disabled:c,hover:L,focus:h,autofocus:p}),[l,c,L,h,p]);return j()({ourProps:s,theirProps:I,slot:A,defaultTag:we,name:\"Radio\"})}let We=$(Me),Be=$(He),Ve=$(Ne),Ke=he,$e=xe,Rt=Object.assign(We,{Option:Be,Radio:Ve,Label:Ke,Description:$e});export{Ve as Radio,Rt as RadioGroup,$e as RadioGroupDescription,Ke as RadioGroupLabel,Be as RadioGroupOption};\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleCheck = createLucideIcon(\"CircleCheck\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m9 12 2 2 4-4\", key: \"dzmm74\" }]\n]);\n\nexport { CircleCheck as default };\n//# sourceMappingURL=circle-check.js.map\n","/**\n * @license lucide-react v0.461.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Circle = createLucideIcon(\"Circle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }]\n]);\n\nexport { Circle as default };\n//# sourceMappingURL=circle.js.map\n","import { AoGateway, ARIOToken, mARIOToken } from '@ar.io/sdk/web';\n\nconst EPOCHS_PER_YEAR = 365;\nconst EPOCH_DISTRIBUTION_RATIO = 0.0005; // 0.05%\nconst GATEWAY_REWARDS_RATIO = 0.9; // 90%\n// const OBSERVER_REWARDS_RATIO = .05; // 5%\n\nexport interface GatewayRewards {\n  totalDelegatedStake: ARIOToken;\n  rewardsSharedPerEpoch: ARIOToken;\n  EEY: number;\n  EAY: number;\n}\n\nexport interface OperatorRewards {\n  operatorStake: ARIOToken;\n  rewardsSharedPerEpoch: ARIOToken;\n  EEY: number;\n  EAY: number;\n}\n\nexport interface UserRewards {\n  EEY: number;\n  EAY: number;\n}\n\n/** Calculate operator rewards.\n * @param protocolBalance - The total balance of the protocol.\n * @param totalGateways - The total number of active gateways.\n * @param gateway - The gateway to calculate rewards for.\n * @param operatorStake - The operator's stake in the gateway in mARIO. Note: not reading this\n * from gateway object as the amount of operator stake for rewards can be different from\n * the gateway object (e.g., when adding/reducing operator's stake and needing to show\n * user what the EAY will be.)\n */\nexport const calculateOperatorRewards = (\n  protocolBalance: ARIOToken,\n  totalGateways: number,\n  gateway: AoGateway,\n  operatorStake: ARIOToken,\n): OperatorRewards => {\n  const epochRewards = protocolBalance.valueOf() * EPOCH_DISTRIBUTION_RATIO;\n  const baseGatewayReward =\n    (epochRewards * GATEWAY_REWARDS_RATIO) / totalGateways;\n\n  const gatewayRewardShareRatio =\n    gateway.settings.delegateRewardShareRatio / 100;\n\n  const rewardsSharedPerEpoch = new ARIOToken(\n    baseGatewayReward * (1 - gatewayRewardShareRatio),\n  );\n\n  // Return -1 if totalDelegatedStake is 0. This signals 0 stake and allows calling\n  // code to use the value for sorting purposes.\n  const EEY =\n    operatorStake.valueOf() > 0\n      ? rewardsSharedPerEpoch.valueOf() / operatorStake.valueOf()\n      : -1;\n  const EAY = EEY * EPOCHS_PER_YEAR;\n\n  return {\n    operatorStake,\n    rewardsSharedPerEpoch,\n    EEY,\n    EAY,\n  };\n};\n\nexport const calculateGatewayRewards = (\n  protocolBalance: ARIOToken,\n  totalGateways: number,\n  gateway: AoGateway,\n): GatewayRewards => {\n  const epochRewards = protocolBalance.valueOf() * EPOCH_DISTRIBUTION_RATIO;\n  const baseGatewayReward =\n    (epochRewards * GATEWAY_REWARDS_RATIO) / totalGateways;\n\n  const gatewayRewardShareRatio =\n    gateway.settings.delegateRewardShareRatio / 100;\n  const totalDelegatedStake = new mARIOToken(\n    gateway.totalDelegatedStake,\n  ).toARIO();\n\n  const rewardsSharedPerEpoch = new ARIOToken(\n    baseGatewayReward * gatewayRewardShareRatio,\n  );\n\n  // Return -1 if totalDelegatedStake is 0. This signals 0 stake and allows calling\n  // code to use the value for sorting purposes.\n  const EEY =\n    totalDelegatedStake.valueOf() > 0\n      ? rewardsSharedPerEpoch.valueOf() / totalDelegatedStake.valueOf()\n      : -1;\n  const EAY = EEY * EPOCHS_PER_YEAR;\n\n  return {\n    totalDelegatedStake,\n    rewardsSharedPerEpoch,\n    EEY,\n    EAY,\n  };\n};\n\nexport const calculateUserRewards = (\n  gatewayRewards: GatewayRewards,\n  userDelegatedStake: ARIOToken,\n  removingStake = false,\n): UserRewards => {\n  const multiplier = removingStake ? -1 : 1;\n  const delegatedStake = userDelegatedStake.valueOf() * multiplier;\n\n  const stakeProportion =\n    delegatedStake /\n    (gatewayRewards.totalDelegatedStake.valueOf() + delegatedStake);\n  const epochReward =\n    gatewayRewards.rewardsSharedPerEpoch.valueOf() * stakeProportion;\n\n  const EEY = epochReward / delegatedStake;\n  const EAY = EEY * EPOCHS_PER_YEAR;\n\n  return {\n    EEY,\n    EAY,\n  };\n};\n","import { WarningTriangleIcon } from '../icons';\n\nconst WithdrawWarning = () => {\n  return (\n    <div>\n      <div className=\"flex gap-3 rounded bg-containerL3 p-4\">\n        <WarningTriangleIcon width={40} height={20} />\n        <div className=\"grow text-[0.8125rem] text-high\">\n          90 days is the standard withdrawal period. During this time your\n          tokens will be locked and will not be accruing rewards.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WithdrawWarning;\n","import { AoGatewayWithAddress, ARIOToken } from '@ar.io/sdk/web';\nimport { log, WRITE_OPTIONS } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { AoAddress } from '@src/types';\nimport { formatAddress, formatWithCommas } from '@src/utils';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport { LinkArrowIcon } from '../icons';\nimport LabelValueRow from '../LabelValueRow';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\nimport WithdrawWarning from './WithdrawWarning';\n\nconst ReviewStakeModal = ({\n  gateway,\n  amountToStake,\n  onSuccess,\n  onClose,\n  walletAddress,\n  ticker,\n}: {\n  gateway: AoGatewayWithAddress;\n  amountToStake: number;\n  walletAddress: AoAddress;\n  onClose: () => void;\n  onSuccess: () => void;\n  ticker: string;\n}) => {\n  const queryClient = useQueryClient();\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n\n  const [txid, setTxid] = useState<string>();\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  const submitForm = async () => {\n    if (arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        if (gateway.gatewayAddress === walletAddress.toString()) {\n          const { id: txID } = await arIOWriteableSDK.increaseOperatorStake(\n            {\n              increaseQty: new ARIOToken(amountToStake).toMARIO(),\n            },\n            WRITE_OPTIONS,\n          );\n          setTxid(txID);\n\n          log.info(`Increase Operator Stake txID: ${txID}`);\n        } else {\n          const { id: txID } = await arIOWriteableSDK.delegateStake(\n            {\n              target: gateway.gatewayAddress,\n              stakeQty: new ARIOToken(amountToStake).toMARIO(),\n            },\n            WRITE_OPTIONS,\n          );\n          setTxid(txID);\n\n          log.info(`Increase Delegate Stake txID: ${txID}`);\n        }\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['balances'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gatewayVaults'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal\n        onClose={onClose}\n        useDefaultPadding={false}\n        showCloseButton={false}\n      >\n        <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n          <div className=\"text-gradient rounded-t-xl border-b border-b-stroke-low bg-containerL3 p-4\">\n            Review\n          </div>\n          <div className=\"flex flex-col gap-2 p-8\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(gateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Amount:\"\n              value={`${formatWithCommas(amountToStake)} ${ticker}`}\n            />\n          </div>\n\n          <div className=\"px-8 pb-6 text-left\">\n            <WithdrawWarning />\n          </div>\n\n          <div className=\"flex size-full flex-col bg-containerL0 px-8 pb-2 pt-6\">\n            <Button\n              className=\"h-[3.25rem] w-full\"\n              onClick={submitForm}\n              buttonType={ButtonType.PRIMARY}\n              title={`Stake ${ticker}`}\n              text={`Stake ${ticker}`}\n            />\n            <div>\n              <button className=\"h-[3.25rem] p-4 text-sm\" onClick={onClose}>\n                Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n            onSuccess();\n          }}\n          title=\"Congratulations\"\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully updated your stake.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReviewStakeModal;\n","import { AoGatewayWithAddress, ARIOToken } from '@ar.io/sdk/web';\nimport { log, WRITE_OPTIONS } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { AoAddress, WithdrawalType } from '@src/types';\nimport { formatAddress, formatDateTime, formatWithCommas } from '@src/utils';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport dayjs from 'dayjs';\nimport { useEffect, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport { LinkArrowIcon } from '../icons';\nimport LabelValueRow from '../LabelValueRow';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\n\nconst ReviewWithdrawalModal = ({\n  gateway,\n  amountToWithdraw,\n  withdrawalType,\n  onSuccess,\n  onClose,\n  walletAddress,\n  ticker,\n  withdrawalFee,\n  returningAmount,\n}: {\n  gateway: AoGatewayWithAddress;\n  amountToWithdraw: number;\n  withdrawalType: WithdrawalType;\n  walletAddress: AoAddress;\n  onClose: () => void;\n  onSuccess: () => void;\n  ticker: string;\n  withdrawalFee: number;\n  returningAmount?: number | string;\n}) => {\n  const queryClient = useQueryClient();\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n\n  const [txid, setTxid] = useState<string>();\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  const [dateOfReturn, setDateOfReturn] = useState<string>('');\n\n  const [confirmText, setConfirmText] = useState('');\n\n  const termsAccepted = confirmText === 'WITHDRAW';\n\n  useEffect(() => {\n    setDateOfReturn(\n      withdrawalType === 'expedited'\n        ? 'Instant'\n        : formatDateTime(dayjs(new Date()).add(30, 'day').toDate()),\n    );\n  }, [withdrawalType]);\n\n  const submitForm = async () => {\n    if (arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        const instant = withdrawalType === 'expedited';\n\n        if (gateway.gatewayAddress === walletAddress.toString()) {\n          const { id: txID } = await arIOWriteableSDK.decreaseOperatorStake(\n            {\n              decreaseQty: new ARIOToken(amountToWithdraw).toMARIO(),\n              instant,\n            },\n            WRITE_OPTIONS,\n          );\n          setTxid(txID);\n\n          log.info(`Decrease Operator Stake txID: ${txID}`);\n        } else {\n          const { id: txID } = await arIOWriteableSDK.decreaseDelegateStake(\n            {\n              target: gateway.gatewayAddress,\n              decreaseQty: new ARIOToken(amountToWithdraw).toMARIO(),\n              instant,\n            },\n            WRITE_OPTIONS,\n          );\n          setTxid(txID);\n\n          log.info(`Decrease Delegate Stake txID: ${txID}`);\n        }\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['balances'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gatewayVaults'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal\n        onClose={onClose}\n        useDefaultPadding={false}\n        showCloseButton={false}\n      >\n        <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n          <div className=\"text-gradient rounded-t-xl border-b border-b-stroke-low bg-containerL3 p-4\">\n            Review\n          </div>\n          <div className=\"flex flex-col gap-2 p-8\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(gateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Amount:\"\n              value={`${formatWithCommas(amountToWithdraw)} ${ticker}`}\n            />\n            <LabelValueRow label=\"Date of Return:\" value={dateOfReturn} />\n          </div>\n\n          <div className=\"flex flex-col gap-2 px-8 pb-8\">\n            <LabelValueRow\n              label=\"Stake Withdrawing:\"\n              value={`${formatWithCommas(amountToWithdraw)} ${ticker}`}\n            />\n\n            {withdrawalType === 'expedited' && (\n              <>\n                <LabelValueRow\n                  className=\"first:text-mid last:text-mid\"\n                  label=\"Fee:\"\n                  value={`${isNaN(withdrawalFee) ? '-' : +withdrawalFee.toFixed(4)} ${ticker}`}\n                />\n                <LabelValueRow\n                  className=\"first:text-mid last:text-mid\"\n                  label=\"Returning Amount:\"\n                  value={`${returningAmount} ${ticker}`}\n                />\n              </>\n            )}\n          </div>\n\n          <div className=\"flex size-full flex-col bg-containerL0 px-8 pb-2 pt-6\">\n            <div className=\"mb-6 flex flex-col items-center gap-2 text-sm text-mid\">\n              <div>\n                Please type &quot;WITHDRAW&quot; in the text box to proceed.\n              </div>\n              <input\n                type=\"text\"\n                onChange={(e) => setConfirmText(e.target.value)}\n                className={\n                  'h-7 w-full rounded-md border border-grey-700 bg-grey-1000 p-4 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n                }\n                value={confirmText}\n              />\n            </div>\n\n            <div\n              className={\n                termsAccepted ? undefined : 'pointer-events-none opacity-30'\n              }\n            >\n              <Button\n                className=\"h-[3.25rem] w-full\"\n                onClick={submitForm}\n                buttonType={ButtonType.PRIMARY}\n                title={`Withdraw ${ticker}`}\n                text={`Withdraw ${ticker}`}\n              />\n            </div>\n            <div>\n              <button className=\"h-[3.25rem] p-4 text-sm\" onClick={onClose}>\n                Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n            onSuccess();\n          }}\n          title=\"Congratulations\"\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully updated your stake.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReviewWithdrawalModal;\n","import { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst useRedelegationFee = (walletAddress?: string) => {\n  const arioReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const res = useQuery({\n    queryKey: ['redelegationFee', walletAddress, arioReadSDK],\n    queryFn: async () => {\n      if (!arioReadSDK) throw new Error('arIOReadSDK not initialized');\n      if (!walletAddress) throw new Error('walletAddress not initialized');\n\n      return await arioReadSDK.getRedelegationFee({ address: walletAddress });\n    },\n    enabled: !!arioReadSDK && !!walletAddress,\n  });\n  return res;\n};\n\nexport default useRedelegationFee;\n","import { AoGatewayWithAddress, mARIOToken } from '@ar.io/sdk/web';\nimport { EAY_TOOLTIP_FORMULA, EAY_TOOLTIP_TEXT } from '@src/constants';\nimport useGateways from '@src/hooks/useGateways';\nimport useProtocolBalance from '@src/hooks/useProtocolBalance';\nimport { useGlobalState } from '@src/store';\nimport { formatAddress, formatPercentage, formatWithCommas } from '@src/utils';\nimport { calculateGatewayRewards } from '@src/utils/rewards';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { MathJax } from 'better-react-mathjax';\nimport { InfoIcon, SearchIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport Button, { ButtonType } from './Button';\nimport BaseModal from './modals/BaseModal';\nimport TableView from './TableView';\nimport Tooltip from './Tooltip';\n\nexport type GatewaySelectorProps = {\n  selectedGateway?: AoGatewayWithAddress;\n  setSelectedGateway: (gateway: AoGatewayWithAddress) => void;\n  gateways?: AoGatewayWithAddress[];\n};\n\ninterface TableData {\n  label: string;\n  gateway: AoGatewayWithAddress;\n  rewardShareRatio: number;\n  totalStake: number;\n  eay: number;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst GatewaySelectorModal = ({\n  gateways,\n  onClose,\n  onGatewaySelected,\n}: {\n  gateways: AoGatewayWithAddress[];\n  onClose: () => void;\n  onGatewaySelected: (gateway: AoGatewayWithAddress) => void;\n}) => {\n  const ticker = useGlobalState((state) => state.ticker);\n  const [tableData, setTableData] = useState<TableData[]>([]);\n\n  const { data: prototocolBalance } = useProtocolBalance();\n  const { data: totalGateways } = useGateways();\n\n  const [searchText, setSearchText] = useState<string>();\n\n  useEffect(() => {\n    if (prototocolBalance && totalGateways && gateways) {\n      const tableData: TableData[] = gateways.map((gateway) => {\n        return {\n          gateway,\n          label: gateway.settings.label,\n          rewardShareRatio: gateway.settings.delegateRewardShareRatio,\n          totalStake: new mARIOToken(gateway.totalDelegatedStake)\n            .toARIO()\n            .valueOf(),\n          eay: calculateGatewayRewards(\n            new mARIOToken(prototocolBalance).toARIO(),\n            Object.values(totalGateways).filter((g) => g.status == 'joined')\n              .length,\n            gateway,\n          ).EAY,\n        };\n      });\n      if (searchText && searchText.length > 0) {\n        const filteredData = tableData.filter((data) => {\n          return (\n            data.label.toLowerCase().includes(searchText.toLowerCase()) ||\n            data.gateway.settings.fqdn\n              .toLowerCase()\n              .includes(searchText.toLowerCase()) ||\n            data.gateway.gatewayAddress\n              .toLowerCase()\n              .includes(searchText.toLowerCase())\n          );\n        });\n        setTableData(filteredData);\n      } else {\n        setTableData(tableData);\n      }\n    }\n  }, [totalGateways, gateways, prototocolBalance, searchText]);\n\n  // Define columns for the table\n  const columns: ColumnDef<TableData, any>[] = [\n    columnHelper.accessor('label', {\n      id: 'label',\n      header: 'Gateway',\n      sortDescFirst: true,\n      cell: ({ row }) => (\n        <div className=\"flex flex-col text-left\">\n          <div className=\"text-sm text-high\">{row.original.label}</div>\n          <div className=\"text-xs\">\n            {formatAddress(row.original.gateway.gatewayAddress)}\n          </div>\n        </div>\n      ),\n    }),\n    columnHelper.accessor('rewardShareRatio', {\n      id: 'rewardShareRatioe',\n      header: 'Reward Share',\n      sortDescFirst: true,\n      cell: ({ row }) => formatPercentage(row.original.rewardShareRatio / 100),\n    }),\n    columnHelper.accessor('totalStake', {\n      id: 'totalStake',\n      header: 'Total Stake',\n      sortDescFirst: true,\n      cell: ({ row }) =>\n        `${formatWithCommas(row.original.totalStake)} ${ticker}`,\n    }),\n    columnHelper.accessor('eay', {\n      id: 'eay',\n      header: () => (\n        <div className=\"flex gap-1\">\n          EAY\n          <Tooltip\n            message={\n              <div>\n                <p>{EAY_TOOLTIP_TEXT}</p>\n                <MathJax className=\"mt-4\">{EAY_TOOLTIP_FORMULA}</MathJax>\n              </div>\n            }\n          >\n            <InfoIcon className=\"h-4\" />\n          </Tooltip>\n        </div>\n      ),\n      sortDescFirst: true,\n      cell: ({ row }) => (\n        <div>\n          {row.original.eay < 0\n            ? 'N/A'\n            : `${formatWithCommas(row.original.eay * 100)}%`}\n        </div>\n      ),\n    }),\n  ];\n\n  return (\n    <BaseModal onClose={onClose} showCloseButton={false} closeOnClickOutside>\n      <div className=\"w-[calc(100vw-2rem)] overflow-hidden rounded-xl border border-grey-500 text-left lg:w-[48rem]\">\n        <div className=\"flex items-center rounded-t-xl border border-grey-500 px-6 py-2\">\n          <SearchIcon className=\"size-4 text-mid\" />\n          <input\n            type=\"text\"\n            placeholder=\"Enter label, domain, or address\"\n            className=\"grow bg-transparent px-3 py-2 text-sm text-high placeholder:text-low focus:outline-none\"\n            value={searchText ?? ''}\n            onChange={(e) => setSearchText(e.target.value)}\n          />\n        </div>\n        <TableView\n          columns={columns}\n          data={tableData}\n          onRowClick={(row) => {\n            onGatewaySelected(row.gateway);\n            onClose();\n          }}\n          defaultSortingState={{ id: 'label', desc: false }}\n          isLoading={false}\n          noDataFoundText=\"No gateways found.\"\n          shortTable={true}\n        />\n      </div>\n    </BaseModal>\n  );\n};\n\nconst GatewaySelector = ({\n  selectedGateway,\n  setSelectedGateway,\n  gateways,\n}: GatewaySelectorProps) => {\n  const [showGatewaySelectorTable, setShowGatewaySelectorTable] =\n    useState(false);\n\n  return (\n    <div className=\"flex items-center rounded border border-grey-500 p-2 pl-6 text-left text-sm text-mid\">\n      <div className=\"grow\">\n        {!gateways\n          ? 'Loading Gateways...'\n          : selectedGateway\n            ? formatAddress(selectedGateway.gatewayAddress)\n            : ''}\n      </div>\n\n      <div className={gateways ? undefined : 'pointer-events-none opacity-30'}>\n        <Button\n          buttonType={ButtonType.SECONDARY}\n          className=\"max-h-7 text-mid\"\n          active={true}\n          title=\"Choose Gateway\"\n          text=\"Choose Gateway\"\n          onClick={() => setShowGatewaySelectorTable(true)}\n        />\n      </div>\n      {showGatewaySelectorTable && gateways && (\n        <GatewaySelectorModal\n          gateways={gateways}\n          onClose={() => setShowGatewaySelectorTable(false)}\n          onGatewaySelected={setSelectedGateway}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GatewaySelector;\n","import { AoGatewayWithAddress, ARIOToken } from '@ar.io/sdk/web';\nimport { log, WRITE_OPTIONS } from '@src/constants';\nimport useRedelegationFee from '@src/hooks/useRedelegationFee';\nimport { useGlobalState } from '@src/store';\nimport { AoAddress } from '@src/types';\nimport { formatAddress, formatWithCommas } from '@src/utils';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport { LinkArrowIcon } from '../icons';\nimport LabelValueRow from '../LabelValueRow';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\n\ntype ReviewRedelegateModalProps = {\n  sourceGateway: AoGatewayWithAddress;\n  targetGateway: AoGatewayWithAddress;\n  amountToRedelegate: ARIOToken;\n  fee: number;\n  newTotalStake: number;\n  walletAddress: AoAddress;\n  vaultId?: string;\n  onClose: () => void;\n  onSuccess: () => void;\n  ticker: string;\n};\n\nconst ReviewRedelegateModal = ({\n  sourceGateway,\n  targetGateway,\n  amountToRedelegate,\n  vaultId,\n  fee,\n  newTotalStake,\n  onSuccess,\n  onClose,\n  walletAddress,\n  ticker,\n}: ReviewRedelegateModalProps) => {\n  const queryClient = useQueryClient();\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n\n  const [txid, setTxid] = useState<string>();\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [confirmationInput, setConfirmationInput] = useState('');\n\n  const { data: redelegationFee } = useRedelegationFee();\n  const hasFee = fee > 0;\n\n  const totalRedelegatedStake = amountToRedelegate.valueOf() - fee;\n\n  const isDisabled =\n    showBlockingMessageModal || (hasFee && confirmationInput !== 'CONFIRM');\n\n  const submitForm = async () => {\n    if (isDisabled) return;\n    if (arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        const { id: txID } = await arIOWriteableSDK.redelegateStake(\n          {\n            source: sourceGateway.gatewayAddress,\n            target: targetGateway.gatewayAddress,\n            stakeQty: amountToRedelegate.toMARIO(),\n            vaultId,\n          },\n          WRITE_OPTIONS,\n        );\n\n        setTxid(txID);\n\n        log.info(`Redelegate Stake txID: ${txID}`);\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateway', walletAddress.toString()],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['balances'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gatewayVaults'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal\n        onClose={onClose}\n        useDefaultPadding={false}\n        showCloseButton={false}\n      >\n        <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n          <div className=\"text-gradient rounded-t-xl border-b border-b-stroke-low bg-containerL3 p-4\">\n            Review\n          </div>\n          <div className=\"flex flex-col gap-2 p-8\">\n            <LabelValueRow\n              label=\"Source Gateway Owner:\"\n              value={formatAddress(sourceGateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={sourceGateway.settings.label}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={sourceGateway.settings.fqdn}\n            />\n\n            <div className=\"h-6\"></div>\n\n            <LabelValueRow\n              label=\"Target Gateway Owner:\"\n              value={formatAddress(targetGateway.gatewayAddress)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={targetGateway.settings.label}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={targetGateway.settings.fqdn}\n            />\n\n            <div className=\"h-6\"></div>\n\n            <LabelValueRow\n              label=\"Amount:\"\n              value={`${formatWithCommas(amountToRedelegate.valueOf())} ${ticker}`}\n            />\n\n            {fee > 0 && (\n              <LabelValueRow\n                label=\"Fee:\"\n                value={`${fee > 0 && fee} ${redelegationFee ? `(-${redelegationFee.redelegationFeeRate}%)` : ''} ${ticker}`}\n              />\n            )}\n\n            <LabelValueRow\n              label=\"Total Redelegated Stake:\"\n              value={`${formatWithCommas(totalRedelegatedStake)} ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${formatWithCommas(newTotalStake)} ${ticker}`}\n            />\n          </div>\n\n          <div className=\"px-8 pb-6 text-left\">\n            <div>\n              <div className=\"flex gap-3 rounded bg-containerL3 p-4\">\n                <div className=\"grow text-[0.8125rem] text-mid\">\n                  Users get one free redelegation every 7 days. Fees then\n                  increase incrementally (10%, 20%, ... up to 60%) and stay at\n                  60% until resetting after 7 days of no action.\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex size-full flex-col bg-containerL0 px-8 pb-2 pt-6\">\n            {hasFee && (\n              <div className=\"mb-6\">\n                <label\n                  htmlFor=\"confirmation-input\"\n                  className=\"mb-2 block text-sm font-medium text-mid\"\n                >\n                  Please type CONFIRM to acknowledge there will be a fee of{' '}\n                  {fee} {ticker} for redelegating.\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"confirmation-input\"\n                  value={confirmationInput}\n                  onChange={(e) => setConfirmationInput(e.target.value)}\n                  className=\"h-7 w-full rounded-md border border-grey-700 bg-grey-1000 p-4 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high\"\n                />\n              </div>\n            )}\n            <div\n              className={\n                showBlockingMessageModal ||\n                (hasFee && confirmationInput !== 'CONFIRM')\n                  ? 'pointer-events-none opacity-30'\n                  : ''\n              }\n            >\n              <Button\n                className=\"h-12 w-full\"\n                onClick={submitForm}\n                buttonType={ButtonType.PRIMARY}\n                title={\n                  hasFee && confirmationInput !== 'CONFIRM'\n                    ? 'Please type CONFIRM to acknowledge the fee and continue'\n                    : `Redelegate ${ticker}`\n                }\n                text={\n                  showBlockingMessageModal\n                    ? 'Processing...'\n                    : `Redelegate ${ticker}`\n                }\n              />\n            </div>\n            <div>\n              <button className=\"h-[3.25rem] p-4 text-sm\" onClick={onClose}>\n                Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n            onSuccess();\n          }}\n          title=\"Congratulations\"\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully redelegated your stake.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReviewRedelegateModal;\n","import { AoGatewayWithAddress, ARIOToken, mARIOToken } from '@ar.io/sdk/web';\nimport { REDELEGATION_FEE_TOOLTIP_TEXT } from '@src/constants';\nimport useDelegateStakes from '@src/hooks/useDelegateStakes';\nimport useGateways from '@src/hooks/useGateways';\nimport useRedelegationFee from '@src/hooks/useRedelegationFee';\nimport { useGlobalState } from '@src/store';\nimport { formatWithCommas } from '@src/utils';\nimport { InfoIcon } from 'lucide-react';\nimport { useEffect, useMemo, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport GatewaySelector from '../GatewaySelector';\nimport LabelValueRow from '../LabelValueRow';\nimport Tooltip from '../Tooltip';\nimport ErrorMessageIcon from '../forms/ErrorMessageIcon';\nimport { validateARIOAmount } from '../forms/validation';\nimport BaseModal from './BaseModal';\nimport ReviewRedelegateModal from './ReviewRedelegateModal';\n\nexport type RedelegateModalProps = {\n  onClose: () => void;\n  sourceGateway: AoGatewayWithAddress;\n  vaultId?: string;\n  maxRedelegationStake: ARIOToken;\n};\n\nconst RedelegateModal = ({\n  onClose,\n  sourceGateway,\n  vaultId,\n  maxRedelegationStake,\n}: RedelegateModalProps) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const { data: delegateStakes } = useDelegateStakes(walletAddress?.toString());\n\n  const [targetGateway, setTargetGateway] = useState<AoGatewayWithAddress>();\n  const [targetGatewayCurrentStake, setTargetGatewayCurrentStake] =\n    useState<number>();\n\n  const [amountToRedelegate, setAmountToRedelegate] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  const [showReviewRedelegateModal, setShowReviewRedelegateModal] =\n    useState(false);\n\n  const { data: redelegationFee } = useRedelegationFee(\n    walletAddress?.toString(),\n  );\n\n  const { data: gateways } = useGateways();\n  const [filteredGateways, setFilteredGateways] =\n    useState<AoGatewayWithAddress[]>();\n\n  useEffect(() => {\n    if (gateways) {\n      const filteredGateways = Object.entries(gateways)\n        .map(([address, gateway]) => {\n          return { ...gateway, gatewayAddress: address };\n        })\n        .filter(\n          (gateway) =>\n            gateway.status === 'joined' &&\n            gateway.settings.allowDelegatedStaking &&\n            gateway.gatewayAddress !== sourceGateway.gatewayAddress,\n        );\n      setFilteredGateways(filteredGateways);\n    }\n  }, [gateways, sourceGateway.gatewayAddress]);\n\n  useEffect(() => {\n    if (targetGateway && walletAddress) {\n      if (targetGateway.gatewayAddress === walletAddress.toString()) {\n        setTargetGatewayCurrentStake(\n          new mARIOToken(targetGateway.operatorStake).toARIO().valueOf(),\n        );\n      } else if (delegateStakes) {\n        const stake = delegateStakes.stakes.find(\n          (stake) => stake.gatewayAddress === targetGateway.gatewayAddress,\n        )?.balance;\n        setTargetGatewayCurrentStake(\n          new mARIOToken(stake ?? 0).toARIO().valueOf(),\n        );\n      }\n    }\n  }, [targetGateway, delegateStakes, walletAddress]);\n\n  const minDelegatedStake = targetGateway\n    ? new mARIOToken(targetGateway?.settings.minDelegatedStake)\n        .toARIO()\n        .valueOf()\n    : 10;\n  const minRequiredStakeToAdd =\n    (targetGatewayCurrentStake ?? 0) > 0 ? 1 : minDelegatedStake;\n\n  const validators = useMemo(\n    () => ({\n      redelegationAmount: validateARIOAmount(\n        'Redelegation Amount',\n        ticker,\n        minRequiredStakeToAdd,\n        maxRedelegationStake.valueOf(),\n      ),\n    }),\n    [ticker, minRequiredStakeToAdd, maxRedelegationStake],\n  );\n\n  useEffect(() => {\n    if (!targetGateway) {\n      setIsFormValid(false);\n      return;\n    }\n\n    const amount = parseFloat(amountToRedelegate);\n    const maxStake = maxRedelegationStake.valueOf();\n\n    const sourceMinStakeARIO = new mARIOToken(\n      sourceGateway.settings.minDelegatedStake,\n    )\n      .toARIO()\n      .valueOf();\n\n    if (\n      // checking if redelegation source is from a stake rather than a vault\n      vaultId === undefined &&\n      amount != maxStake &&\n      maxStake - amount < sourceMinStakeARIO\n    ) {\n      setErrorMessage(\n        `Amount to redelegate must either leave enough stake to meet the source gateway's minimum delegated stake (${formatWithCommas(sourceMinStakeARIO)} ${ticker}) or move the entire stake completely.`,\n      );\n      setIsFormValid(false);\n      return;\n    }\n\n    const redelegationAmountError =\n      validators.redelegationAmount(amountToRedelegate);\n\n    if (redelegationAmountError !== undefined) {\n      setErrorMessage(redelegationAmountError);\n      setIsFormValid(false);\n      return;\n    }\n\n    if (maxStake < minRequiredStakeToAdd) {\n      setErrorMessage(\n        `Insufficient redelegation balance, at least ${minRequiredStakeToAdd} ${ticker} required for target gateway.`,\n      );\n      setIsFormValid(false);\n      return;\n    }\n\n    setErrorMessage(undefined);\n    setIsFormValid(true);\n  }, [\n    amountToRedelegate,\n    maxRedelegationStake,\n    minRequiredStakeToAdd,\n    sourceGateway.settings.minDelegatedStake,\n    targetGateway,\n    ticker,\n    validators,\n    vaultId,\n  ]);\n\n  const fee = useMemo(() => {\n    if (redelegationFee && amountToRedelegate && isFormValid) {\n      const feeAmount =\n        (redelegationFee.redelegationFeeRate / 100) *\n        parseFloat(amountToRedelegate);\n      return feeAmount;\n    }\n    return 0;\n  }, [redelegationFee, amountToRedelegate, isFormValid]);\n\n  const totalRedelegatedStake = parseFloat(amountToRedelegate) - fee;\n  const newTotalStake =\n    (targetGatewayCurrentStake ?? 0) + totalRedelegatedStake;\n\n  const parsedStake = parseFloat(\n    amountToRedelegate.length === 0 ? '0' : amountToRedelegate,\n  );\n  const remainingBalance =\n    parsedStake <= maxRedelegationStake.valueOf()\n      ? maxRedelegationStake.valueOf() - parsedStake\n      : -1;\n\n  const setMaxAmount = () => {\n    setAmountToRedelegate(maxRedelegationStake + '');\n  };\n\n  const disableInput =\n    !targetGateway || maxRedelegationStake.valueOf() < minRequiredStakeToAdd;\n\n  return (\n    <BaseModal onClose={onClose} useDefaultPadding={false}>\n      <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n        <div className=\"border-b border-b-stroke-low\">\n          <div className=\"rounded-tr-xl border-b border-red-400 bg-grey-700 py-3 text-center\">\n            <span className={'text-gradient'}>Redelegate</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col p-8 pb-2\">\n          <div className=\"flex flex-col gap-2\">\n            <div className=\"mb-1\">\n              <GatewaySelector\n                selectedGateway={targetGateway}\n                setSelectedGateway={setTargetGateway}\n                gateways={filteredGateways}\n              />\n            </div>\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={targetGateway ? targetGateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={targetGateway ? targetGateway.settings.fqdn : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Current Stake:\"\n              value={`${targetGatewayCurrentStake ? formatWithCommas(targetGatewayCurrentStake) : '0'} ${ticker}`}\n            />\n          </div>\n\n          <div className=\"mt-8 flex items-center\">\n            <div className=\"text-left text-sm text-mid\">Amount:</div>\n            <div className=\"grow\"></div>\n            <div className=\"text-left text-xs text-low\">\n              {`Available: ${\n                remainingBalance >= 0\n                  ? formatWithCommas(+remainingBalance)\n                  : '-'\n              } ${ticker}`}\n            </div>\n          </div>\n          <div className=\"mt-3 flex h-[3.25rem] items-center overflow-hidden rounded-md border border-grey-800\">\n            <input\n              className={\n                'size-full grow  bg-grey-1000 px-6 py-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n              }\n              disabled={disableInput}\n              readOnly={disableInput}\n              type=\"text\"\n              placeholder={`Enter amount of ${ticker} to stake`}\n              value={amountToRedelegate}\n              onChange={(e) => {\n                const textValue = e.target.value;\n\n                if (textValue && isNaN(+e.target.value)) {\n                  return;\n                }\n\n                setAmountToRedelegate(textValue);\n              }}\n            />\n            {targetGateway &&\n              (amountToRedelegate?.length > 0 ||\n                maxRedelegationStake.valueOf() < minRequiredStakeToAdd) &&\n              errorMessage && (\n                <ErrorMessageIcon\n                  errorMessage={errorMessage}\n                  tooltipPadding={'3'}\n                />\n              )}\n            <Button\n              className=\"mr-3 max-h-7\"\n              onClick={disableInput ? undefined : setMaxAmount}\n              buttonType={ButtonType.SECONDARY}\n              active={true}\n              title=\"Max\"\n              text=\"Max\"\n            />\n          </div>\n        </div>\n        <div className=\"flex size-full flex-col gap-2 bg-containerL0 px-8 pb-8 pt-4\">\n          <div className=\"flex flex-col gap-2\">\n            {fee > 0 && (\n              <LabelValueRow\n                label=\"Fee:\"\n                value={`${fee} ${ticker}`}\n                rightIcon={\n                  <Tooltip\n                    message={\n                      <div>\n                        <p>{REDELEGATION_FEE_TOOLTIP_TEXT}</p>\n                      </div>\n                    }\n                  >\n                    <InfoIcon className=\"size-4 text-text-red\" />\n                  </Tooltip>\n                }\n              />\n            )}\n\n            <LabelValueRow\n              label=\"Total Redelegated Stake:\"\n              value={`${isFormValid ? formatWithCommas(totalRedelegatedStake) : '-'} ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${\n                isFormValid ? formatWithCommas(newTotalStake) : '-'\n              } ${ticker}`}\n            />\n          </div>\n          <div\n            className={\n              isFormValid ? undefined : 'pointer-events-none opacity-30'\n            }\n          >\n            <Button\n              className=\"mt-4 h-[3.25rem] w-full\"\n              onClick={() => {\n                setShowReviewRedelegateModal(true);\n              }}\n              buttonType={ButtonType.PRIMARY}\n              title=\"Review\"\n              text=\"Review\"\n            />\n          </div>\n        </div>\n        {showReviewRedelegateModal && targetGateway && walletAddress && (\n          <ReviewRedelegateModal\n            amountToRedelegate={new ARIOToken(parseFloat(amountToRedelegate))}\n            fee={fee}\n            newTotalStake={newTotalStake}\n            sourceGateway={sourceGateway}\n            targetGateway={targetGateway}\n            onClose={() => setShowReviewRedelegateModal(false)}\n            onSuccess={() => onClose()}\n            ticker={ticker}\n            walletAddress={walletAddress}\n            vaultId={vaultId}\n          />\n        )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default RedelegateModal;\n","import { WRITE_OPTIONS } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport { LinkArrowIcon } from '../icons';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\n\nconst CancelWithdrawalModal = ({\n  gatewayAddress,\n  vaultId,\n  onClose,\n}: {\n  gatewayAddress: string;\n  vaultId: string;\n  onClose: () => void;\n}) => {\n  const queryClient = useQueryClient();\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [txid, setTxid] = useState<string>();\n\n  const [confirmText, setConfirmText] = useState('');\n\n  const termsAccepted = confirmText === 'CONFIRM';\n\n  const processCancelWithdrawal = async () => {\n    if (walletAddress && arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        const { id: txID } = await arIOWriteableSDK.cancelWithdrawal(\n          { gatewayAddress: gatewayAddress, vaultId: vaultId },\n          WRITE_OPTIONS,\n        );\n        setTxid(txID);\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gatewayVaults'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal onClose={onClose} useDefaultPadding={false}>\n        <div className=\"w-[calc(100vw-2rem)] text-left lg:w-[28.4375rem]\">\n          <div className=\"px-8  pb-4 pt-6\">\n            <div className=\"text-lg text-high\">Cancel Pending Withdrawal</div>\n          </div>\n\n          <div className=\"border-y border-grey-800 p-8 text-sm text-mid\">\n            <div>\n              This action will cancel your withdrawal and return its stake to{' '}\n              {gatewayAddress.toString() == walletAddress?.toString()\n                ? 'your'\n                : 'the original'}{' '}\n              gateway. This action cannot be undone.\n            </div>\n          </div>\n\n          <div className=\"bg-containerL0 px-8 pb-8 pt-6\">\n            <div className=\"mb-6 flex flex-col items-center gap-2 text-sm text-mid\">\n              <div>\n                Please type &quot;CONFIRM&quot; in the text box to proceed.\n              </div>\n              <input\n                type=\"text\"\n                onChange={(e) => setConfirmText(e.target.value)}\n                className={\n                  'h-7 w-full rounded-md border border-grey-700 bg-grey-1000 p-4 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n                }\n                value={confirmText}\n              />\n            </div>\n\n            <div className=\"flex grow justify-center\">\n              <Button\n                onClick={processCancelWithdrawal}\n                buttonType={ButtonType.PRIMARY}\n                title=\"Cancel Withdrawal\"\n                text={<div className=\"py-2\">Cancel Withdrawal</div>}\n                className={`w-full ${!termsAccepted && 'pointer-events-none opacity-30'}`}\n              />\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n          }}\n          title=\"Confirmed\"\n          // FIXME: This uses a button as using a standard <a> tag does not work. Needs further investigation.\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully canceled the withdrawal.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default CancelWithdrawalModal;\n","import { AoVaultData } from '@ar.io/sdk/web';\n\nconst MAX_EXPEDITED_WITHDRAWAL_PENALTY_RATE = 0.5;\nconst MIN_EXPEDITED_WITHDRAWAL_PENALTY_RATE = 0.1;\n\nexport const calculateInstantWithdrawalPenaltyRate = (\n  vault: AoVaultData,\n  date: Date,\n) => {\n  const elapsedTimeMs = Math.max(0, date.getTime() - vault.startTimestamp);\n  const totalWithdrawalTimeMs = vault.endTimestamp - vault.startTimestamp;\n\n  const penaltyRate =\n    MAX_EXPEDITED_WITHDRAWAL_PENALTY_RATE -\n    (MAX_EXPEDITED_WITHDRAWAL_PENALTY_RATE -\n      MIN_EXPEDITED_WITHDRAWAL_PENALTY_RATE) *\n      (elapsedTimeMs / totalWithdrawalTimeMs);\n\n  return penaltyRate;\n};\n","import { AoGateway, AoVaultData, mARIOToken } from '@ar.io/sdk/web';\nimport { WRITE_OPTIONS } from '@src/constants';\nimport { useGlobalState } from '@src/store';\nimport { formatAddress, formatDateTime, formatWithCommas } from '@src/utils';\nimport { calculateInstantWithdrawalPenaltyRate } from '@src/utils/stake';\nimport { showErrorToast } from '@src/utils/toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport LabelValueRow from '../LabelValueRow';\nimport Tooltip from '../Tooltip';\nimport { InfoIcon, LinkArrowIcon } from '../icons';\nimport BaseModal from './BaseModal';\nimport BlockingMessageModal from './BlockingMessageModal';\nimport SuccessModal from './SuccessModal';\n\nconst InstantWithdrawalModal = ({\n  gateway,\n  gatewayAddress,\n  vaultId,\n  vault,\n  onClose,\n}: {\n  gateway: AoGateway;\n  gatewayAddress: string;\n  vaultId: string;\n  vault: AoVaultData;\n  onClose: () => void;\n}) => {\n  const queryClient = useQueryClient();\n\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const arIOWriteableSDK = useGlobalState((state) => state.arIOWriteableSDK);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [showBlockingMessageModal, setShowBlockingMessageModal] =\n    useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [txid, setTxid] = useState<string>();\n\n  const [confirmText, setConfirmText] = useState('');\n\n  const [calculatedFeeAndAmountReturning, setCalculatedFeeAndAmountReturning] =\n    useState<{ penaltyRate: number; fee: number; amountReturning: number }>();\n\n  useEffect(() => {\n    const penaltyRate = calculateInstantWithdrawalPenaltyRate(\n      vault,\n      new Date(),\n    );\n\n    const fee = Math.floor(penaltyRate * vault.balance);\n    const amountReturning = Math.round(vault.balance - fee);\n\n    setCalculatedFeeAndAmountReturning({\n      penaltyRate,\n      fee: new mARIOToken(fee).toARIO().valueOf(),\n      amountReturning: new mARIOToken(amountReturning).toARIO().valueOf(),\n    });\n  }, [setCalculatedFeeAndAmountReturning, vault]);\n\n  const termsAccepted = confirmText === 'WITHDRAW';\n\n  const processInstantWithdrawal = async () => {\n    if (walletAddress && arIOWriteableSDK) {\n      setShowBlockingMessageModal(true);\n\n      try {\n        const { id: txID } = await arIOWriteableSDK.instantWithdrawal(\n          { gatewayAddress: gatewayAddress, vaultId: vaultId },\n          WRITE_OPTIONS,\n        );\n        setTxid(txID);\n\n        queryClient.invalidateQueries({\n          queryKey: ['gateways'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['balances'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['delegateStakes'],\n          refetchType: 'all',\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['gatewayVaults'],\n          refetchType: 'all',\n        });\n\n        setShowSuccessModal(true);\n      } catch (e: any) {\n        showErrorToast(`${e}`);\n      } finally {\n        setShowBlockingMessageModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <BaseModal onClose={onClose} useDefaultPadding={false}>\n        <div className=\"w-[calc(100vw-2rem)] text-left lg:w-[28.4375rem]\">\n          <div className=\"px-8  pb-4 pt-6\">\n            <div className=\"text-lg text-high\">Expedited Withdrawal</div>\n          </div>\n\n          <div className=\"flex flex-col gap-1 px-8\">\n            <LabelValueRow label=\"Label:\" value={gateway.settings.label} />\n            <LabelValueRow\n              label=\"Domain:\"\n              value={gateway.settings.fqdn}\n              isLink={true}\n            />\n            <LabelValueRow\n              label=\"Address:\"\n              value={formatAddress(gatewayAddress)}\n            />\n            <LabelValueRow\n              label=\"Original Date of Return:\"\n              value={formatDateTime(new Date(vault.endTimestamp))}\n            />\n          </div>\n\n          <div className=\"mx-8 mt-4 flex flex-col gap-3 rounded bg-containerL3 p-4  text-[0.8125rem]\">\n            <div className=\"grow text-high\">\n              You are about to expedite your withdrawal, subject to a dynamic\n              fee. Please note:\n            </div>\n            <ul className=\"list-disc space-y-2 pl-4\">\n              <li>\n                A fee of{' '}\n                {calculatedFeeAndAmountReturning\n                  ? (calculatedFeeAndAmountReturning.penaltyRate * 100).toFixed(\n                      2,\n                    )\n                  : ''}\n                % will be applied to your withdrawal based on the current time\n                remaining until your original return date.\n              </li>\n              <li>This action is irreversible once confirmed.</li>\n              <li>\n                Your staked tokens will return immediately to your wallet.\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"mt-4 flex flex-col gap-1 px-8 pb-4\">\n            <LabelValueRow\n              label=\"Stake Withdrawing:\"\n              value={`${formatWithCommas(new mARIOToken(vault.balance).toARIO().valueOf())} ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"Early Withdrawal Fee:\"\n              value={\n                calculatedFeeAndAmountReturning\n                  ? `${formatWithCommas(calculatedFeeAndAmountReturning.fee)} ${ticker}`\n                  : ''\n              }\n              rightIcon={\n                <Tooltip\n                  message={\n                    <div>\n                      <p>\n                        Expedited withdrawal fee starts at 50% and declines\n                        linearly to 10% over the withdrawal period.\n                      </p>\n                    </div>\n                  }\n                >\n                  <InfoIcon className=\"size-[1.125rem]\" />\n                </Tooltip>\n              }\n            />\n            <LabelValueRow\n              label=\"Amount Returning:\"\n              value={\n                calculatedFeeAndAmountReturning\n                  ? `${formatWithCommas(calculatedFeeAndAmountReturning.amountReturning)} ${ticker}`\n                  : ''\n              }\n            />\n          </div>\n\n          <div className=\"bg-containerL0 px-8 pb-8 pt-4\">\n            <div className=\"mb-6 flex flex-col items-center gap-2 text-sm text-mid\">\n              <div>\n                Please type &quot;WITHDRAW&quot; in the text box to proceed.\n              </div>\n              <input\n                type=\"text\"\n                onChange={(e) => setConfirmText(e.target.value)}\n                className={\n                  'h-7 w-full rounded-md border border-grey-700 bg-grey-1000 p-4 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n                }\n                value={confirmText}\n              />\n            </div>\n\n            <div className=\"flex grow justify-center\">\n              <Button\n                onClick={processInstantWithdrawal}\n                buttonType={ButtonType.PRIMARY}\n                title=\"Withdraw\"\n                text={<div className=\"py-2\">Withdraw</div>}\n                className={`w-full ${!termsAccepted && 'pointer-events-none opacity-30'}`}\n              />\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n      {showBlockingMessageModal && (\n        <BlockingMessageModal\n          onClose={() => setShowBlockingMessageModal(false)}\n          message=\"Sign the following data with your wallet to proceed.\"\n        ></BlockingMessageModal>\n      )}\n      {showSuccessModal && (\n        <SuccessModal\n          onClose={() => {\n            setShowSuccessModal(false);\n            onClose();\n          }}\n          title=\"Confirmed\"\n          bodyText={\n            <div className=\"mb-8 text-sm text-mid\">\n              <div>You have successfully expedited the withdrawal.</div>\n              <div className=\"my-2 flex flex-col justify-center gap-2\">\n                <div>Transaction ID:</div>\n                <button\n                  className=\"flex items-center justify-center break-all\"\n                  title=\"View transaction on ao.link\"\n                  onClick={async () => {\n                    window.open(`https://ao.link/#/message/${txid}`, '_blank');\n                  }}\n                >\n                  {txid}\n                  <LinkArrowIcon className=\"ml-1 size-3\" />\n                </button>\n              </div>\n            </div>\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default InstantWithdrawalModal;\n","import { AoGateway, ARIOToken, mARIOToken } from '@ar.io/sdk/web';\nimport {\n  calculateGatewayRewards,\n  calculateUserRewards,\n  UserRewards,\n} from '@src/utils/rewards';\nimport { useEffect, useState } from 'react';\nimport useGateways from './useGateways';\nimport useProtocolBalance from './useProtocolBalance';\n\nconst useRewardsInfo = (\n  gateway: AoGateway | null | undefined,\n  userStake: number,\n) => {\n  const { data: gateways } = useGateways();\n  const { data: protocolBalance } = useProtocolBalance();\n\n  const [userRewards, setUserRewards] = useState<UserRewards>();\n\n  useEffect(() => {\n    if (\n      gateways &&\n      gateway &&\n      protocolBalance &&\n      protocolBalance > 0 &&\n      !isNaN(userStake)\n    ) {\n      const numGateways = gateways\n        ? Object.values(gateways).filter((g) => g.status == 'joined').length\n        : 0;\n      const gatewayRewards = calculateGatewayRewards(\n        new mARIOToken(protocolBalance).toARIO(),\n        numGateways,\n        gateway,\n      );\n\n      const userRewards = calculateUserRewards(\n        gatewayRewards,\n        new ARIOToken(Math.abs(userStake)),\n        userStake < 0,\n      );\n      setUserRewards(userRewards);\n    }\n  }, [gateways, gateway, protocolBalance, userStake]);\n\n  return userRewards;\n};\nexport default useRewardsInfo;\n","import { mARIOToken } from '@ar.io/sdk/web';\nimport { EAY_TOOLTIP_FORMULA, EAY_TOOLTIP_TEXT } from '@src/constants';\nimport useBalances from '@src/hooks/useBalances';\nimport useDelegateStakes from '@src/hooks/useDelegateStakes';\nimport useGateway from '@src/hooks/useGateway';\nimport useRewardsInfo from '@src/hooks/useRewardsInfo';\nimport { useGlobalState } from '@src/store';\nimport { formatAddress, formatWithCommas } from '@src/utils';\nimport { MathJax } from 'better-react-mathjax';\nimport { useEffect, useState } from 'react';\nimport Button, { ButtonType } from '../Button';\nimport LabelValueRow from '../LabelValueRow';\nimport Tooltip from '../Tooltip';\nimport ErrorMessageIcon from '../forms/ErrorMessageIcon';\nimport { validateARIOAmount, validateWalletAddress } from '../forms/validation';\nimport { InfoIcon } from '../icons';\nimport BaseModal from './BaseModal';\nimport ReviewStakeModal from './ReviewStakeModal';\n\nconst StakingModal = ({\n  onClose,\n  ownerWallet,\n}: {\n  open: boolean;\n  onClose: () => void;\n  ownerWallet: string;\n}) => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const { data: balances } = useBalances(walletAddress);\n  const ticker = useGlobalState((state) => state.ticker);\n\n  const [currentStake, setCurrentStake] = useState<number>(0);\n  const [amountToStake, setAmountToStake] = useState<string>('');\n\n  const [showReviewStakeModal, setShowReviewStakeModal] = useState(false);\n\n  const { data: gateway } = useGateway({\n    ownerWalletAddress: ownerWallet,\n  });\n\n  const { data: delegateStakes } = useDelegateStakes(walletAddress?.toString());\n\n  useEffect(() => {\n    if (!gateway || !delegateStakes) {\n      return;\n    }\n    const stake = delegateStakes.stakes.find(\n      (stake) => stake.gatewayAddress === gateway.gatewayAddress,\n    )?.balance;\n    setCurrentStake(new mARIOToken(stake ?? 0).toARIO().valueOf());\n  }, [delegateStakes, gateway]);\n\n  const allowDelegatedStaking =\n    gateway?.settings.allowDelegatedStaking ?? false;\n\n  const newTotalStake = currentStake + parseFloat(amountToStake);\n  const newStake = parseFloat(amountToStake);\n  const rewardsInfo = useRewardsInfo(gateway, newStake);\n  const EAY =\n    rewardsInfo && newTotalStake > 0 && !isNaN(rewardsInfo.EAY)\n      ? (rewardsInfo.EAY * 100).toLocaleString('en-us', {\n          maximumFractionDigits: 2,\n        }) + '%'\n      : '-';\n\n  const minDelegatedStake = gateway\n    ? new mARIOToken(gateway?.settings.minDelegatedStake).toARIO().valueOf()\n    : 10;\n  const minRequiredStakeToAdd = currentStake > 0 ? 1 : minDelegatedStake;\n\n  const validators = {\n    address: validateWalletAddress('Gateway Owner'),\n    stakeAmount: validateARIOAmount(\n      'Stake Amount',\n      ticker,\n      minRequiredStakeToAdd,\n      balances?.ario,\n    ),\n  };\n\n  const isFormValid = () => {\n    if (!gateway || !allowDelegatedStaking) {\n      return false;\n    }\n    return validators.stakeAmount(amountToStake) == undefined;\n  };\n\n  const parsedStake = parseFloat(\n    amountToStake.length === 0 ? '0' : amountToStake,\n  );\n  const remainingBalance =\n    balances && parsedStake <= balances.ario ? balances.ario - parsedStake : -1;\n\n  const setMaxAmount = () => {\n    setAmountToStake((balances?.ario || 0) + '');\n  };\n\n  const disableInput =\n    !gateway ||\n    (balances?.ario || 0) < minRequiredStakeToAdd ||\n    !allowDelegatedStaking;\n\n  const errorMessages = {\n    stakeAmount: validators.stakeAmount(amountToStake),\n    cannotStake:\n      (balances?.ario || 0) < minRequiredStakeToAdd\n        ? `Insufficient balance, at least ${minRequiredStakeToAdd} IO required.`\n        : !allowDelegatedStaking\n          ? 'Gateway does not allow delegated staking.'\n          : undefined,\n  };\n\n  return (\n    <BaseModal onClose={onClose} useDefaultPadding={false}>\n      <div className=\"w-[calc(100vw-2rem)] lg:w-[28.5rem]\">\n        <div className=\"border-b border-b-stroke-low\">\n          <div className=\"rounded-tr-xl border-b border-red-400 bg-grey-700 py-3 text-center\">\n            <span className={'text-gradient'}>Stake</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col p-8 pb-2\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Gateway Owner:\"\n              value={formatAddress(ownerWallet)}\n            />\n\n            <LabelValueRow\n              label=\"Label:\"\n              value={gateway ? gateway.settings.label : '-'}\n            />\n\n            <LabelValueRow\n              label=\"Domain:\"\n              isLink={true}\n              value={gateway ? gateway.settings.fqdn : '-'}\n            />\n          </div>\n\n          <div className=\"mt-8 flex items-center\">\n            <div className=\"text-left text-sm text-mid\">Amount:</div>\n            <div className=\"grow\"></div>\n            <div className=\"text-left text-xs text-low\">\n              {balances &&\n                `Available: ${\n                  remainingBalance >= 0\n                    ? formatWithCommas(+remainingBalance)\n                    : '-'\n                } ${ticker}`}\n            </div>\n          </div>\n          <div className=\"mt-3 flex h-[3.25rem] items-center overflow-hidden rounded-md border border-grey-800\">\n            <input\n              className={\n                'size-full grow  bg-grey-1000 px-6 py-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n              }\n              disabled={disableInput}\n              readOnly={disableInput}\n              type=\"text\"\n              placeholder={`Enter amount of ${ticker} to stake`}\n              value={amountToStake}\n              onChange={(e) => {\n                const textValue = e.target.value;\n\n                if (textValue && isNaN(+e.target.value)) {\n                  return;\n                }\n\n                setAmountToStake(textValue);\n              }}\n            />\n            {gateway &&\n              (amountToStake?.length > 0 ||\n                (balances?.ario || 0) < minRequiredStakeToAdd ||\n                !allowDelegatedStaking) &&\n              (errorMessages.cannotStake || errorMessages.stakeAmount) && (\n                <ErrorMessageIcon\n                  errorMessage={\n                    errorMessages.cannotStake ?? errorMessages.stakeAmount!\n                  }\n                  tooltipPadding={'3'}\n                />\n              )}\n            <Button\n              className=\"mr-3 h-7\"\n              onClick={disableInput ? undefined : setMaxAmount}\n              buttonType={ButtonType.SECONDARY}\n              active={true}\n              title=\"Max\"\n              text=\"Max\"\n            />\n          </div>\n        </div>\n        <div className=\"flex size-full flex-col gap-2 bg-containerL0 px-8 pb-8 pt-4\">\n          <div className=\"flex flex-col gap-2\">\n            <LabelValueRow\n              label=\"Existing Stake:\"\n              value={`${currentStake} ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"New Total Stake:\"\n              value={`${\n                isFormValid()\n                  ? formatWithCommas(currentStake + parseFloat(amountToStake))\n                  : '-'\n              } ${ticker}`}\n            />\n\n            <LabelValueRow\n              label=\"Delegate EAY:\"\n              value={EAY}\n              rightIcon={\n                <Tooltip\n                  message={\n                    <div>\n                      <p>{EAY_TOOLTIP_TEXT}</p>\n                      <MathJax className=\"mt-4\">{EAY_TOOLTIP_FORMULA}</MathJax>\n                    </div>\n                  }\n                >\n                  <InfoIcon className=\"size-[1.125rem]\" />\n                </Tooltip>\n              }\n            />\n          </div>\n          <div\n            className={\n              isFormValid() ? undefined : 'pointer-events-none opacity-30'\n            }\n          >\n            <Button\n              className=\"mt-4 h-[3.25rem] w-full\"\n              onClick={() => {\n                setShowReviewStakeModal(true);\n              }}\n              buttonType={ButtonType.PRIMARY}\n              title=\"Review\"\n              text=\"Review\"\n            />\n          </div>\n        </div>\n        {showReviewStakeModal && gateway && walletAddress && (\n          <ReviewStakeModal\n            amountToStake={parseFloat(amountToStake)}\n            gateway={gateway}\n            onClose={() => setShowReviewStakeModal(false)}\n            onSuccess={() => onClose()}\n            ticker={ticker}\n            walletAddress={walletAddress}\n          />\n        )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default StakingModal;\n"],"names":["__assign","e","n","r","i","__rest","typesettingFailed","MathJax","t2","h","m","v","f","p","_","o","b","s","u","a","l","c","y","reactExports","d","MathJaxBaseContext","g","e2","n2","t3","React","SvgInfoIcon","props","SvgWarningTriangle","t","ke","Fe","_$1","J","X","z","q","Ie","u$2","Ue","Me","o$2","a$1","R","O","p$1","I","T$2","P$1","C","U","K$1","L$1","w","D","M","l$1","A","T","S","y$1","k","u$3","o$1","P","F","T$1","E","W","Q","ue","ce","fe","Te","Re","me","L","j","Se","He","n$1","$f7dceffc5ad7768b$export$4e328f61c538687f","$6179b936705e76d3$export$ae780daf29e6d456","s$1","we","Ne","u$1","I$1","U$1","We","K","Be","Ve","Ke","$e","H","Rt","CircleCheck","createLucideIcon","Circle","EPOCHS_PER_YEAR","EPOCH_DISTRIBUTION_RATIO","GATEWAY_REWARDS_RATIO","calculateOperatorRewards","protocolBalance","totalGateways","gateway","operatorStake","baseGatewayReward","gatewayRewardShareRatio","rewardsSharedPerEpoch","AP","EEY","EAY","calculateGatewayRewards","totalDelegatedStake","RP","calculateUserRewards","gatewayRewards","userDelegatedStake","removingStake","multiplier","delegatedStake","stakeProportion","WithdrawWarning","jsxRuntimeExports","ReviewStakeModal","amountToStake","onSuccess","onClose","walletAddress","ticker","queryClient","useQueryClient","arIOWriteableSDK","useGlobalState","state","txid","setTxid","showBlockingMessageModal","setShowBlockingMessageModal","showSuccessModal","setShowSuccessModal","submitForm","txID","WRITE_OPTIONS","log","showErrorToast","BaseModal","LabelValueRow","formatAddress","formatWithCommas","Button","ButtonType","BlockingMessageModal","SuccessModal","SvgLinkArrow","ReviewWithdrawalModal","amountToWithdraw","withdrawalType","withdrawalFee","returningAmount","dateOfReturn","setDateOfReturn","confirmText","setConfirmText","termsAccepted","formatDateTime","dayjs","instant","useRedelegationFee","arioReadSDK","useQuery","columnHelper","createColumnHelper","GatewaySelectorModal","gateways","onGatewaySelected","tableData","setTableData","prototocolBalance","useProtocolBalance","useGateways","searchText","setSearchText","tableData2","filteredData","data","columns","row","formatPercentage","Tooltip","EAY_TOOLTIP_TEXT","EAY_TOOLTIP_FORMULA","Info","Search","TableView","GatewaySelector","selectedGateway","setSelectedGateway","showGatewaySelectorTable","setShowGatewaySelectorTable","ReviewRedelegateModal","sourceGateway","targetGateway","amountToRedelegate","vaultId","fee","newTotalStake","confirmationInput","setConfirmationInput","redelegationFee","hasFee","totalRedelegatedStake","isDisabled","RedelegateModal","maxRedelegationStake","delegateStakes","useDelegateStakes","setTargetGateway","targetGatewayCurrentStake","setTargetGatewayCurrentStake","setAmountToRedelegate","errorMessage","setErrorMessage","isFormValid","setIsFormValid","showReviewRedelegateModal","setShowReviewRedelegateModal","filteredGateways","setFilteredGateways","filteredGateways2","address","stake","_a","stake2","minDelegatedStake","minRequiredStakeToAdd","validators","validateARIOAmount","amount","maxStake","sourceMinStakeARIO","redelegationAmountError","parsedStake","remainingBalance","setMaxAmount","disableInput","textValue","ErrorMessageIcon","REDELEGATION_FEE_TOOLTIP_TEXT","CancelWithdrawalModal","gatewayAddress","processCancelWithdrawal","MAX_EXPEDITED_WITHDRAWAL_PENALTY_RATE","MIN_EXPEDITED_WITHDRAWAL_PENALTY_RATE","calculateInstantWithdrawalPenaltyRate","vault","date","elapsedTimeMs","totalWithdrawalTimeMs","InstantWithdrawalModal","calculatedFeeAndAmountReturning","setCalculatedFeeAndAmountReturning","penaltyRate","amountReturning","processInstantWithdrawal","useRewardsInfo","userStake","userRewards","setUserRewards","numGateways","userRewards2","StakingModal","ownerWallet","balances","useBalances","currentStake","setCurrentStake","setAmountToStake","showReviewStakeModal","setShowReviewStakeModal","useGateway","allowDelegatedStaking","newStake","rewardsInfo","validateWalletAddress","errorMessages"],"mappings":"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","x_google_ignoreList":[0,3,4,5,6]}