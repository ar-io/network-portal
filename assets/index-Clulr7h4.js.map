{"version":3,"file":"index-Clulr7h4.js","sources":["../../src/components/icons/binoculars_gradient.svg?react","../../node_modules/dexie-react-hooks/dist/dexie-react-hooks.mjs","../../src/pages/Observe/ObservationsTable.tsx","../../src/hooks/usePrescribedNames.ts","../../src/utils/observations.ts","../../src/pages/Observe/ObserveHeader.tsx","../../src/pages/Observe/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgBinocularsGradient = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 16, height: 16, viewBox: \"0 0 16 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Binoculars\" }, /* @__PURE__ */ React.createElement(\"path\", { id: \"Vector\", d: \"M14.825 9.49212C14.7833 9.3756 14.7342 9.26184 14.6781 9.15149L12.0787 3.23774C12.0542 3.18079 12.0189 3.12903 11.975 3.08524C11.7893 2.89948 11.5688 2.75212 11.3261 2.65158C11.0834 2.55104 10.8233 2.4993 10.5606 2.4993C10.2979 2.4993 10.0378 2.55104 9.79515 2.65158C9.55247 2.75212 9.33197 2.89948 9.14625 3.08524C9.05281 3.17879 9.00023 3.30553 9 3.43774V5.00024H7V3.43774C7.00005 3.37206 6.98716 3.30702 6.96207 3.24632C6.93697 3.18562 6.90017 3.13046 6.85375 3.08399C6.66803 2.89823 6.44753 2.75087 6.20485 2.65033C5.96217 2.54979 5.70206 2.49805 5.43938 2.49805C5.17669 2.49805 4.91658 2.54979 4.6739 2.65033C4.43122 2.75087 4.21072 2.89823 4.025 3.08399C3.98105 3.12778 3.94584 3.17954 3.92125 3.23649L1.32188 9.15024C1.2658 9.26059 1.21675 9.37435 1.175 9.49087C1.02781 9.90271 0.97245 10.3417 1.01279 10.7772C1.05313 11.2127 1.1882 11.6341 1.40853 12.0119C1.62886 12.3897 1.92913 12.7147 2.2883 12.9643C2.64747 13.2138 3.05686 13.3818 3.48778 13.4565C3.91871 13.5311 4.36075 13.5107 4.78294 13.3965C5.20513 13.2824 5.59726 13.0773 5.93186 12.7957C6.26646 12.5141 6.53543 12.1627 6.71994 11.7662C6.90446 11.3697 7.00004 10.9376 7 10.5002V6.00024H9V10.5002C8.99978 10.9376 9.09521 11.3698 9.2796 11.7664C9.46398 12.1631 9.73288 12.5146 10.0674 12.7964C10.402 13.0781 10.7941 13.2833 11.2163 13.3976C11.6385 13.5119 12.0806 13.5324 12.5116 13.4578C12.9426 13.3832 13.3521 13.2153 13.7113 12.9658C14.0706 12.7163 14.3709 12.3912 14.5913 12.0134C14.8117 11.6356 14.9468 11.2142 14.9872 10.7786C15.0276 10.3431 14.9722 9.904 14.825 9.49212ZM4.79438 3.73462C4.96108 3.59426 5.16906 3.51219 5.38669 3.50091C5.60432 3.48963 5.81968 3.54975 6 3.67212V8.26649C5.60963 7.91596 5.13399 7.67418 4.62074 7.56536C4.10749 7.45655 3.57466 7.48453 3.07563 7.64649L4.79438 3.73462ZM4 12.5002C3.60444 12.5002 3.21776 12.3829 2.88886 12.1632C2.55996 11.9434 2.30362 11.6311 2.15224 11.2656C2.00087 10.9002 1.96126 10.498 2.03843 10.1101C2.1156 9.7221 2.30608 9.36574 2.58579 9.08603C2.86549 8.80633 3.22186 8.61584 3.60982 8.53867C3.99778 8.4615 4.39991 8.50111 4.76537 8.65249C5.13082 8.80386 5.44318 9.06021 5.66294 9.3891C5.8827 9.718 6 10.1047 6 10.5002C6 11.0307 5.78929 11.5394 5.41421 11.9145C5.03914 12.2895 4.53043 12.5002 4 12.5002ZM10 3.67149C10.1803 3.54912 10.3957 3.48901 10.6133 3.50029C10.8309 3.51157 11.0389 3.59363 11.2056 3.73399L12.9244 7.64524C12.4253 7.48336 11.8924 7.45548 11.3792 7.56441C10.8659 7.67333 10.3903 7.91523 10 8.26587V3.67149ZM12 12.5002C11.6044 12.5002 11.2178 12.3829 10.8889 12.1632C10.56 11.9434 10.3036 11.6311 10.1522 11.2656C10.0009 10.9002 9.96126 10.498 10.0384 10.1101C10.1156 9.7221 10.3061 9.36574 10.5858 9.08603C10.8655 8.80633 11.2219 8.61584 11.6098 8.53867C11.9978 8.4615 12.3999 8.50111 12.7654 8.65249C13.1308 8.80386 13.4432 9.06021 13.6629 9.3891C13.8827 9.718 14 10.1047 14 10.5002C14 11.0307 13.7893 11.5394 13.4142 11.9145C13.0391 12.2895 12.5304 12.5002 12 12.5002Z\", fill: \"url(#paint0_linear_2517_15882)\" })), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"paint0_linear_2517_15882\", x1: 1, y1: 13.5018, x2: 15.5451, y2: 12.7266, gradientUnits: \"userSpaceOnUse\" }, /* @__PURE__ */ React.createElement(\"stop\", { stopColor: \"#F7C3A1\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: 1, stopColor: \"#DF9BE8\" }))));\nexport default SvgBinocularsGradient;\n","import { liveQuery, Dexie } from 'dexie';\nimport React from 'react';\n\nfunction useObservable(observableFactory, arg2, arg3) {\n    // Resolve vars from overloading variants of this function:\n    var deps;\n    var defaultResult;\n    if (typeof observableFactory === 'function') {\n        deps = arg2 || [];\n        defaultResult = arg3;\n    }\n    else {\n        deps = [];\n        defaultResult = arg2;\n    }\n    // Create a ref that keeps the state we need\n    var monitor = React.useRef({\n        hasResult: false,\n        result: defaultResult,\n        error: null,\n    });\n    // We control when component should rerender. Make triggerUpdate\n    // as examplified on React's docs at:\n    // https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n    var _a = React.useReducer(function (x) { return x + 1; }, 0); _a[0]; var triggerUpdate = _a[1];\n    // Memoize the observable based on deps\n    var observable = React.useMemo(function () {\n        // Make it remember previous subscription's default value when\n        // resubscribing.\n        var observable = typeof observableFactory === 'function'\n            ? observableFactory()\n            : observableFactory;\n        if (!observable || typeof observable.subscribe !== 'function') {\n            if (observableFactory === observable) {\n                throw new TypeError(\"Given argument to useObservable() was neither a valid observable nor a function.\");\n            }\n            else {\n                throw new TypeError(\"Observable factory given to useObservable() did not return a valid observable.\");\n            }\n        }\n        if (!monitor.current.hasResult &&\n            typeof window !== 'undefined' // Don't do this in SSR\n        ) {\n            // Optimize for BehaviorSubject and other observables implementing getValue():\n            if (typeof observable.hasValue !== 'function' || observable.hasValue()) {\n                if (typeof observable.getValue === 'function') {\n                    monitor.current.result = observable.getValue();\n                    monitor.current.hasResult = true;\n                }\n                else {\n                    // Find out if the observable has a current value: try get it by subscribing and\n                    // unsubscribing synchronously\n                    var subscription = observable.subscribe(function (val) {\n                        monitor.current.result = val;\n                        monitor.current.hasResult = true;\n                    });\n                    // Unsubscribe directly. We only needed any synchronous value if it was possible.\n                    if (typeof subscription === 'function') {\n                        subscription();\n                    }\n                    else {\n                        subscription.unsubscribe();\n                    }\n                }\n            }\n        }\n        return observable;\n    }, deps);\n    // Integrate with react devtools:\n    React.useDebugValue(monitor.current.result);\n    // Subscribe to the observable\n    React.useEffect(function () {\n        var subscription = observable.subscribe(function (val) {\n            var current = monitor.current;\n            if (current.error !== null || current.result !== val) {\n                current.error = null;\n                current.result = val;\n                current.hasResult = true;\n                triggerUpdate();\n            }\n        }, function (err) {\n            var current = monitor.current;\n            if (current.error !== err) {\n                current.error = err;\n                triggerUpdate();\n            }\n        });\n        return typeof subscription === 'function'\n            ? subscription // Support observables that return unsubscribe directly\n            : subscription.unsubscribe.bind(subscription);\n    }, deps);\n    // Throw if observable has emitted error so that\n    // an ErrorBoundrary can catch it\n    if (monitor.current.error)\n        throw monitor.current.error;\n    // Return the current result\n    return monitor.current.result;\n}\n\nfunction useLiveQuery(querier, deps, defaultResult) {\n    return useObservable(function () { return liveQuery(querier); }, deps || [], defaultResult);\n}\n\nfunction usePermissions(firstArg, table, obj) {\n    if (!firstArg)\n        throw new TypeError(\"Invalid arguments to usePermissions(): undefined or null\");\n    var db;\n    if (arguments.length >= 3) {\n        if (!('transaction' in firstArg)) {\n            // Using ducktyping instead of instanceof in case there are multiple Dexie modules in app.\n            // First arg is  ensures first arg is a Dexie instance\n            throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance\");\n        }\n        if (typeof table !== 'string')\n            throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 2nd arg must be string\");\n        if (!obj || typeof obj !== 'object')\n            throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object\");\n        db = firstArg;\n    }\n    else {\n        if (firstArg instanceof Dexie)\n            throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.\");\n        if (typeof firstArg.table === 'function' &&\n            typeof firstArg.db === 'object') {\n            db = firstArg.db;\n            obj = firstArg;\n            table = firstArg.table();\n        }\n        else {\n            throw new TypeError(\"Invalid arguments to usePermissions(). \" +\n                \"Expected usePermissions(entity: DexieCloudEntity) or \" +\n                \"usePermissions(db: Dexie, table: string, obj: DexieCloudObject)\");\n        }\n    }\n    if (!('cloud' in db))\n        throw new Error(\"usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.\");\n    if (!('permissions' in db.cloud))\n        throw new Error(\"usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.\");\n    return useObservable(\n    // @ts-ignore\n    function () { return db.cloud.permissions(obj, table); }, [obj.realmId, obj.owner, table]);\n}\n\nexport { useLiveQuery, useObservable, usePermissions };\n//# sourceMappingURL=dexie-react-hooks.mjs.map\n","import Bubble from '@src/components/Bubble';\nimport ColumnSelector from '@src/components/ColumnSelector';\nimport TableView from '@src/components/TableView';\nimport { useGlobalState } from '@src/store';\nimport { Assessment } from '@src/types';\nimport { formatDateTime } from '@src/utils';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { useEffect, useState } from 'react';\n\ninterface TableData {\n  timestamp: Date;\n  arnsNames: string;\n  ownershipResult: boolean;\n  arnsResult: boolean;\n  overallResult: boolean;\n  assessment: Assessment;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst ObservationsTable = ({\n  gatewayAddress,\n  setSelectedAssessment,\n}: {\n  gatewayAddress: string;\n  setSelectedAssessment: React.Dispatch<\n    React.SetStateAction<Assessment | undefined>\n  >;\n}) => {\n  const networkPortalDB = useGlobalState((state) => state.networkPortalDB);\n  const observations = useLiveQuery(async () => {\n    return networkPortalDB.observations\n      .where('gatewayAddress')\n      .equals(gatewayAddress)\n      .toArray();\n  });\n\n  const [tableData, setTableData] = useState<Array<TableData>>([]);\n\n  useEffect(() => {\n    if (observations) {\n      const tableData: Array<TableData> = observations.map((observation) => {\n        const assessment = observation.assessment;\n\n        const arnsNames = Object.keys(\n          assessment.arnsAssessments.chosenNames,\n        ).join(', ');\n\n        return {\n          timestamp: new Date(observation.timestamp),\n          arnsNames,\n          ownershipResult: assessment.ownershipAssessment.pass,\n          arnsResult: assessment.arnsAssessments.pass,\n          overallResult: assessment.pass,\n          assessment,\n        };\n      });\n      setTableData(tableData);\n    }\n  }, [observations]);\n\n  // Define columns for the table\n  const columns: ColumnDef<TableData, any>[] = [\n    columnHelper.accessor('timestamp', {\n      id: 'timestamp',\n      header: 'Timestamp',\n      sortDescFirst: true,\n      cell: ({ row }) => formatDateTime(new Date(row.original.timestamp)),\n    }),\n    columnHelper.accessor('arnsNames', {\n      id: 'arnsNames',\n      header: 'ArNS Names',\n      sortDescFirst: false,\n    }),\n    columnHelper.accessor('ownershipResult', {\n      id: 'ownershipResult',\n      header: 'Ownership Result',\n      sortDescFirst: false,\n      cell: ({ row }) => <Bubble value={row.original.ownershipResult} />,\n    }),\n    columnHelper.accessor('arnsResult', {\n      id: 'arnsResult',\n      header: 'ArNS Result',\n      sortDescFirst: false,\n      cell: ({ row }) => <Bubble value={row.original.arnsResult} />,\n    }),\n    columnHelper.accessor('overallResult', {\n      id: 'overallResult',\n      header: 'Overall Result',\n      sortDescFirst: false,\n      cell: ({ row }) => <Bubble value={row.original.overallResult} />,\n    }),\n  ];\n\n  return (\n    <div>\n      <div className=\"flex w-full items-center rounded-t-xl border border-grey-600 bg-containerL3 py-[0.9375rem] pl-6 pr-[0.8125rem]\">\n        <div className=\"grow text-sm text-mid\">Reports</div>\n        <ColumnSelector tableId=\"observations\" columns={columns} />\n      </div>\n      <TableView\n        columns={columns}\n        data={tableData || []}\n        isLoading={false}\n        noDataFoundText=\"No observations found.\"\n        defaultSortingState={{ id: 'timestamp', desc: true }}\n        onRowClick={(row) => {\n          setSelectedAssessment(row.assessment);\n        }}\n        tableId=\"observations\"\n      />\n    </div>\n  );\n};\n\nexport default ObservationsTable;\n","import { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst DEFAULT_NAMES = ['dapp_ardrive', 'arns'];\n\nconst usePrescribedNames = () => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const currentEpoch = useGlobalState((state) => state.currentEpoch);\n\n  const queryResults = useQuery({\n    queryKey: ['prescribedNames', arIOReadSDK, currentEpoch?.epochIndex || -1],\n    queryFn: () => {\n      if (arIOReadSDK && currentEpoch) {\n        return arIOReadSDK.getPrescribedNames(currentEpoch).catch((e) => {\n          // log error\n          console.error('Failed to fetch prescribed names', {\n            message: e.message,\n          });\n          // fallback to defaults\n          return DEFAULT_NAMES;\n        });\n      }\n      // log error\n      throw new Error('arIOReadSDK or currentEpoch not available');\n    },\n    enabled: !!arIOReadSDK && !!currentEpoch,\n    staleTime: Infinity,\n  });\n\n  return queryResults;\n};\n\nexport default usePrescribedNames;\n","/* Based on code by elliotsayes from https://github.com/elliotsayes/gateway-explorer */\n\nimport { AoGatewayWithAddress } from '@ar.io/sdk/web';\nimport {\n  log,\n  NAME_PASS_THRESHOLD,\n  REFERENCE_GATEWAY_FQDN,\n} from '@src/constants';\nimport { ArNSAssessment, Assessment, OwnershipAssessment } from '@src/types';\nimport ky, { TimeoutError } from 'ky';\nimport { arrayBufferToBase64Url } from '.';\n\n// create a ky instance with default options\nconst gatewayRequest = ky.create({\n  timeout: 5000,\n  headers: {\n    'Accept-Encoding': 'identity',\n  },\n  throwHttpErrors: false,\n  cache: 'no-store',\n});\n\nexport const assessOwnership = async (\n  gateway: AoGatewayWithAddress,\n): Promise<OwnershipAssessment> => {\n  try {\n    const res = await gatewayRequest.get(\n      `${gateway.settings.protocol}://${gateway.settings.fqdn}:${gateway.settings.port}/ar-io/info`,\n    );\n    if (res.status !== 200) {\n      return {\n        expectedWallets: [gateway.gatewayAddress],\n        observedWallet: '',\n        pass: false,\n      };\n    }\n\n    const data = (await res.json()) as any;\n\n    const expectedWallet = gateway.gatewayAddress;\n    const observedWallet = data.wallet;\n\n    const assessment: OwnershipAssessment = {\n      expectedWallets: [expectedWallet],\n      observedWallet: observedWallet,\n      pass: expectedWallet === observedWallet,\n    };\n\n    return assessment;\n  } catch (error) {\n    return {\n      expectedWallets: [gateway.gatewayAddress],\n      observedWallet: '',\n      pass: false,\n    };\n  }\n};\n\nconst fetchArnsData = async (arnsNameURL: string) => {\n  try {\n    const res = await gatewayRequest.get(arnsNameURL);\n    if (res.status === 404) {\n      return {\n        statusCode: 404,\n        resolvedId: '',\n        ttlSeconds: '',\n        contentType: '',\n        contentLength: '',\n        dataHashDigest: '',\n      };\n    }\n\n    if (res.status !== 200) {\n      throw new Error('Unable to fetch ARNS data');\n    }\n\n    const data = await res.arrayBuffer();\n\n    const dataHash = await crypto.subtle.digest('SHA-256', data);\n    const dataHashBase64URL = arrayBufferToBase64Url(dataHash);\n\n    return {\n      statusCode: res.status,\n      resolvedId: res.headers.get('x-arns-resolved-id'),\n      ttlSeconds: res.headers.get('x-arns-ttl-seconds'),\n      contentType: res.headers.get('content-type'),\n      contentLength: res.headers.get('content-length'),\n      dataHashDigest: dataHashBase64URL,\n    };\n  } catch (error) {\n    if (error instanceof TimeoutError) {\n      return {\n        statusCode: undefined,\n        resolvedId: '',\n        ttlSeconds: '',\n        contentType: '',\n        contentLength: '',\n        dataHashDigest: '',\n        failureReason: 'Timeout awaiting response for 5000ms',\n      };\n    }\n    log.error(error);\n    return undefined;\n  }\n};\n\nconst assessArNSName = async (\n  gateway: AoGatewayWithAddress,\n  arnsName: string,\n): Promise<[string, ArNSAssessment]> => {\n  const referenceURL = `https://${arnsName}.${REFERENCE_GATEWAY_FQDN}:443`;\n  const gatewayURL = `${gateway.settings.protocol}://${arnsName}.${gateway.settings.fqdn}:${gateway.settings.port}`;\n\n  const referenceRes = await fetchArnsData(referenceURL);\n\n  const startTimestamp = Date.now();\n  const gatewayRes = await fetchArnsData(gatewayURL);\n\n  const endTimestamp = Date.now();\n\n  if (!referenceRes) {\n    throw new Error('Unable to fetch reference ARNS data');\n  }\n\n  const arnsAssessment: ArNSAssessment = {\n    assesedAt: Date.now(),\n    expectedDataHash: referenceRes.dataHashDigest,\n    expectedId: referenceRes.resolvedId ?? '',\n    expectedStatusCode: referenceRes.statusCode,\n    pass:\n      referenceRes.resolvedId === gatewayRes?.resolvedId &&\n      referenceRes.resolvedId !== null &&\n      referenceRes.dataHashDigest == gatewayRes?.dataHashDigest &&\n      referenceRes.statusCode == gatewayRes?.statusCode,\n    resolvedDataHash: gatewayRes?.dataHashDigest ?? '',\n    resolvedId: gatewayRes?.resolvedId ?? '',\n    resolvedStatusCode: gatewayRes?.statusCode ?? 0,\n    timings: {\n      total: endTimestamp - startTimestamp,\n      dns: undefined,\n      download: undefined,\n      firstByte: undefined,\n      request: undefined,\n      tcp: undefined,\n      tls: undefined,\n      wait: undefined,\n    },\n  };\n  return [arnsName, arnsAssessment];\n};\n\nexport const performAssessment = async (\n  gateway: AoGatewayWithAddress,\n  prescribedNames: string[],\n  chosenNames: string[],\n): Promise<Assessment> => {\n  const ownershipAssessment = await assessOwnership(gateway);\n\n  const chosenNamesResults = await Promise.all(\n    chosenNames.map((name) => assessArNSName(gateway, name)),\n  );\n  const prescribedNamesResults = await Promise.all(\n    prescribedNames.map((name) => assessArNSName(gateway, name)),\n  );\n\n  const nameCount = prescribedNames.length + chosenNames.length;\n  const namePassCount = [\n    ...chosenNamesResults,\n    ...prescribedNamesResults,\n  ].reduce((count, assessment) => (assessment[1].pass ? count + 1 : count), 0);\n  const arnsAssessmentPass = namePassCount >= nameCount * NAME_PASS_THRESHOLD;\n\n  const assessment: Assessment = {\n    arnsAssessments: {\n      chosenNames: Object.fromEntries(chosenNamesResults),\n      pass: arnsAssessmentPass,\n      prescribedNames: Object.fromEntries(prescribedNamesResults),\n    },\n    ownershipAssessment: ownershipAssessment,\n    pass: arnsAssessmentPass && ownershipAssessment.pass,\n  };\n\n  return assessment;\n};\n","import { AoGateway } from '@ar.io/sdk/web';\nimport Button, { ButtonType } from '@src/components/Button';\nimport Placeholder from '@src/components/Placeholder';\nimport Profile from '@src/components/Profile';\nimport { BinocularsGradientIcon, BinocularsIcon } from '@src/components/icons';\nimport { log } from '@src/constants';\nimport usePrescribedNames from '@src/hooks/usePrescribedNames';\nimport { useGlobalState } from '@src/store';\nimport { Assessment } from '@src/types';\nimport { performAssessment } from '@src/utils/observations';\nimport { showErrorToast } from '@src/utils/toast';\nimport { ChevronRightIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nconst isSearchStringValid = (searchString: string) => {\n  return (\n    searchString.length > 0 &&\n    searchString.split(',').every((s) => s.trim().length > 0)\n  );\n};\n\nconst ObserveHeader = ({\n  gateway,\n  setSelectedAssessment,\n}: {\n  gateway?: AoGateway | null;\n  setSelectedAssessment: React.Dispatch<\n    React.SetStateAction<Assessment | undefined>\n  >;\n}) => {\n  const params = useParams();\n  const ownerId = params?.ownerId;\n  const networkPortalDB = useGlobalState((state) => state.networkPortalDB);\n\n  const [runningObservation, setRunningObservation] = useState(false);\n\n  // fetch current prescribed names, fallback to defaults\n  const { data: prescribedNames, isLoading: loadingPrescribedNames } =\n    usePrescribedNames();\n\n  const [arnsNamesToSearch, setArnsNamesToSearch] = useState(\n    prescribedNames?.join(', ') ?? '',\n  );\n\n  const runObservation = async () => {\n    setRunningObservation(true);\n    try {\n      const assessment = await performAssessment(\n        { ...gateway!, gatewayAddress: ownerId! },\n        [],\n        arnsNamesToSearch\n          .split(',')\n          .reduce(\n            (acc, s) => (s.trim().length > 0 ? [...acc, s.trim()] : acc),\n            [] as string[],\n          ),\n      );\n\n      log.debug(assessment);\n\n      setSelectedAssessment(assessment);\n\n      await networkPortalDB.observations.add({\n        gatewayAddress: ownerId!,\n        timestamp: Date.now(),\n        assessment,\n      });\n    } catch (e) {\n      showErrorToast(`${e}`);\n    } finally {\n      setRunningObservation(false);\n    }\n  };\n\n  // update prescribed names after loading\n  useEffect(() => {\n    setArnsNamesToSearch(prescribedNames?.join(', ') ?? '');\n  }, [prescribedNames]);\n\n  return (\n    <header className=\"mt-6 flex-col text-clip rounded-xl border leading-[1.4] dark:border-transparent-100-8 dark:bg-grey-1000 dark:text-grey-300\">\n      <div className=\"flex items-center gap-3 py-5 pl-6 pr-4 text-sm\">\n        <div className=\"text-mid\">\n          <Link to={'/gateways'}>Gateways</Link>\n        </div>\n        <ChevronRightIcon className=\"size-4 text-mid\" strokeWidth={1.5} />\n        {gateway ? (\n          <Link className=\"text-mid\" to={`/gateways/${ownerId}`}>\n            {gateway.settings.label}\n          </Link>\n        ) : (\n          <Placeholder />\n        )}\n        <ChevronRightIcon className=\"size-4 text-mid\" strokeWidth={1.5} />\n        <Link className=\"text-mid\" to={`/gateways/${ownerId}/reports`}>\n          Observe\n        </Link>\n        <div className=\"grow\" />\n        <div className=\"items-center\">\n          <Profile />\n        </div>\n      </div>\n      <div className=\"flex items-center gap-3 rounded-b-xl bg-grey-900 px-6 py-5\">\n        <BinocularsIcon className=\"size-4\" />\n        <div className=\"text-high\">Observe</div>\n        <div className=\"grow\" />\n        <div className=\"text-xs text-high\">ArNS names:</div>\n        <input\n          className={\n            'h-7 w-[12.5rem] rounded-md border border-grey-700 bg-grey-1000 p-3 text-sm text-mid outline-none placeholder:text-grey-400 focus:text-high'\n          }\n          type=\"text\"\n          disabled={!gateway || loadingPrescribedNames}\n          readOnly={!gateway || loadingPrescribedNames}\n          value={arnsNamesToSearch}\n          onChange={(e) => {\n            setArnsNamesToSearch(e.target.value);\n          }}\n        />\n\n        <div\n          className={\n            gateway &&\n            isSearchStringValid(arnsNamesToSearch) &&\n            !runningObservation\n              ? undefined\n              : 'pointer-events-none opacity-30'\n          }\n        >\n          <Button\n            title=\"Run Observation\"\n            buttonType={ButtonType.PRIMARY}\n            text=\"Run Observation\"\n            icon={<BinocularsGradientIcon className=\"size-4\" />}\n            onClick={() => runObservation()}\n          />\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default ObserveHeader;\n","import AssessmentDetailsPanel from '@src/components/AssessmentDetailsPanel';\nimport useGateway from '@src/hooks/useGateway';\nimport { Assessment } from '@src/types';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ObservationsTable from './ObservationsTable';\nimport ObserveHeader from './ObserveHeader';\n\nconst Report = () => {\n  const params = useParams();\n  const ownerId = params?.ownerId;\n\n  const { isLoading, data: gateway } = useGateway({\n    ownerWalletAddress: ownerId,\n  });\n\n  const [selectedAssessment, setSelectedAssessment] = useState<Assessment>();\n\n  return (\n    <div className=\"flex max-w-full flex-col gap-6 overflow-auto\">\n      <ObserveHeader\n        gateway={gateway}\n        setSelectedAssessment={setSelectedAssessment}\n      />\n      {isLoading ? undefined : gateway && ownerId ? (\n        <ObservationsTable\n          gatewayAddress={ownerId}\n          setSelectedAssessment={setSelectedAssessment}\n        />\n      ) : (\n        <div>Unable to gateway with ID {ownerId}.</div>\n      )}\n      {selectedAssessment && gateway && (\n        <AssessmentDetailsPanel\n          observedHost={gateway.settings.fqdn}\n          assessment={selectedAssessment}\n          onClose={() => setSelectedAssessment(undefined)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Report;\n"],"names":["SvgBinocularsGradient","props","reactExports","useObservable","observableFactory","arg2","arg3","deps","defaultResult","monitor","React","_a","x","triggerUpdate","observable","subscription","val","current","err","useLiveQuery","querier","liveQuery","columnHelper","createColumnHelper","ObservationsTable","gatewayAddress","setSelectedAssessment","networkPortalDB","useGlobalState","state","observations","tableData","setTableData","tableData2","observation","assessment","arnsNames","columns","row","formatDateTime","jsxRuntimeExports","Bubble","ColumnSelector","TableView","DEFAULT_NAMES","usePrescribedNames","arIOReadSDK","currentEpoch","useQuery","e","gatewayRequest","ky","assessOwnership","gateway","res","data","expectedWallet","observedWallet","fetchArnsData","arnsNameURL","dataHash","dataHashBase64URL","arrayBufferToBase64Url","error","TimeoutError","log","assessArNSName","arnsName","referenceURL","REFERENCE_GATEWAY_FQDN","gatewayURL","referenceRes","startTimestamp","gatewayRes","endTimestamp","arnsAssessment","performAssessment","prescribedNames","chosenNames","ownershipAssessment","chosenNamesResults","name","prescribedNamesResults","nameCount","arnsAssessmentPass","count","assessment2","NAME_PASS_THRESHOLD","isSearchStringValid","searchString","ObserveHeader","params","useParams","ownerId","runningObservation","setRunningObservation","loadingPrescribedNames","arnsNamesToSearch","setArnsNamesToSearch","runObservation","acc","s","showErrorToast","Link","ChevronRight","Placeholder","Profile","SvgBinoculars","Button","ButtonType","Report","isLoading","useGateway","selectedAssessment","AssessmentDetailsPanel"],"mappings":"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","x_google_ignoreList":[1]}