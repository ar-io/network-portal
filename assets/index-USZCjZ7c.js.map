{"version":3,"file":"index-USZCjZ7c.js","sources":["../../src/hooks/useObservations.ts","../../src/hooks/useObservers.ts","../../src/pages/Observers/Banner.tsx","../../src/pages/Observers/ObserversTable.tsx","../../src/pages/Observers/index.tsx"],"sourcesContent":["import { AoEpochData } from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst useObservations = (epoch?: AoEpochData) => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const queryResults = useQuery({\n    queryKey: ['observations', arIOReadSDK, epoch?.epochIndex || -1],\n    queryFn: () => {\n      if (arIOReadSDK && epoch) {\n        return arIOReadSDK.getObservations(epoch);\n      }\n      throw new Error('arIOReadSDK or currentEpoch not available');\n    },\n    enabled: !!arIOReadSDK && !!epoch,\n  });\n\n  return queryResults;\n};\n\nexport default useObservations;\n","import { AoEpochData } from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/store';\nimport { useQuery } from '@tanstack/react-query';\n\nconst useObservers = (epoch?: AoEpochData) => {\n  const arIOReadSDK = useGlobalState((state) => state.arIOReadSDK);\n\n  const queryResults = useQuery({\n    queryKey: ['prescribedObservers', arIOReadSDK, epoch?.epochIndex || -1],\n    queryFn: () => {\n      if (arIOReadSDK && epoch) {\n        return arIOReadSDK.getPrescribedObservers(epoch);\n      }\n      throw new Error('arIOReadSDK or epoch not available');\n    },\n    enabled: !!arIOReadSDK && epoch?.epochIndex !== undefined,\n  });\n\n  return queryResults;\n};\n\nexport default useObservers;\n","import {\n  GatewayHoverIcon,\n  GatewayIcon,\n  ObserversBgIcon,\n  ObserversConnectIcon,\n  PinkArrowIcon,\n  StartGatewayCubes,\n} from '@src/components/icons';\nimport ConnectModal from '@src/components/modals/ConnectModal';\nimport StartGatewayModal from '@src/components/modals/StartGatewayModal';\nimport { GatewayStatus, useGatewayInfo } from '@src/hooks/useGatewayInfo';\nimport useObservations from '@src/hooks/useObservations';\nimport useObservers from '@src/hooks/useObservers';\nimport { useGlobalState } from '@src/store';\nimport { formatAddress, formatPercentage } from '@src/utils';\nimport { useState } from 'react';\n\nconst InfoSection = ({ label, value }: { label: string; value: string }) => {\n  return (\n    <div className=\"inline-flex h-[2.375rem] flex-col items-start justify-start gap-1 border-r px-12 text-left dark:border-transparent-100-8\">\n      <div className=\"pt-1 text-xs leading-none text-low\">{label}</div>\n      <div className=\"text-nowrap text-xs text-mid\">{value}</div>\n    </div>\n  );\n};\n\nconst Banner = () => {\n  const walletAddress = useGlobalState((state) => state.walletAddress);\n  const currentEpoch = useGlobalState((state) => state.currentEpoch);\n\n  const [loginOpen, setLoginOpen] = useState(false);\n  const [startGatewayOpen, setStartGatewayOpen] = useState(false);\n\n  const { data: observers } = useObservers(currentEpoch);\n  const { data: observations } = useObservations(currentEpoch);\n\n  const { gateway, gatewayStatus } = useGatewayInfo();\n\n  const myObserver = observers?.find(\n    (obs) => obs.gatewayAddress == walletAddress?.toString(),\n  );\n  const prescribed = myObserver != undefined;\n\n  const prescribedStatus = prescribed\n    ? observations?.reports[walletAddress?.toString() || '']\n      ? 'Prescribed - Report Submitted'\n      : 'Prescribed - Report Pending'\n    : 'Not prescribed for this epoch';\n\n  const numFailedGatewaysFound = myObserver\n    ? observations?.reports[myObserver.gatewayAddress]\n      ? Object.values(observations.failureSummaries).reduce((acc, summary) => {\n          return acc + (summary.includes(myObserver.gatewayAddress) ? 1 : 0);\n        }, 0)\n      : 'Pending'\n    : 'N/A';\n\n  return (\n    <div>\n      {!walletAddress ? (\n        <div>\n          <button\n            className=\"group relative h-[7.5rem] w-full overflow-hidden rounded-xl bg-grey-800\"\n            onClick={() => {\n              if (!walletAddress) {\n                setLoginOpen(true);\n              } else {\n                setStartGatewayOpen(true);\n              }\n            }}\n          >\n            <div\n              className=\"invisible size-full rounded-xl\n       bg-gradient-to-r from-gradient-primary-start to-gradient-primary-end p-px group-hover:visible\"\n            >\n              <div className=\"size-full overflow-hidden rounded-xl bg-grey-800\">\n                <ObserversBgIcon className=\"relative left-[calc(4rem-1px)]  top-[calc(2rem-1px)] z-0 opacity-10\" />\n              </div>\n            </div>\n            <ObserversBgIcon className=\"visible absolute left-16 top-8 z-0 opacity-10  group-hover:invisible\" />\n            <div className=\"absolute top-0 z-10 flex size-full flex-col items-center justify-center bg-transparent py-6 align-middle\">\n              <div className=\"flex items-center gap-2\">\n                <ObserversConnectIcon className=\"size-4\" />\n                <div className=\"text-gradient\">Connect your wallet</div>{' '}\n              </div>\n\n              <div className=\"pt-2 text-sm text-low\">\n                Login to view your observer status.\n              </div>\n            </div>\n          </button>\n        </div>\n      ) : gatewayStatus == GatewayStatus.NOT_FOUND ? (\n        <div>\n          <button\n            className=\"group relative h-[7.5rem] w-full overflow-hidden rounded-xl bg-grey-800\"\n            onClick={() => {\n              setStartGatewayOpen(true);\n            }}\n          >\n            <div\n              className=\"invisible size-full rounded-xl\n       bg-gradient-to-r from-gradient-primary-start to-gradient-primary-end p-px group-hover:visible\"\n            >\n              <div className=\"size-full overflow-hidden rounded-xl bg-grey-800\">\n                <StartGatewayCubes className=\"relative -top-px left-[calc(4rem-1px)] z-0\" />\n              </div>\n            </div>\n            <StartGatewayCubes className=\"visible absolute left-16 top-0 z-0 group-hover:invisible\" />\n            <div className=\"absolute top-0 z-10 flex size-full flex-col items-center justify-center bg-transparent py-6 align-middle\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-gradient\">Configure your gateway</div>{' '}\n                <PinkArrowIcon className=\"size-3\" />\n              </div>\n\n              <div className=\"pt-2 text-sm text-low\">\n                Configure a gateway to become an observer.\n              </div>\n            </div>\n          </button>\n        </div>\n      ) : gateway ? (\n        <div className=\"relative min-h-fit w-full overflow-hidden rounded-xl border border-grey-800 lg:h-[7.5rem]\">\n          <div className=\"top-0 z-10 flex size-full flex-col bg-transparent py-6 align-middle lg:absolute\">\n            <div className=\"flex items-center gap-3 pl-6\">\n              <GatewayIcon className=\"block h-3 w-4 group-hover:hidden\" />\n              <GatewayHoverIcon className=\"hidden h-3 w-4 group-hover:block\" />\n              <div className=\"group-hover:text-gradient text-sm text-high\">\n                My Gateway Observer Status\n              </div>\n            </div>\n            <div className=\"relative mt-3 flex flex-col pl-1.5 lg:flex-row\">\n              <InfoSection\n                label=\"Observer Address\"\n                value={formatAddress(gateway.observerAddress)}\n              />\n              <InfoSection label=\"Status\" value={prescribedStatus} />\n              {myObserver && (\n                <>\n                  <InfoSection\n                    label=\"Observation Chance\"\n                    value={\n                      myObserver\n                        ? formatPercentage(myObserver.normalizedCompositeWeight)\n                        : 'N/A'\n                    }\n                  />\n                  <InfoSection\n                    label=\"Observer Performance\"\n                    value={\n                      myObserver\n                        ? formatPercentage(myObserver.observerPerformanceRatio)\n                        : 'N/A'\n                    }\n                  />\n                  <InfoSection\n                    label=\"Failed Gateways\"\n                    value={numFailedGatewaysFound.toString()}\n                  />\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"relative h-[7.5rem] w-full justify-center overflow-hidden rounded-xl bg-grey-800 \">\n          <div className=\"h-full content-center text-center text-sm text-low\">\n            Loading gateway information...\n          </div>\n        </div>\n      )}\n      {loginOpen && <ConnectModal onClose={() => setLoginOpen(false)} />}\n      {startGatewayOpen && (\n        <StartGatewayModal onClose={() => setStartGatewayOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default Banner;\n","import { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport AddressCell from '@src/components/AddressCell';\nimport ColumnSelector from '@src/components/ColumnSelector';\nimport CopyButton from '@src/components/CopyButton';\nimport Dropdown from '@src/components/Dropdown';\nimport TableView from '@src/components/TableView';\nimport Tooltip from '@src/components/Tooltip';\nimport useEpochs from '@src/hooks/useEpochs';\nimport useGateways from '@src/hooks/useGateways';\nimport useObservations from '@src/hooks/useObservations';\nimport useObservers from '@src/hooks/useObservers';\nimport { formatPercentage } from '@src/utils';\n\ninterface TableData {\n  label: string;\n  domain: string;\n  gatewayAddress: string;\n  observerAddress: string;\n  ncw: number;\n  successRatio: number;\n  observedEpochs: number;\n  prescribedEpochs: number;\n  reportStatus: string;\n  failedGateways?: number;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nconst ObserversTable = () => {\n  const navigate = useNavigate();\n\n  const { data: epochs } = useEpochs();\n  const [selectedEpochIndex, setSelectedEpochIndex] = useState(0);\n\n  const selectedEpoch = epochs?.[selectedEpochIndex];\n\n  const { isLoading, data: observers } = useObservers(selectedEpoch);\n  const { isLoading: observationsLoading, data: observations } =\n    useObservations(selectedEpoch);\n  const { isLoading: gatewaysLoading, data: gateways } = useGateways();\n\n  const [observersTableData, setObserversTableData] = useState<\n    Array<TableData>\n  >([]);\n\n  useEffect(() => {\n    if (!observers || !gateways || !observations) {\n      return;\n    }\n\n    const observersTableData: Array<TableData> = observers.reduce(\n      (acc, observer) => {\n        const gateway = gateways[observer.gatewayAddress];\n\n        const submitted = observations.reports[observer.observerAddress];\n        const status = submitted\n          ? 'Submitted'\n          : selectedEpochIndex == 0\n            ? 'Pending'\n            : 'Did not report';\n        const numFailedGatewaysFound = submitted\n          ? Object.values(observations.failureSummaries).reduce(\n              (acc, summary) => {\n                return (\n                  acc + (summary.includes(observer.observerAddress) ? 1 : 0)\n                );\n              },\n              0,\n            )\n          : undefined;\n\n        return [\n          ...acc,\n          {\n            label: gateway.settings.label,\n            domain: gateway.settings.fqdn,\n\n            gatewayAddress: observer.gatewayAddress,\n            observerAddress: observer.observerAddress,\n            ncw: observer.normalizedCompositeWeight,\n            observedEpochs: gateway.stats.observedEpochCount + 1, // add one as the contract avoids divide by 0 by incrementing the numerator and denominator by 1 when computing performance ratio\n            prescribedEpochs: gateway.stats.prescribedEpochCount + 1, // add one as the contract avoids divide by 0 by incrementing the numerator and denominator by 1 when computing performance ratio\n            successRatio:\n              // there will be a period where old epoch notices have the old field, and new epoch notices have the new field, so check both\n              observer.observerPerformanceRatio ||\n              observer.observerRewardRatioWeight,\n            reportStatus: status,\n            failedGateways: numFailedGatewaysFound,\n          },\n        ];\n      },\n      [] as Array<TableData>,\n    );\n    setObserversTableData(observersTableData);\n  }, [observers, gateways, observations, selectedEpochIndex]);\n\n  // Define columns for the table\n  const columns: ColumnDef<TableData, any>[] = [\n    columnHelper.accessor('label', {\n      id: 'label',\n      header: 'Label',\n      sortDescFirst: false,\n    }),\n    columnHelper.accessor('domain', {\n      id: 'domain',\n      header: 'Domain',\n      sortDescFirst: false,\n      cell: ({ row }) => (\n        <div className=\"flex items-center gap-2\">\n          <a\n            href={`https://${row.getValue('domain')}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            onClick={(e) => {\n              e.stopPropagation();\n            }}\n            className=\"text-gradient\"\n          >\n            {row.getValue('domain')}\n          </a>\n          <CopyButton textToCopy={row.getValue('domain')} />\n        </div>\n      ),\n    }),\n    columnHelper.accessor('gatewayAddress', {\n      id: 'gatewayAddress',\n      header: 'Gateway Address',\n      sortDescFirst: false,\n      cell: ({ row }) => (\n        <AddressCell address={row.getValue('gatewayAddress')} />\n      ),\n    }),\n\n    columnHelper.accessor('observerAddress', {\n      id: 'observerAddress',\n      header: 'Observer Address',\n      sortDescFirst: false,\n      cell: ({ row }) => (\n        <AddressCell address={row.getValue('observerAddress')} />\n      ),\n    }),\n    columnHelper.accessor('ncw', {\n      id: 'ncw',\n      header: 'Observation Chance',\n      sortDescFirst: true,\n      cell: ({ row }) => formatPercentage(row.original.ncw),\n    }),\n    columnHelper.accessor('successRatio', {\n      id: 'successRatio',\n      header: 'Observer Performance',\n      sortDescFirst: true,\n      cell: ({ row }) => (\n        <Tooltip\n          message={\n            <div>\n              <div>Observed Epochs: {row.original.observedEpochs}</div>\n              <div>Prescribed Epochs: {row.original.prescribedEpochs}</div>\n            </div>\n          }\n        >\n          {`${(row.original.successRatio * 100).toFixed(2)}%`}\n        </Tooltip>\n      ),\n    }),\n    columnHelper.accessor('reportStatus', {\n      id: 'reportStatus',\n      header:\n        selectedEpochIndex == 0 ? 'Current Report Status' : 'Report Status',\n      sortDescFirst: true,\n    }),\n\n    columnHelper.accessor('failedGateways', {\n      id: 'failedGateways',\n      header: 'Failed Gateways',\n      sortDescFirst: true,\n      cell: ({ row }) =>\n        row.original.failedGateways ||\n        (selectedEpochIndex == 0 ? 'Pending' : 'N/A'),\n    }),\n  ];\n\n  return (\n    <div>\n      <div className=\"flex w-full items-center rounded-t-xl border border-grey-600 bg-containerL3 pl-6 pr-[0.8125rem] text-sm \">\n        <div className=\"grow text-mid\">Observers</div>\n        <div className=\"flex items-center gap-3\">\n          <Dropdown\n            options={\n              epochs?.map((epoch, index) => ({\n                label:\n                  index == 0 ? 'Current Epoch' : `Epoch ${epoch?.epochIndex}`,\n                value: index.toString(),\n              })) || []\n            }\n            onChange={(e) => {\n              setSelectedEpochIndex(Number(e.target.value));\n            }}\n            value={selectedEpochIndex.toString()}\n          />\n          <ColumnSelector tableId=\"observers\" columns={columns} />\n        </div>\n      </div>\n      <TableView\n        columns={columns}\n        data={observersTableData}\n        isLoading={isLoading || gatewaysLoading || observationsLoading}\n        noDataFoundText=\"No prescribed observers found.\"\n        defaultSortingState={{ id: 'ncw', desc: true }}\n        onRowClick={(row) => {\n          navigate(`/gateways/${row.gatewayAddress}`);\n        }}\n        tableId=\"observers\"\n      />\n    </div>\n  );\n};\n\nexport default ObserversTable;\n","import Header from '@src/components/Header';\nimport Banner from './Banner';\nimport ObserversTable from './ObserversTable';\n\nconst Observers = () => {\n  return (\n    <div className=\"flex h-full max-w-full flex-col\">\n      <div className=\"mb-6 shrink-0\">\n        <Header />\n      </div>\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full overflow-y-auto\">\n          <div className=\"mb-6 flex flex-col gap-6 pt-0\">\n            <Banner />\n            <ObserversTable />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Observers;\n"],"names":["useObservations","epoch","arIOReadSDK","useGlobalState","state","useQuery","useObservers","InfoSection","label","value","jsxRuntimeExports","Banner","walletAddress","currentEpoch","loginOpen","setLoginOpen","reactExports","startGatewayOpen","setStartGatewayOpen","observers","observations","gateway","gatewayStatus","useGatewayInfo","myObserver","obs","prescribedStatus","numFailedGatewaysFound","acc","summary","GatewayStatus","SvgStartGatewayCubes","SvgPinkArrow","SvgGateway","SvgGatewayHover","formatAddress","formatPercentage","SvgObserversBg","SvgObserversConnectIcon","ConnectModal","StartGatewayModal","columnHelper","createColumnHelper","ObserversTable","navigate","useNavigate","epochs","useEpochs","selectedEpochIndex","setSelectedEpochIndex","selectedEpoch","isLoading","observationsLoading","gatewaysLoading","gateways","useGateways","observersTableData","setObserversTableData","observersTableData2","observer","submitted","status","acc2","columns","row","e","CopyButton","AddressCell","Tooltip","Dropdown","index","ColumnSelector","TableView","Observers","Header"],"mappings":"w7BAIA,MAAAA,EAAAC,GAAA,CACA,MAAAC,EAAAC,EAAAC,GAAAA,EAAA,WAAA,EAaA,OAXAC,EAAA,CAAA,SAAA,CAAA,eAAAH,GAAAD,GAAA,YAAAA,EAAA,aAAA,EAAA,EACA,QAAA,IAAA,CAEA,GAAAC,GAAAD,EACA,OAAAC,EAAA,gBAAAD,CAAA,EAEA,MAAA,IAAA,MAAA,2CAAA,CAAA,EACA,QAAA,CAAA,CAAAC,GAAA,CAAA,CAAAD,CACA,CAAA,CAIA,ECfAK,EAAAL,GAAA,CACA,MAAAC,EAAAC,EAAAC,GAAAA,EAAA,WAAA,EAaA,OAXAC,EAAA,CAAA,SAAA,CAAA,sBAAAH,GAAAD,GAAA,YAAAA,EAAA,aAAA,EAAA,EACA,QAAA,IAAA,CAEA,GAAAC,GAAAD,EACA,OAAAC,EAAA,uBAAAD,CAAA,EAEA,MAAA,IAAA,MAAA,oCAAA,CAAA,EACA,QAAA,CAAA,CAAAC,IAAAD,GAAA,YAAAA,EAAA,cAAA,MACA,CAAA,CAIA,ECFAM,EAAA,CAAA,CAAA,MAAAC,EAAA,MAAAC,CAAA,IACAC,EAAA,KAAA,MAAA,CAAA,UAAA,2HAAA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,qCAAA,SAAAF,CAAA,CAAA,EAAAE,EAAA,IAAA,MAAA,CAAA,UAAA,+BAAA,SAAAD,CAAA,CAAA,CACA,CAAA,CAAA,EAKAE,GAAA,IAAA,CACA,MAAAC,EAAAT,EAAAC,GAAAA,EAAA,aAAA,EACAS,EAAAV,EAAAC,GAAAA,EAAA,YAAA,EAEA,CAAAU,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEA,CAAA,KAAAG,CAAA,EAAAb,EAAAO,CAAA,EACA,CAAA,KAAAO,CAAA,EAAApB,EAAAa,CAAA,EAEA,CAAA,QAAAQ,EAAA,cAAAC,CAAA,EAAAC,EAAA,EAEAC,EAAAL,GAAA,YAAAA,EAAA,KAAAM,GAAAA,EAAA,iBAAAb,GAAA,YAAAA,EAAA,aAKAc,EAFAF,GAAA,KAEAJ,GAAA,MAAAA,EAAA,SAAAR,GAAA,YAAAA,EAAA,aAAA,IAAA,gCAAA,8BAAA,gCAMAe,EAAAH,EAAAJ,GAAA,MAAAA,EAAA,QAAAI,EAAA,gBAAA,OAAA,OAAAJ,EAAA,gBAAA,EAAA,OAAA,CAAAQ,EAAAC,IAGAD,GAAAC,EAAA,SAAAL,EAAA,cAAA,EAAA,EAAA,GAAA,CAAA,EAAA,UAAA,MAKA,OAAAd,EAAA,KAAA,MAAA,CAAA,SAAA,CAEAE,EA8BAU,GAAAQ,EAAA,UAAApB,EAAA,IAAA,MAAA,CAAA,SAAAA,EAAA,KAKA,SAAA,CAAA,UAAA,0EACA,QAAA,IAAA,CAEAQ,EAAA,EAAA,CAAA,EACA,SAAA,CAEAR,EAAA,IAAA,MAAA,CAAA,UAAA;AAAA,sGACA,SAAAA,EAAA,IAAA,MAAA,CAAA,UAAA,mDAAA,SAAAA,EAAA,IAAAqB,EAAA,CAAA,UAAA,4CAAA,CAAA,CAAA,CAAA,CAKA,CAAA,EACArB,EAAA,IAAAqB,EAAA,CAAA,UAAA,0DAAA,CAAA,EACArB,EAAA,KAAA,MAAA,CAAA,UAAA,2GAAA,SAAA,CAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,0BAAA,SAAA,CACAA,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAA,wBAAA,CAAA,EAAA,IAAAA,EAAA,IAAAsB,EAAA,CAAA,UAAA,QAAA,CAAA,CACA,CAAA,CAAA,EACAtB,EAAA,IAAA,MAAA,CAAA,UAAA,wBAAA,SAAA,4CAAA,CAAA,CAIA,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,EAAAW,EAAAX,EAAA,IAAA,MAAA,CAAA,UAAA,4FAAA,SAAAA,EAAA,KAAA,MAAA,CAAA,UAAA,kFAAA,SAAA,CAMAA,EAAA,KAAA,MAAA,CAAA,UAAA,+BAAA,SAAA,CACAA,EAAA,IAAAuB,EAAA,CAAA,UAAA,kCAAA,CAAA,EAAAvB,EAAA,IAAAwB,EAAA,CAAA,UAAA,kCAAA,CAAA,EACAxB,EAAA,IAAA,MAAA,CAAA,UAAA,8CAAA,SAAA,4BAAA,CAAA,CAGA,CAAA,CAAA,EACAA,EAAA,KAAA,MAAA,CAAA,UAAA,iDAAA,SAAA,CAEAA,EAAA,IAAAH,EAAA,CAAA,MAAA,mBACA,MAAA4B,EAAAd,EAAA,eAAA,CACA,CAAA,EACAX,EAAA,IAAAH,EAAA,CAAA,MAAA,SAAA,MAAAmB,CAAA,CAAA,EACAF,GAAAd,EAAA,KAAAA,EAAA,SAAA,CAAA,SAAA,CAGAA,EAAA,IAAAH,EAAA,CAAA,MAAA,qBACA,MAAAiB,EAAAY,EAAAZ,EAAA,yBAAA,EAAA,KAIA,CAAA,EAEAd,EAAA,IACAH,EAAA,CAAA,MAAA,uBACA,MAAAiB,EAAAY,EAAAZ,EAAA,wBAAA,EAAA,KAIA,CAAA,EAEAd,EAAA,IACAH,EAAA,CAAA,MAAA,kBACA,MAAAoB,EAAA,SAAA,CACA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,CAAA,CAEA,CAAA,CAAA,CAAA,CAAA,EAAAjB,EAAA,IAAA,MAAA,CAAA,UAAA,oFAAA,SAAAA,EAAA,IAAA,MAAA,CAAA,UAAA,qDAAA,SAAA,gCAAA,CAAA,CAAA,CAAA,EAtGAA,EAAA,IAAA,MAAA,CAAA,SAAAA,EAAA,KAEA,SAAA,CAAA,UAAA,0EACA,QAAA,IAAA,CAEAE,EAGAM,EAAA,EAAA,EAFAH,EAAA,EAAA,CAGA,EACA,SAAA,CAEAL,EAAA,IAAA,MAAA,CAAA,UAAA;AAAA,sGACA,SAAAA,EAAA,IAAA,MAAA,CAAA,UAAA,mDAAA,SAAAA,EAAA,IAAA2B,EAAA,CAAA,UAAA,qEAAA,CAAA,CAAA,CAAA,CAKA,CAAA,EACA3B,EAAA,IAAA2B,EAAA,CAAA,UAAA,sEAAA,CAAA,EACA3B,EAAA,KAAA,MAAA,CAAA,UAAA,2GAAA,SAAA,CAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,0BAAA,SAAA,CACAA,EAAA,IAAA4B,EAAA,CAAA,UAAA,QAAA,CAAA,EAAA5B,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAA,qBAAA,CAAA,EACA,GAAA,CAAA,CAAA,EACAA,EAAA,IAAA,MAAA,CAAA,UAAA,wBAAA,SAAA,qCAAA,CAAA,CAIA,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,EAgFAI,GAAAJ,EAAA,IAAA6B,EAAA,CAAA,QAAA,IAAAxB,EAAA,EAAA,CAAA,CAAA,EAEAE,GAAAP,EAAA,IAAA8B,EAAA,CAAA,QAAA,IAAAtB,EAAA,EAAA,CAAA,CAAA,CAEA,CAAA,CAAA,CAIA,ECpJAuB,EAAAC,EAAA,EAEAC,GAAA,IAAA,CACA,MAAAC,EAAAC,EAAA,EAEA,CAAA,KAAAC,CAAA,EAAAC,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAjC,EAAA,SAAA,CAAA,EAEAkC,EAAAJ,GAAA,YAAAA,EAAAE,GAEA,CAAA,UAAAG,EAAA,KAAAhC,CAAA,EAAAb,EAAA4C,CAAA,EACA,CAAA,UAAAE,EAAA,KAAAhC,CAAA,EAAApB,EAAAkD,CAAA,EAEA,CAAA,UAAAG,EAAA,KAAAC,CAAA,EAAAC,EAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAzC,EAAA,SAAA,CAAA,CAAA,EAIAA,EAAA,UAAA,IAAA,CACA,GAAA,CAAAG,GAAA,CAAAmC,GAAA,CAAAlC,EACA,OAGA,MAAAsC,EAAAvC,EAAA,OAAA,CAAAS,EAAA+B,IAAA,CAEA,MAAAtC,EAAAiC,EAAAK,EAAA,cAAA,EAEAC,EAAAxC,EAAA,QAAAuC,EAAA,eAAA,EACAE,EAAAD,EAAA,YAAAZ,GAAA,EAAA,UAAA,iBAKArB,EAAAiC,EAAA,OAAA,OAAAxC,EAAA,gBAAA,EAAA,OACA,CAAA0C,EAAAjC,IAEAiC,GAAAjC,EAAA,SAAA8B,EAAA,eAAA,EAAA,EAAA,GAGA,CACA,EAAA,OAIA,MAAA,CAAA,GAAA/B,EACA,CACA,MAAAP,EAAA,SAAA,MACA,OAAAA,EAAA,SAAA,KACA,eAAAsC,EAAA,eAEA,gBAAAA,EAAA,gBACA,IAAAA,EAAA,0BACA,eAAAtC,EAAA,MAAA,mBAAA,EACA,iBAAAA,EAAA,MAAA,qBAAA,EACA,aACAsC,EAAA,0BAAAA,EAAA,0BAGA,aAAAE,EACA,eAAAlC,CACA,CACA,CACA,EACA,CAAA,CACA,EAEA8B,EAAAC,CAAA,CAAA,EAAA,CAAAvC,EAAAmC,EAAAlC,EAAA4B,CAAA,CAAA,EAIA,MAAAe,EAAA,CAAAtB,EAAA,SAAA,QAAA,CACA,GAAA,QACA,OAAA,QACA,cAAA,EACA,CAAA,EACAA,EAAA,SAAA,SAAA,CACA,GAAA,SACA,OAAA,SACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAAtD,EAAA,KAAA,MAAA,CAAA,UAAA,0BAAA,SAAA,CAGAA,EAAA,IAAA,IAAA,CAAA,KAAA,WAAAsD,EAAA,SAAA,QAAA,CAAA,GACA,OAAA,SACA,IAAA,aACA,QAAAC,GAAA,CAEAA,EAAA,gBAAA,CAAA,EACA,UAAA,gBACA,SAAAD,EAAA,SAAA,QAAA,CAEA,CAAA,EACAtD,EAAA,IAAAwD,EAAA,CAAA,WAAAF,EAAA,SAAA,QAAA,CAAA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,EAEAvB,EAAA,SAAA,iBAAA,CACA,GAAA,iBACA,OAAA,kBACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAAtD,EAAA,IAAAyD,EAAA,CAAA,QAAAH,EAAA,SAAA,gBAAA,CAAA,CAAA,CAEA,CAAA,EAEAvB,EAAA,SAAA,kBAAA,CAEA,GAAA,kBACA,OAAA,mBACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAAtD,EAAA,IAAAyD,EAAA,CAAA,QAAAH,EAAA,SAAA,iBAAA,CAAA,CAAA,CAEA,CAAA,EAEAvB,EAAA,SAAA,MAAA,CACA,GAAA,MACA,OAAA,qBACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAA5B,EAAA4B,EAAA,SAAA,GAAA,CACA,CAAA,EACAvB,EAAA,SAAA,eAAA,CACA,GAAA,eACA,OAAA,uBACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAAtD,EAAA,IAEA0D,EAAA,CAAA,QAAA1D,EAAA,KAAA,MAAA,CAAA,SAAA,CAGAA,EAAA,KAAA,MAAA,CAAA,SAAA,CAAA,oBAAAsD,EAAA,SAAA,cAAA,CAAA,CAAA,EAAAtD,EAAA,KAAA,MAAA,CAAA,SAAA,CACA,sBAAAsD,EAAA,SAAA,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EACA,SAAA,IAAAA,EAAA,SAAA,aAAA,KAAA,QAAA,CAAA,CAAA,GAGA,CAAA,CACA,CAAA,EAEAvB,EAAA,SAAA,eAAA,CACA,GAAA,eACA,OAAAO,GAAA,EAAA,wBAAA,gBAEA,cAAA,EACA,CAAA,EACAP,EAAA,SAAA,iBAAA,CAEA,GAAA,iBACA,OAAA,kBACA,cAAA,GACA,KAAA,CAAA,CAAA,IAAAuB,CAAA,IAAAA,EAAA,SAAA,iBAAAhB,GAAA,EAAA,UAAA,MAGA,CAAA,CACA,EAGA,OAAAtC,EAAA,KAAA,MAAA,CAAA,SAAA,CAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,2GAAA,SAAA,CACAA,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAA,WAAA,CAAA,EAAAA,EAAA,KAAA,MAAA,CAAA,UAAA,0BAAA,SAAA,CAEAA,EAAA,IAAA2D,EAAA,CAAA,SAAAvB,GAAA,YAAAA,EAAA,IAAA,CAAA7C,EAAAqE,KAAA,CAEA,MAAAA,GAAA,EAAA,gBAAA,SAAArE,GAAA,YAAAA,EAAA,UAAA,GAEA,MAAAqE,EAAA,SAAA,CACA,MAAA,CAAA,EACA,SAAAL,GAAA,CAGAhB,EAAA,OAAAgB,EAAA,OAAA,KAAA,CAAA,CAAA,EACA,MAAAjB,EAAA,SAAA,CACA,CAAA,EACAtC,EAAA,IAAA6D,EAAA,CAAA,QAAA,YAAA,QAAAR,CAAA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,CAAA,EACArD,EAAA,IACA8D,EAAA,CAAA,QAAAT,EACA,KAAAP,EACA,UAAAL,GAAAE,GAAAD,EACA,gBAAA,iCACA,oBAAA,CAAA,GAAA,MAAA,KAAA,EAAA,EACA,WAAAY,GAAA,CAEApB,EAAA,aAAAoB,EAAA,cAAA,EAAA,CAAA,EACA,QAAA,WACA,CAAA,CACA,CAAA,CAAA,CAGA,ECtNAS,GAAA,IACA/D,EAAA,KAAA,MAAA,CAAA,UAAA,kCAAA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAAA,EAAA,IAAAgE,EAAA,CAAA,CAAA,CAAA,CAAA,EAEAhE,EAAA,IAAA,MAAA,CAAA,UAAA,yBAAA,SAAAA,EAAA,IAAA,MAAA,CAAA,UAAA,yBAAA,SAAAA,EAAA,KAAA,MAAA,CAAA,UAAA,gCAAA,SAAA,CAIAA,EAAA,IAAAC,GAAA,CAAA,CAAA,EAAAD,EAAA,IAAAiC,GAAA,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGA,CAAA,CAAA"}